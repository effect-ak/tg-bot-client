openapi: 3.1.0
info:
  title: Telegram bot api
  description: Generated from official Telegram documentation
  version: '9.0'
  contact:
    name: Aleksandr Kondaurov
    url: https://github.com/effect-ak/tg-bot-client/issues
  summary: >-
    [![NPM
    Version](https://img.shields.io/npm/v/%40effect-ak%2Ftg-bot-client)](https://www.npmjs.com/package/@effect-ak/tg-bot-client)
servers:
  - url: https://api.telegram.org/bot{bot-token}
    variables:
      bot-token:
        default: put-your-token
        description: take from bot father
tags: []
paths:
  /addStickerToSet:
    post:
      tags:
        - stickers
      summary: add_sticker_to_set
      description: >-
        Use this method to add a new sticker to a set created by the
        bot<br/>Emoji sticker sets can have up to 200 stickers<br/>Other sticker
        sets can have up to 120 stickers
      externalDocs:
        url: https://core.telegram.org/bots/api#addstickertoset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier of sticker set owner
                name:
                  type: string
                  description: Sticker set name
                sticker:
                  $ref: '#/components/schemas/InputSticker'
                  description: >-
                    A JSON-serialized object with information about the added
                    sticker<br/>If exactly the same sticker had already been
                    added to the set, then the set isn&#39;t changed.
              required:
                - user_id
                - name
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /answerCallbackQuery:
    post:
      tags:
        - available-methods
      summary: answer_callback_query
      description: >
        Use this method to send answers to callback queries sent from inline
        keyboards<br/>The answer will be displayed to the user as a notification
        at the top of the chat screen or as an alert<br/>

        Alternatively, the user can be redirected to the specified Game
        URL<br/>For this option to work, you must first create a game for your
        bot via @BotFather and accept the terms<br/>Otherwise, you may use links
        like t.me/your_bot?start=XXXX that open your bot with a parameter.
      externalDocs:
        url: https://core.telegram.org/bots/api#answercallbackquery
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callback_query_id:
                  type: string
                  description: Unique identifier for the query to be answered
                text:
                  type: string
                  description: >-
                    Text of the notification<br/>If not specified, nothing will
                    be shown to the user, 0-200 characters
                show_alert:
                  type: boolean
                  description: >-
                    If True, an alert will be shown by the client instead of a
                    notification at the top of the chat screen<br/>Defaults to
                    false.
                url:
                  type: string
                  description: >-
                    URL that will be opened by the user&#39;s client<br/>If you
                    have created a Game and accepted the conditions via
                    @BotFather, specify the URL that opens your game - note that
                    this will only work if the query comes from a callback_game
                    button<br/>.<br/>Otherwise, you may use links like
                    t.me/your_bot?start=XXXX that open your bot with a
                    parameter.
                cache_time:
                  type: number
                  description: >-
                    The maximum amount of time in seconds that the result of the
                    callback query may be cached client-side<br/>Telegram apps
                    will support caching starting in version 3.14<br/>Defaults
                    to 0.
              required:
                - callback_query_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /answerInlineQuery:
    post:
      tags:
        - inline-mode
      summary: answer_inline_query
      description: >-
        Use this method to send answers to an inline query<br/>.<br/>No more
        than 50 results per query are allowed.
      externalDocs:
        url: https://core.telegram.org/bots/api#answerinlinequery
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inline_query_id:
                  type: string
                  description: Unique identifier for the answered query
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/InlineQueryResult'
                  description: A JSON-serialized array of results for the inline query
                cache_time:
                  type: number
                  description: >-
                    The maximum amount of time in seconds that the result of the
                    inline query may be cached on the server<br/>Defaults to
                    300.
                is_personal:
                  type: boolean
                  description: >-
                    Pass True if results may be cached on the server side only
                    for the user that sent the query<br/>By default, results may
                    be returned to any user who sends the same query.
                next_offset:
                  type: string
                  description: >-
                    Pass the offset that a client should send in the next query
                    with the same text to receive more results<br/>Pass an empty
                    string if there are no more results or if you don&#39;t
                    support pagination<br/>Offset length can&#39;t exceed 64
                    bytes.
                button:
                  $ref: '#/components/schemas/InlineQueryResultsButton'
                  description: >-
                    A JSON-serialized object describing a button to be shown
                    above inline query results
              required:
                - inline_query_id
                - results
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /answerPreCheckoutQuery:
    post:
      tags:
        - payments
      summary: answer_pre_checkout_query
      description: >-
        Once the user has confirmed their payment and shipping details, the Bot
        API sends the final confirmation in the form of an Update with the field
        pre_checkout_query<br/>Use this method to respond to such pre-checkout
        queries<br/>Note: The Bot API must receive an answer within 10 seconds
        after the pre-checkout query was sent.
      externalDocs:
        url: https://core.telegram.org/bots/api#answerprecheckoutquery
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pre_checkout_query_id:
                  type: string
                  description: Unique identifier for the query to be answered
                ok:
                  type: boolean
                  description: >-
                    Specify True if everything is alright (goods are available,
                    etc.) and the bot is ready to proceed with the order<br/>Use
                    False if there are any problems.
                error_message:
                  type: string
                  description: >-
                    Required if ok is False<br/>Error message in human readable
                    form that explains the reason for failure to proceed with
                    the checkout (e.g<br/>"Sorry, somebody just bought the last
                    of our amazing black T-shirts while you were busy filling
                    out your payment details<br/>Please choose a different color
                    or garment!")<br/>Telegram will display this message to the
                    user.
              required:
                - pre_checkout_query_id
                - ok
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /answerShippingQuery:
    post:
      tags:
        - payments
      summary: answer_shipping_query
      description: >-
        If you sent an invoice requesting a shipping address and the parameter
        is_flexible was specified, the Bot API will send an Update with a
        shipping_query field to the bot<br/>Use this method to reply to shipping
        queries
      externalDocs:
        url: https://core.telegram.org/bots/api#answershippingquery
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                shipping_query_id:
                  type: string
                  description: Unique identifier for the query to be answered
                ok:
                  type: boolean
                  description: >-
                    Pass True if delivery to the specified address is possible
                    and False if there are any problems (for example, if
                    delivery to the specified address is not possible)
                shipping_options:
                  type: array
                  items:
                    $ref: '#/components/schemas/ShippingOption'
                  description: >-
                    Required if ok is True<br/>A JSON-serialized array of
                    available shipping options.
                error_message:
                  type: string
                  description: >-
                    Required if ok is False<br/>Error message in human readable
                    form that explains why it is impossible to complete the
                    order (e.g<br/>“Sorry, delivery to your desired address is
                    unavailable”)<br/>Telegram will display this message to the
                    user.
              required:
                - shipping_query_id
                - ok
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /answerWebAppQuery:
    post:
      tags:
        - inline-mode
      summary: answer_web_app_query
      description: >-
        Use this method to set the result of an interaction with a Web App and
        send a corresponding message on behalf of the user to the chat from
        which the query originated
      externalDocs:
        url: https://core.telegram.org/bots/api#answerwebappquery
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                web_app_query_id:
                  type: string
                  description: Unique identifier for the query to be answered
                result:
                  $ref: '#/components/schemas/InlineQueryResult'
                  description: A JSON-serialized object describing the message to be sent
              required:
                - web_app_query_id
                - result
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentWebAppMessage'
              example: SentWebAppMessage
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /approveChatJoinRequest:
    post:
      tags:
        - available-methods
      summary: approve_chat_join_request
      description: >-
        Use this method to approve a chat join request<br/>The bot must be an
        administrator in the chat for this to work and must have the
        can_invite_users administrator right
      externalDocs:
        url: https://core.telegram.org/bots/api#approvechatjoinrequest
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /banChatMember:
    post:
      tags:
        - available-methods
      summary: ban_chat_member
      description: >-
        Use this method to ban a user in a group, a supergroup or a
        channel<br/>In the case of supergroups and channels, the user will not
        be able to return to the chat on their own using invite links, etc.,
        unless unbanned first<br/>The bot must be an administrator in the chat
        for this to work and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#banchatmember
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target group or username of the
                    target supergroup or channel (in the format
                    @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
                until_date:
                  type: number
                  description: >-
                    Date when the user will be unbanned; Unix time<br/>If user
                    is banned for more than 366 days or less than 30 seconds
                    from the current time they are considered to be banned
                    forever<br/>Applied for supergroups and channels only.
                revoke_messages:
                  type: boolean
                  description: >-
                    Pass True to delete all messages from the chat for the user
                    that is being removed<br/>If False, the user will be able to
                    see messages in the group that were sent before the user was
                    removed<br/>Always True for supergroups and channels.
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /banChatSenderChat:
    post:
      tags:
        - available-methods
      summary: ban_chat_sender_chat
      description: >-
        Use this method to ban a channel chat in a supergroup or a
        channel<br/>Until the chat is unbanned, the owner of the banned chat
        won&#39;t be able to send messages on behalf of any of their
        channels<br/>The bot must be an administrator in the supergroup or
        channel for this to work and must have the appropriate administrator
        rights
      externalDocs:
        url: https://core.telegram.org/bots/api#banchatsenderchat
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                sender_chat_id:
                  type: number
                  description: Unique identifier of the target sender chat
              required:
                - chat_id
                - sender_chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /close:
    post:
      tags:
        - available-methods
      summary: close
      description: >-
        Use this method to close the bot instance before moving it from one
        local server to another<br/>You need to delete the webhook before
        calling this method to ensure that the bot isn&#39;t launched again
        after server restart<br/>The method will return error 429 in the first
        10 minutes after the bot is launched<br/>Requires no parameters.
      externalDocs:
        url: https://core.telegram.org/bots/api#close
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /closeForumTopic:
    post:
      tags:
        - available-methods
      summary: close_forum_topic
      description: >-
        Use this method to close an open topic in a forum supergroup
        chat<br/>The bot must be an administrator in the chat for this to work
        and must have the can_manage_topics administrator rights, unless it is
        the creator of the topic
      externalDocs:
        url: https://core.telegram.org/bots/api#closeforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread of the forum
                    topic
              required:
                - chat_id
                - message_thread_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /closeGeneralForumTopic:
    post:
      tags:
        - available-methods
      summary: close_general_forum_topic
      description: >-
        Use this method to close an open &#39;General&#39; topic in a forum
        supergroup chat<br/>The bot must be an administrator in the chat for
        this to work and must have the can_manage_topics administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#closegeneralforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /convertGiftToStars:
    post:
      tags:
        - updating-messages
      summary: convert_gift_to_stars
      description: >-
        Converts a given regular gift to Telegram Stars<br/>Requires the
        can_convert_gifts_to_stars business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#convertgifttostars
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                owned_gift_id:
                  type: string
                  description: >-
                    Unique identifier of the regular gift that should be
                    converted to Telegram Stars
              required:
                - business_connection_id
                - owned_gift_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /copyMessage:
    post:
      tags:
        - available-methods
      summary: copy_message
      description: >-
        Use this method to copy messages of any kind<br/>Service messages, paid
        media messages, giveaway messages, giveaway winners messages, and
        invoice messages can&#39;t be copied<br/>A quiz poll can be copied only
        if the value of the field correct_option_id is known to the bot<br/>The
        method is analogous to the method forwardMessage, but the copied message
        doesn&#39;t have a link to the original message
      externalDocs:
        url: https://core.telegram.org/bots/api#copymessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                from_chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the chat where the original message
                    was sent (or channel username in the format
                    @channelusername)
                message_id:
                  type: number
                  description: Message identifier in the chat specified in from_chat_id
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                video_start_timestamp:
                  type: number
                  description: New start timestamp for the copied video in the message
                caption:
                  type: string
                  description: >-
                    New caption for media, 0-1024 characters after entities
                    parsing<br/>If not specified, the original caption is kept
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the new caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the new caption, which can be specified instead of
                    parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media<br/>Ignored if a new caption isn&#39;t specified.
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - from_chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
              example: MessageId
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /copyMessages:
    post:
      tags:
        - available-methods
      summary: copy_messages
      description: >-
        Use this method to copy messages of any kind<br/>If some of the
        specified messages can&#39;t be found or copied, they are
        skipped<br/>Service messages, paid media messages, giveaway messages,
        giveaway winners messages, and invoice messages can&#39;t be
        copied<br/>A quiz poll can be copied only if the value of the field
        correct_option_id is known to the bot<br/>The method is analogous to the
        method forwardMessages, but the copied messages don&#39;t have a link to
        the original message<br/>Album grouping is kept for copied messages
      externalDocs:
        url: https://core.telegram.org/bots/api#copymessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                from_chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the chat where the original messages
                    were sent (or channel username in the format
                    @channelusername)
                message_ids:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized list of 1-100 identifiers of messages in
                    the chat from_chat_id to copy<br/>The identifiers must be
                    specified in a strictly increasing order.
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the messages silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent messages from forwarding
                    and saving
                remove_caption:
                  type: boolean
                  description: Pass True to copy the messages without their captions
              required:
                - chat_id
                - from_chat_id
                - message_ids
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageId'
              example: MessageId[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /createChatInviteLink:
    post:
      tags:
        - available-methods
      summary: create_chat_invite_link
      description: >-
        Use this method to create an additional invite link for a chat<br/>The
        bot must be an administrator in the chat for this to work and must have
        the appropriate administrator rights<br/>The link can be revoked using
        the method revokeChatInviteLink
      externalDocs:
        url: https://core.telegram.org/bots/api#createchatinvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                name:
                  type: string
                  description: Invite link name; 0-32 characters
                expire_date:
                  type: number
                  description: Point in time (Unix timestamp) when the link will expire
                member_limit:
                  type: number
                  description: >-
                    The maximum number of users that can be members of the chat
                    simultaneously after joining the chat via this invite link;
                    1-99999
                creates_join_request:
                  type: boolean
                  description: >-
                    True, if users joining the chat via the link need to be
                    approved by chat administrators<br/>If True, member_limit
                    can&#39;t be specified
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
              example: ChatInviteLink
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /createChatSubscriptionInviteLink:
    post:
      tags:
        - available-methods
      summary: create_chat_subscription_invite_link
      description: >-
        Use this method to create a subscription invite link for a channel
        chat<br/>The bot must have the can_invite_users administrator
        rights<br/>The link can be edited using the method
        editChatSubscriptionInviteLink or revoked using the method
        revokeChatInviteLink
      externalDocs:
        url: https://core.telegram.org/bots/api#createchatsubscriptioninvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target channel chat or username of
                    the target channel (in the format @channelusername)
                subscription_period:
                  type: number
                  description: >-
                    The number of seconds the subscription will be active for
                    before the next payment<br/>Currently, it must always be
                    2592000 (30 days).
                subscription_price:
                  type: number
                  description: >-
                    The amount of Telegram Stars a user must pay initially and
                    after each subsequent subscription period to be a member of
                    the chat; 1-10000
                name:
                  type: string
                  description: Invite link name; 0-32 characters
              required:
                - chat_id
                - subscription_period
                - subscription_price
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
              example: ChatInviteLink
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /createForumTopic:
    post:
      tags:
        - available-methods
      summary: create_forum_topic
      description: >-
        Use this method to create a topic in a forum supergroup chat<br/>The bot
        must be an administrator in the chat for this to work and must have the
        can_manage_topics administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#createforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                name:
                  type: string
                  description: Topic name, 1-128 characters
                icon_color:
                  type: number
                  description: >-
                    Color of the topic icon in RGB format<br/>Currently, must be
                    one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331
                    (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or
                    16478047 (0xFB6F5F)
                icon_custom_emoji_id:
                  type: string
                  description: >-
                    Unique identifier of the custom emoji shown as the topic
                    icon<br/>Use getForumTopicIconStickers to get all allowed
                    custom emoji identifiers.
              required:
                - chat_id
                - name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumTopic'
              example: ForumTopic
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /createInvoiceLink:
    post:
      tags:
        - payments
      summary: create_invoice_link
      description: Use this method to create a link for an invoice
      externalDocs:
        url: https://core.telegram.org/bots/api#createinvoicelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Product name, 1-32 characters
                description:
                  type: string
                  description: Product description, 1-255 characters
                payload:
                  type: string
                  description: >-
                    Bot-defined invoice payload, 1-128 bytes<br/>This will not
                    be displayed to the user, use it for your internal
                    processes.
                currency:
                  type: string
                  description: >-
                    Three-letter ISO 4217 currency code, see more on
                    currencies<br/>Pass “XTR” for payments in Telegram Stars.
                prices:
                  type: array
                  items:
                    $ref: '#/components/schemas/LabeledPrice'
                  description: >-
                    Price breakdown, a JSON-serialized list of components
                    (e.g<br/>product price, tax, discount, delivery cost,
                    delivery tax, bonus, etc.)<br/>Must contain exactly one item
                    for payments in Telegram Stars.
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the link will be created<br/>For payments in Telegram
                    Stars only.
                provider_token:
                  type: string
                  description: >-
                    Payment provider token, obtained via @BotFather<br/>Pass an
                    empty string for payments in Telegram Stars.
                subscription_period:
                  type: number
                  description: >-
                    The number of seconds the subscription will be active for
                    before the next payment<br/>The currency must be set to
                    “XTR” (Telegram Stars) if the parameter is
                    used<br/>Currently, it must always be 2592000 (30 days) if
                    specified<br/>Any number of subscriptions can be active for
                    a given bot at the same time, including multiple concurrent
                    subscriptions from the same user<br/>Subscription price must
                    no exceed 10000 Telegram Stars.
                max_tip_amount:
                  type: number
                  description: >-
                    The maximum accepted amount for tips in the smallest units
                    of the currency (integer, not float/double)<br/>For example,
                    for a maximum tip of US$ 1.45 pass max_tip_amount =
                    145<br/>See the exp parameter in currencies.json, it shows
                    the number of digits past the decimal point for each
                    currency (2 for the majority of currencies)<br/>Defaults to
                    0<br/>Not supported for payments in Telegram Stars.
                suggested_tip_amounts:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized array of suggested amounts of tips in the
                    smallest units of the currency (integer, not
                    float/double)<br/>At most 4 suggested tip amounts can be
                    specified<br/>The suggested tip amounts must be positive,
                    passed in a strictly increased order and must not exceed
                    max_tip_amount.
                provider_data:
                  type: string
                  description: >-
                    JSON-serialized data about the invoice, which will be shared
                    with the payment provider<br/>A detailed description of
                    required fields should be provided by the payment provider.
                photo_url:
                  type: string
                  description: >-
                    URL of the product photo for the invoice<br/>Can be a photo
                    of the goods or a marketing image for a service.
                photo_size:
                  type: number
                  description: Photo size in bytes
                photo_width:
                  type: number
                  description: Photo width
                photo_height:
                  type: number
                  description: Photo height
                need_name:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s full name to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_phone_number:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s phone number to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_email:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s email address to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_shipping_address:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s shipping address to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                send_phone_number_to_provider:
                  type: boolean
                  description: >-
                    Pass True if the user&#39;s phone number should be sent to
                    the provider<br/>Ignored for payments in Telegram Stars.
                send_email_to_provider:
                  type: boolean
                  description: >-
                    Pass True if the user&#39;s email address should be sent to
                    the provider<br/>Ignored for payments in Telegram Stars.
                is_flexible:
                  type: boolean
                  description: >-
                    Pass True if the final price depends on the shipping
                    method<br/>Ignored for payments in Telegram Stars.
              required:
                - title
                - description
                - payload
                - currency
                - prices
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
              example: string
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /createNewStickerSet:
    post:
      tags:
        - stickers
      summary: create_new_sticker_set
      description: >-
        Use this method to create a new sticker set owned by a user<br/>The bot
        will be able to edit the sticker set thus created
      externalDocs:
        url: https://core.telegram.org/bots/api#createnewstickerset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier of created sticker set owner
                name:
                  type: string
                  description: >-
                    Short name of sticker set, to be used in t.me/addstickers/
                    URLs (e.g., animals)<br/>Can contain only English letters,
                    digits and underscores<br/>Must begin with a letter,
                    can&#39;t contain consecutive underscores and must end in
                    "_by_&lt;bot_username&gt;"<br/>&lt;bot_username&gt; is case
                    insensitive<br/>1-64 characters.
                title:
                  type: string
                  description: Sticker set title, 1-64 characters
                stickers:
                  type: array
                  items:
                    $ref: '#/components/schemas/InputSticker'
                  description: >-
                    A JSON-serialized list of 1-50 initial stickers to be added
                    to the sticker set
                sticker_type:
                  type: string
                  description: >-
                    Type of stickers in the set, pass “regular”, “mask”, or
                    “custom_emoji”<br/>By default, a regular sticker set is
                    created.
                needs_repainting:
                  type: boolean
                  description: >-
                    Pass True if stickers in the sticker set must be repainted
                    to the color of text when used in messages, the accent color
                    if used as emoji status, white on chat photos, or another
                    appropriate color based on context; for custom emoji sticker
                    sets only
              required:
                - user_id
                - name
                - title
                - stickers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /declineChatJoinRequest:
    post:
      tags:
        - available-methods
      summary: decline_chat_join_request
      description: >-
        Use this method to decline a chat join request<br/>The bot must be an
        administrator in the chat for this to work and must have the
        can_invite_users administrator right
      externalDocs:
        url: https://core.telegram.org/bots/api#declinechatjoinrequest
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteBusinessMessages:
    post:
      tags:
        - updating-messages
      summary: delete_business_messages
      description: >-
        Delete messages on behalf of a business account<br/>Requires the
        can_delete_outgoing_messages business bot right to delete messages sent
        by the bot itself, or the can_delete_all_messages business bot right to
        delete any message
      externalDocs:
        url: https://core.telegram.org/bots/api#deletebusinessmessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which to delete the messages
                message_ids:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized list of 1-100 identifiers of messages to
                    delete<br/>All messages must be from the same chat<br/>See
                    deleteMessage for limitations on which messages can be
                    deleted
              required:
                - business_connection_id
                - message_ids
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteChatPhoto:
    post:
      tags:
        - available-methods
      summary: delete_chat_photo
      description: >-
        Use this method to delete a chat photo<br/>Photos can&#39;t be changed
        for private chats<br/>The bot must be an administrator in the chat for
        this to work and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#deletechatphoto
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteChatStickerSet:
    post:
      tags:
        - available-methods
      summary: delete_chat_sticker_set
      description: >-
        Use this method to delete a group sticker set from a supergroup<br/>The
        bot must be an administrator in the chat for this to work and must have
        the appropriate administrator rights<br/>Use the field
        can_set_sticker_set optionally returned in getChat requests to check if
        the bot can use this method
      externalDocs:
        url: https://core.telegram.org/bots/api#deletechatstickerset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteForumTopic:
    post:
      tags:
        - available-methods
      summary: delete_forum_topic
      description: >-
        Use this method to delete a forum topic along with all its messages in a
        forum supergroup chat<br/>The bot must be an administrator in the chat
        for this to work and must have the can_delete_messages administrator
        rights
      externalDocs:
        url: https://core.telegram.org/bots/api#deleteforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread of the forum
                    topic
              required:
                - chat_id
                - message_thread_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteMessage:
    post:
      tags:
        - updating-messages
      summary: delete_message
      description: >-
        Use this method to delete a message, including service messages, with
        the following limitations:- A message can only be deleted if it was sent
        less than 48 hours ago<br/>.<br/>- Service messages about a supergroup,
        channel, or forum topic creation can&#39;t be deleted<br/>.<br/>- A dice
        message in a private chat can only be deleted if it was sent more than
        24 hours ago<br/>.<br/>- Bots can delete outgoing messages in private
        chats, groups, and supergroups<br/>.<br/>- Bots can delete incoming
        messages in private chats<br/>.<br/>- Bots granted can_post_messages
        permissions can delete outgoing messages in channels<br/>.<br/>- If the
        bot is an administrator of a group, it can delete any message
        there<br/>.<br/>- If the bot has can_delete_messages permission in a
        supergroup or a channel, it can delete any message there<br/>.
      externalDocs:
        url: https://core.telegram.org/bots/api#deletemessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                message_id:
                  type: number
                  description: Identifier of the message to delete
              required:
                - chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteMessages:
    post:
      tags:
        - updating-messages
      summary: delete_messages
      description: >-
        Use this method to delete multiple messages simultaneously<br/>If some
        of the specified messages can&#39;t be found, they are skipped
      externalDocs:
        url: https://core.telegram.org/bots/api#deletemessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                message_ids:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized list of 1-100 identifiers of messages to
                    delete<br/>See deleteMessage for limitations on which
                    messages can be deleted
              required:
                - chat_id
                - message_ids
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteMyCommands:
    post:
      tags:
        - available-methods
      summary: delete_my_commands
      description: >-
        Use this method to delete the list of the bot&#39;s commands for the
        given scope and user language<br/>After deletion, higher level commands
        will be shown to affected users
      externalDocs:
        url: https://core.telegram.org/bots/api#deletemycommands
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  $ref: '#/components/schemas/BotCommandScope'
                  description: >-
                    A JSON-serialized object, describing scope of users for
                    which the commands are relevant<br/>Defaults to
                    BotCommandScopeDefault.
                language_code:
                  type: string
                  description: >-
                    A two-letter ISO 639-1 language code<br/>If empty, commands
                    will be applied to all users from the given scope, for whose
                    language there are no dedicated commands
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteStickerFromSet:
    post:
      tags:
        - stickers
      summary: delete_sticker_from_set
      description: Use this method to delete a sticker from a set created by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#deletestickerfromset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sticker:
                  type: string
                  description: File identifier of the sticker
              required:
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteStickerSet:
    post:
      tags:
        - stickers
      summary: delete_sticker_set
      description: Use this method to delete a sticker set that was created by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#deletestickerset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Sticker set name
              required:
                - name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteStory:
    post:
      tags:
        - updating-messages
      summary: delete_story
      description: >-
        Deletes a story previously posted by the bot on behalf of a managed
        business account<br/>Requires the can_manage_stories business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#deletestory
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                story_id:
                  type: number
                  description: Unique identifier of the story to delete
              required:
                - business_connection_id
                - story_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /deleteWebhook:
    post:
      tags:
        - getting-updates
      summary: delete_webhook
      description: >-
        Use this method to remove webhook integration if you decide to switch
        back to getUpdates
      externalDocs:
        url: https://core.telegram.org/bots/api#deletewebhook
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                drop_pending_updates:
                  type: boolean
                  description: Pass True to drop all pending updates
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editChatInviteLink:
    post:
      tags:
        - available-methods
      summary: edit_chat_invite_link
      description: >-
        Use this method to edit a non-primary invite link created by the
        bot<br/>The bot must be an administrator in the chat for this to work
        and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#editchatinvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                invite_link:
                  type: string
                  description: The invite link to edit
                name:
                  type: string
                  description: Invite link name; 0-32 characters
                expire_date:
                  type: number
                  description: Point in time (Unix timestamp) when the link will expire
                member_limit:
                  type: number
                  description: >-
                    The maximum number of users that can be members of the chat
                    simultaneously after joining the chat via this invite link;
                    1-99999
                creates_join_request:
                  type: boolean
                  description: >-
                    True, if users joining the chat via the link need to be
                    approved by chat administrators<br/>If True, member_limit
                    can&#39;t be specified
              required:
                - chat_id
                - invite_link
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
              example: ChatInviteLink
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editChatSubscriptionInviteLink:
    post:
      tags:
        - available-methods
      summary: edit_chat_subscription_invite_link
      description: >-
        Use this method to edit a subscription invite link created by the
        bot<br/>The bot must have the can_invite_users administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#editchatsubscriptioninvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                invite_link:
                  type: string
                  description: The invite link to edit
                name:
                  type: string
                  description: Invite link name; 0-32 characters
              required:
                - chat_id
                - invite_link
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
              example: ChatInviteLink
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editForumTopic:
    post:
      tags:
        - available-methods
      summary: edit_forum_topic
      description: >-
        Use this method to edit name and icon of a topic in a forum supergroup
        chat<br/>The bot must be an administrator in the chat for this to work
        and must have the can_manage_topics administrator rights, unless it is
        the creator of the topic
      externalDocs:
        url: https://core.telegram.org/bots/api#editforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread of the forum
                    topic
                name:
                  type: string
                  description: >-
                    New topic name, 0-128 characters<br/>If not specified or
                    empty, the current name of the topic will be kept
                icon_custom_emoji_id:
                  type: string
                  description: >-
                    New unique identifier of the custom emoji shown as the topic
                    icon<br/>Use getForumTopicIconStickers to get all allowed
                    custom emoji identifiers<br/>Pass an empty string to remove
                    the icon<br/>If not specified, the current icon will be kept
              required:
                - chat_id
                - message_thread_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editGeneralForumTopic:
    post:
      tags:
        - available-methods
      summary: edit_general_forum_topic
      description: >-
        Use this method to edit the name of the &#39;General&#39; topic in a
        forum supergroup chat<br/>The bot must be an administrator in the chat
        for this to work and must have the can_manage_topics administrator
        rights
      externalDocs:
        url: https://core.telegram.org/bots/api#editgeneralforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                name:
                  type: string
                  description: New topic name, 1-128 characters
              required:
                - chat_id
                - name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editMessageCaption:
    post:
      tags:
        - updating-messages
      summary: edit_message_caption
      description: >-
        Use this method to edit captions of messages<br/>Note that business
        messages that were not sent by the bot and do not contain an inline
        keyboard can only be edited within 48 hours from the time they were
        sent.
      externalDocs:
        url: https://core.telegram.org/bots/api#editmessagecaption
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message to edit
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                caption:
                  type: string
                  description: >-
                    New caption of the message, 0-1024 characters after entities
                    parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the message caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media<br/>Supported only for animation, photo and video
                    messages.
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for an inline keyboard.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editMessageLiveLocation:
    post:
      tags:
        - updating-messages
      summary: edit_message_live_location
      description: >-
        Use this method to edit live location messages<br/>A location can be
        edited until its live_period expires or editing is explicitly disabled
        by a call to stopMessageLiveLocation
      externalDocs:
        url: https://core.telegram.org/bots/api#editmessagelivelocation
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  description: Latitude of new location
                longitude:
                  type: number
                  description: Longitude of new location
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message to edit
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                live_period:
                  type: number
                  description: >-
                    New period in seconds during which the location can be
                    updated, starting from the message send date<br/>If
                    0x7FFFFFFF is specified, then the location can be updated
                    forever<br/>Otherwise, the new value must not exceed the
                    current live_period by more than a day, and the live
                    location expiration date must remain within the next 90
                    days<br/>If not specified, then live_period remains
                    unchanged
                horizontal_accuracy:
                  type: number
                  description: >-
                    The radius of uncertainty for the location, measured in
                    meters; 0-1500
                heading:
                  type: number
                  description: >-
                    Direction in which the user is moving, in degrees<br/>Must
                    be between 1 and 360 if specified.
                proximity_alert_radius:
                  type: number
                  description: >-
                    The maximum distance for proximity alerts about approaching
                    another chat member, in meters<br/>Must be between 1 and
                    100000 if specified.
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for a new inline keyboard.
              required:
                - latitude
                - longitude
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editMessageMedia:
    post:
      tags:
        - updating-messages
      summary: edit_message_media
      description: >-
        Use this method to edit animation, audio, document, photo, or video
        messages, or to add media to text messages<br/>If a message is part of a
        message album, then it can be edited only to an audio for audio albums,
        only to a document for document albums and to a photo or a video
        otherwise<br/>When an inline message is edited, a new file can&#39;t be
        uploaded; use a previously uploaded file via its file_id or specify a
        URL<br/>Note that business messages that were not sent by the bot and do
        not contain an inline keyboard can only be edited within 48 hours from
        the time they were sent.
      externalDocs:
        url: https://core.telegram.org/bots/api#editmessagemedia
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                media:
                  $ref: '#/components/schemas/InputMedia'
                  description: >-
                    A JSON-serialized object for a new media content of the
                    message
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message to edit
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for a new inline keyboard.
              required:
                - media
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editMessageReplyMarkup:
    post:
      tags:
        - updating-messages
      summary: edit_message_reply_markup
      description: >-
        Use this method to edit only the reply markup of messages<br/>Note that
        business messages that were not sent by the bot and do not contain an
        inline keyboard can only be edited within 48 hours from the time they
        were sent.
      externalDocs:
        url: https://core.telegram.org/bots/api#editmessagereplymarkup
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message to edit
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for an inline keyboard.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editMessageText:
    post:
      tags:
        - updating-messages
      summary: edit_message_text
      description: >-
        Use this method to edit text and game messages<br/>Note that business
        messages that were not sent by the bot and do not contain an inline
        keyboard can only be edited within 48 hours from the time they were
        sent.
      externalDocs:
        url: https://core.telegram.org/bots/api#editmessagetext
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: >-
                    New text of the message, 1-4096 characters after entities
                    parsing
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message to edit
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the message text<br/>See
                    formatting options for more details.
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    message text, which can be specified instead of parse_mode
                link_preview_options:
                  $ref: '#/components/schemas/LinkPreviewOptions'
                  description: Link preview generation options for the message
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for an inline keyboard.
              required:
                - text
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editStory:
    post:
      tags:
        - updating-messages
      summary: edit_story
      description: >-
        Edits a story previously posted by the bot on behalf of a managed
        business account<br/>Requires the can_manage_stories business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#editstory
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                story_id:
                  type: number
                  description: Unique identifier of the story to edit
                content:
                  $ref: '#/components/schemas/InputStoryContent'
                  description: Content of the story
                caption:
                  type: string
                  description: >-
                    Caption of the story, 0-2048 characters after entities
                    parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the story caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                areas:
                  type: array
                  items:
                    $ref: '#/components/schemas/StoryArea'
                  description: >-
                    A JSON-serialized list of clickable areas to be shown on the
                    story
              required:
                - business_connection_id
                - story_id
                - content
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
              example: Story
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /editUserStarSubscription:
    post:
      tags:
        - payments
      summary: edit_user_star_subscription
      description: >-
        Allows the bot to cancel or re-enable extension of a subscription paid
        in Telegram Stars
      externalDocs:
        url: https://core.telegram.org/bots/api#edituserstarsubscription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Identifier of the user whose subscription will be edited
                telegram_payment_charge_id:
                  type: string
                  description: Telegram payment identifier for the subscription
                is_canceled:
                  type: boolean
                  description: >-
                    Pass True to cancel extension of the user subscription; the
                    subscription must be active up to the end of the current
                    subscription period<br/>Pass False to allow the user to
                    re-enable a subscription that was previously canceled by the
                    bot.
              required:
                - user_id
                - telegram_payment_charge_id
                - is_canceled
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /exportChatInviteLink:
    post:
      tags:
        - available-methods
      summary: export_chat_invite_link
      description: >-
        Use this method to generate a new primary invite link for a chat; any
        previously generated primary link is revoked<br/>The bot must be an
        administrator in the chat for this to work and must have the appropriate
        administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#exportchatinvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
              example: string
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /forwardMessage:
    post:
      tags:
        - available-methods
      summary: forward_message
      description: >-
        Use this method to forward messages of any kind<br/>Service messages and
        messages with protected content can&#39;t be forwarded
      externalDocs:
        url: https://core.telegram.org/bots/api#forwardmessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                from_chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the chat where the original message
                    was sent (or channel username in the format
                    @channelusername)
                message_id:
                  type: number
                  description: Message identifier in the chat specified in from_chat_id
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                video_start_timestamp:
                  type: number
                  description: New start timestamp for the forwarded video in the message
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the forwarded message from
                    forwarding and saving
              required:
                - chat_id
                - from_chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /forwardMessages:
    post:
      tags:
        - available-methods
      summary: forward_messages
      description: >-
        Use this method to forward multiple messages of any kind<br/>If some of
        the specified messages can&#39;t be found or forwarded, they are
        skipped<br/>Service messages and messages with protected content
        can&#39;t be forwarded<br/>Album grouping is kept for forwarded messages
      externalDocs:
        url: https://core.telegram.org/bots/api#forwardmessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                from_chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the chat where the original messages
                    were sent (or channel username in the format
                    @channelusername)
                message_ids:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized list of 1-100 identifiers of messages in
                    the chat from_chat_id to forward<br/>The identifiers must be
                    specified in a strictly increasing order.
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the messages silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the forwarded messages from
                    forwarding and saving
              required:
                - chat_id
                - from_chat_id
                - message_ids
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageId'
              example: MessageId[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getAvailableGifts:
    post:
      tags:
        - updating-messages
      summary: get_available_gifts
      description: >-
        Returns the list of gifts that can be sent by the bot to users and
        channel chats<br/>Requires no parameters
      externalDocs:
        url: https://core.telegram.org/bots/api#getavailablegifts
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gifts'
              example: Gifts
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getBusinessAccountGifts:
    post:
      tags:
        - updating-messages
      summary: get_business_account_gifts
      description: >-
        Returns the gifts received and owned by a managed business
        account<br/>Requires the can_view_gifts_and_stars business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#getbusinessaccountgifts
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                exclude_unsaved:
                  type: boolean
                  description: >-
                    Pass True to exclude gifts that aren&#39;t saved to the
                    account&#39;s profile page
                exclude_saved:
                  type: boolean
                  description: >-
                    Pass True to exclude gifts that are saved to the
                    account&#39;s profile page
                exclude_unlimited:
                  type: boolean
                  description: >-
                    Pass True to exclude gifts that can be purchased an
                    unlimited number of times
                exclude_limited:
                  type: boolean
                  description: >-
                    Pass True to exclude gifts that can be purchased a limited
                    number of times
                exclude_unique:
                  type: boolean
                  description: Pass True to exclude unique gifts
                sort_by_price:
                  type: boolean
                  description: >-
                    Pass True to sort results by gift price instead of send
                    date<br/>Sorting is applied before pagination.
                offset:
                  type: string
                  description: >-
                    Offset of the first entry to return as received from the
                    previous request; use empty string to get the first chunk of
                    results
                limit:
                  type: number
                  description: >-
                    The maximum number of gifts to be returned;
                    1-100<br/>Defaults to 100
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedGifts'
              example: OwnedGifts
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getBusinessAccountStarBalance:
    post:
      tags:
        - updating-messages
      summary: get_business_account_star_balance
      description: >-
        Returns the amount of Telegram Stars owned by a managed business
        account<br/>Requires the can_view_gifts_and_stars business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#getbusinessaccountstarbalance
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StarAmount'
              example: StarAmount
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getBusinessConnection:
    post:
      tags:
        - available-methods
      summary: get_business_connection
      description: >-
        Use this method to get information about the connection of the bot with
        a business account
      externalDocs:
        url: https://core.telegram.org/bots/api#getbusinessconnection
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessConnection'
              example: BusinessConnection
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getChat:
    post:
      tags:
        - available-methods
      summary: get_chat
      description: Use this method to get up-to-date information about the chat
      externalDocs:
        url: https://core.telegram.org/bots/api#getchat
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup or channel (in the format
                    @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullInfo'
              example: ChatFullInfo
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getChatAdministrators:
    post:
      tags:
        - available-methods
      summary: get_chat_administrators
      description: >-
        Use this method to get a list of administrators in a chat, which
        aren&#39;t bots
      externalDocs:
        url: https://core.telegram.org/bots/api#getchatadministrators
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup or channel (in the format
                    @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMember'
              example: ChatMember[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getChatMember:
    post:
      tags:
        - available-methods
      summary: get_chat_member
      description: >-
        Use this method to get information about a member of a chat<br/>The
        method is only guaranteed to work for other users if the bot is an
        administrator in the chat
      externalDocs:
        url: https://core.telegram.org/bots/api#getchatmember
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup or channel (in the format
                    @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
              example: ChatMember
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getChatMemberCount:
    post:
      tags:
        - available-methods
      summary: get_chat_member_count
      description: Use this method to get the number of members in a chat
      externalDocs:
        url: https://core.telegram.org/bots/api#getchatmembercount
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup or channel (in the format
                    @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: number
              example: number
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getChatMenuButton:
    post:
      tags:
        - available-methods
      summary: get_chat_menu_button
      description: >-
        Use this method to get the current value of the bot&#39;s menu button in
        a private chat, or the default menu button
      externalDocs:
        url: https://core.telegram.org/bots/api#getchatmenubutton
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: number
                  description: >-
                    Unique identifier for the target private chat<br/>If not
                    specified, default bot&#39;s menu button will be returned
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuButton'
              example: MenuButton
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getCustomEmojiStickers:
    post:
      tags:
        - stickers
      summary: get_custom_emoji_stickers
      description: >-
        Use this method to get information about custom emoji stickers by their
        identifiers
      externalDocs:
        url: https://core.telegram.org/bots/api#getcustomemojistickers
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                custom_emoji_ids:
                  type: array
                  items:
                    type: string
                  description: >-
                    A JSON-serialized list of custom emoji identifiers<br/>At
                    most 200 custom emoji identifiers can be specified.
              required:
                - custom_emoji_ids
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sticker'
              example: Sticker[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getFile:
    post:
      tags:
        - available-methods
      summary: get_file
      description: >-
        Use this method to get basic information about a file and prepare it for
        downloading<br/>For the moment, bots can download files of up to 20MB in
        size<br/>The file can then be downloaded via the link
        https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;, where
        &lt;file_path&gt; is taken from the response<br/>It is guaranteed that
        the link will be valid for at least 1 hour<br/>When the link expires, a
        new one can be requested by calling getFile again.
      externalDocs:
        url: https://core.telegram.org/bots/api#getfile
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_id:
                  type: string
                  description: File identifier to get information about
              required:
                - file_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
              example: File
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getForumTopicIconStickers:
    post:
      tags:
        - available-methods
      summary: get_forum_topic_icon_stickers
      description: >-
        Use this method to get custom emoji stickers, which can be used as a
        forum topic icon by any user<br/>Requires no parameters
      externalDocs:
        url: https://core.telegram.org/bots/api#getforumtopiciconstickers
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sticker'
              example: Sticker[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getGameHighScores:
    post:
      tags:
        - games
      summary: get_game_high_scores
      description: >
        Use this method to get data for high score tables<br/>Will return the
        score of the specified user and several of their neighbors in a
        game<br/>

        This method will currently return scores for the target user, plus two
        of their closest neighbors on each side<br/>Will also return the top
        three users if the user and their neighbors are not among
        them<br/>Please note that this behavior is subject to change.
      externalDocs:
        url: https://core.telegram.org/bots/api#getgamehighscores
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Target user id
                chat_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the sent message
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
              required:
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameHighScore'
              example: GameHighScore[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMe:
    post:
      tags:
        - available-methods
      summary: get_me
      description: >-
        A simple method for testing your bot&#39;s authentication
        token<br/>Requires no parameters
      externalDocs:
        url: https://core.telegram.org/bots/api#getme
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: User
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMyCommands:
    post:
      tags:
        - available-methods
      summary: get_my_commands
      description: >-
        Use this method to get the current list of the bot&#39;s commands for
        the given scope and user language<br/>If commands aren&#39;t set, an
        empty list is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api#getmycommands
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  $ref: '#/components/schemas/BotCommandScope'
                  description: >-
                    A JSON-serialized object, describing scope of
                    users<br/>Defaults to BotCommandScopeDefault.
                language_code:
                  type: string
                  description: A two-letter ISO 639-1 language code or an empty string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BotCommand'
              example: BotCommand[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMyDefaultAdministratorRights:
    post:
      tags:
        - available-methods
      summary: get_my_default_administrator_rights
      description: >-
        Use this method to get the current default administrator rights of the
        bot
      externalDocs:
        url: https://core.telegram.org/bots/api#getmydefaultadministratorrights
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                for_channels:
                  type: boolean
                  description: >-
                    Pass True to get default administrator rights of the bot in
                    channels<br/>Otherwise, default administrator rights of the
                    bot for groups and supergroups will be returned.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatAdministratorRights'
              example: ChatAdministratorRights
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMyDescription:
    post:
      tags:
        - available-methods
      summary: get_my_description
      description: >-
        Use this method to get the current bot description for the given user
        language
      externalDocs:
        url: https://core.telegram.org/bots/api#getmydescription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language_code:
                  type: string
                  description: A two-letter ISO 639-1 language code or an empty string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDescription'
              example: BotDescription
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMyName:
    post:
      tags:
        - available-methods
      summary: get_my_name
      description: Use this method to get the current bot name for the given user language
      externalDocs:
        url: https://core.telegram.org/bots/api#getmyname
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language_code:
                  type: string
                  description: A two-letter ISO 639-1 language code or an empty string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotName'
              example: BotName
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getMyShortDescription:
    post:
      tags:
        - available-methods
      summary: get_my_short_description
      description: >-
        Use this method to get the current bot short description for the given
        user language
      externalDocs:
        url: https://core.telegram.org/bots/api#getmyshortdescription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language_code:
                  type: string
                  description: A two-letter ISO 639-1 language code or an empty string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotShortDescription'
              example: BotShortDescription
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getStarTransactions:
    post:
      tags:
        - payments
      summary: get_star_transactions
      description: Returns the bot&#39;s Telegram Star transactions in chronological order
      externalDocs:
        url: https://core.telegram.org/bots/api#getstartransactions
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  type: number
                  description: Number of transactions to skip in the response
                limit:
                  type: number
                  description: >-
                    The maximum number of transactions to be
                    retrieved<br/>Values between 1-100 are accepted<br/>Defaults
                    to 100.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StarTransactions'
              example: StarTransactions
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getStickerSet:
    post:
      tags:
        - stickers
      summary: get_sticker_set
      description: Use this method to get a sticker set
      externalDocs:
        url: https://core.telegram.org/bots/api#getstickerset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the sticker set
              required:
                - name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StickerSet'
              example: StickerSet
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getUpdates:
    post:
      tags:
        - getting-updates
      summary: get_updates
      description: Use this method to receive incoming updates using long polling (wiki)
      externalDocs:
        url: https://core.telegram.org/bots/api#getupdates
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  type: number
                  description: >-
                    Identifier of the first update to be returned<br/>Must be
                    greater by one than the highest among the identifiers of
                    previously received updates<br/>By default, updates starting
                    with the earliest unconfirmed update are returned<br/>An
                    update is considered confirmed as soon as getUpdates is
                    called with an offset higher than its update_id<br/>The
                    negative offset can be specified to retrieve updates
                    starting from -offset update from the end of the updates
                    queue<br/>All previous updates will be forgotten.
                limit:
                  type: number
                  description: >-
                    Limits the number of updates to be retrieved<br/>Values
                    between 1-100 are accepted<br/>Defaults to 100.
                timeout:
                  type: number
                  description: >-
                    Timeout in seconds for long polling<br/>Defaults to 0,
                    i.e<br/>usual short polling<br/>Should be positive, short
                    polling should be used for testing purposes only.
                allowed_updates:
                  type: array
                  items:
                    type: string
                  description: >-
                    A JSON-serialized list of the update types you want your bot
                    to receive<br/>For example, specify ["message",
                    "edited_channel_post", "callback_query"] to only receive
                    updates of these types<br/>See Update for a complete list of
                    available update types<br/>Specify an empty list to receive
                    all update types except chat_member, message_reaction, and
                    message_reaction_count (default)<br/>If not specified, the
                    previous setting will be used<br/>.<br/>Please note that
                    this parameter doesn&#39;t affect updates created before the
                    call to getUpdates, so unwanted updates may be received for
                    a short period of time.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Update'
              example: Update[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getUserChatBoosts:
    post:
      tags:
        - available-methods
      summary: get_user_chat_boosts
      description: >-
        Use this method to get the list of boosts added to a chat by a
        user<br/>Requires administrator rights in the chat
      externalDocs:
        url: https://core.telegram.org/bots/api#getuserchatboosts
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the chat or username of the channel
                    (in the format @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChatBoosts'
              example: UserChatBoosts
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getUserProfilePhotos:
    post:
      tags:
        - available-methods
      summary: get_user_profile_photos
      description: Use this method to get a list of profile pictures for a user
      externalDocs:
        url: https://core.telegram.org/bots/api#getuserprofilephotos
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Unique identifier of the target user
                offset:
                  type: number
                  description: >-
                    Sequential number of the first photo to be returned<br/>By
                    default, all photos are returned.
                limit:
                  type: number
                  description: >-
                    Limits the number of photos to be retrieved<br/>Values
                    between 1-100 are accepted<br/>Defaults to 100.
              required:
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfilePhotos'
              example: UserProfilePhotos
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /getWebhookInfo:
    post:
      tags:
        - getting-updates
      summary: get_webhook_info
      description: >-
        Use this method to get current webhook status<br/>Requires no
        parameters<br/>If the bot is using getUpdates, will return an object
        with the url field empty.
      externalDocs:
        url: https://core.telegram.org/bots/api#getwebhookinfo
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
              example: WebhookInfo
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /giftPremiumSubscription:
    post:
      tags:
        - updating-messages
      summary: gift_premium_subscription
      description: Gifts a Telegram Premium subscription to the given user
      externalDocs:
        url: https://core.telegram.org/bots/api#giftpremiumsubscription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: >-
                    Unique identifier of the target user who will receive a
                    Telegram Premium subscription
                month_count:
                  type: number
                  description: >-
                    Number of months the Telegram Premium subscription will be
                    active for the user; must be one of 3, 6, or 12
                star_count:
                  type: number
                  description: >-
                    Number of Telegram Stars to pay for the Telegram Premium
                    subscription; must be 1000 for 3 months, 1500 for 6 months,
                    and 2500 for 12 months
                text:
                  type: string
                  description: >-
                    Text that will be shown along with the service message about
                    the subscription; 0-128 characters
                text_parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the text<br/>See formatting
                    options for more details<br/>Entities other than “bold”,
                    “italic”, “underline”, “strikethrough”, “spoiler”, and
                    “custom_emoji” are ignored.
                text_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the gift text<br/>It can be specified instead of
                    text_parse_mode<br/>Entities other than “bold”, “italic”,
                    “underline”, “strikethrough”, “spoiler”, and “custom_emoji”
                    are ignored.
              required:
                - user_id
                - month_count
                - star_count
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /hideGeneralForumTopic:
    post:
      tags:
        - available-methods
      summary: hide_general_forum_topic
      description: >-
        Use this method to hide the &#39;General&#39; topic in a forum
        supergroup chat<br/>The bot must be an administrator in the chat for
        this to work and must have the can_manage_topics administrator
        rights<br/>The topic will be automatically closed if it was open
      externalDocs:
        url: https://core.telegram.org/bots/api#hidegeneralforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /leaveChat:
    post:
      tags:
        - available-methods
      summary: leave_chat
      description: Use this method for your bot to leave a group, supergroup or channel
      externalDocs:
        url: https://core.telegram.org/bots/api#leavechat
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup or channel (in the format
                    @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /logOut:
    post:
      tags:
        - available-methods
      summary: log_out
      description: >-
        Use this method to log out from the cloud Bot API server before
        launching the bot locally<br/>You must log out the bot before running it
        locally, otherwise there is no guarantee that the bot will receive
        updates<br/>After a successful call, you can immediately log in on a
        local server, but will not be able to log in back to the cloud Bot API
        server for 10 minutes<br/>Requires no parameters.
      externalDocs:
        url: https://core.telegram.org/bots/api#logout
        description: telegram documentation
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /pinChatMessage:
    post:
      tags:
        - available-methods
      summary: pin_chat_message
      description: >-
        Use this method to add a message to the list of pinned messages in a
        chat<br/>If the chat is not a private chat, the bot must be an
        administrator in the chat for this to work and must have the
        &#39;can_pin_messages&#39; administrator right in a supergroup or
        &#39;can_edit_messages&#39; administrator right in a channel
      externalDocs:
        url: https://core.telegram.org/bots/api#pinchatmessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                message_id:
                  type: number
                  description: Identifier of a message to pin
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be pinned
                disable_notification:
                  type: boolean
                  description: >-
                    Pass True if it is not necessary to send a notification to
                    all chat members about the new pinned
                    message<br/>Notifications are always disabled in channels
                    and private chats.
              required:
                - chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /postStory:
    post:
      tags:
        - updating-messages
      summary: post_story
      description: >-
        Posts a story on behalf of a managed business account<br/>Requires the
        can_manage_stories business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#poststory
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                content:
                  $ref: '#/components/schemas/InputStoryContent'
                  description: Content of the story
                active_period:
                  type: number
                  description: >-
                    Period after which the story is moved to the archive, in
                    seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 *
                    86400
                caption:
                  type: string
                  description: >-
                    Caption of the story, 0-2048 characters after entities
                    parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the story caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                areas:
                  type: array
                  items:
                    $ref: '#/components/schemas/StoryArea'
                  description: >-
                    A JSON-serialized list of clickable areas to be shown on the
                    story
                post_to_chat_page:
                  type: boolean
                  description: Pass True to keep the story accessible after it expires
                protect_content:
                  type: boolean
                  description: >-
                    Pass True if the content of the story must be protected from
                    forwarding and screenshotting
              required:
                - business_connection_id
                - content
                - active_period
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
              example: Story
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /promoteChatMember:
    post:
      tags:
        - available-methods
      summary: promote_chat_member
      description: >-
        Use this method to promote or demote a user in a supergroup or a
        channel<br/>The bot must be an administrator in the chat for this to
        work and must have the appropriate administrator rights<br/>Pass False
        for all boolean parameters to demote a user
      externalDocs:
        url: https://core.telegram.org/bots/api#promotechatmember
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
                is_anonymous:
                  type: boolean
                  description: >-
                    Pass True if the administrator&#39;s presence in the chat is
                    hidden
                can_manage_chat:
                  type: boolean
                  description: >-
                    Pass True if the administrator can access the chat event
                    log, get boost list, see hidden supergroup and channel
                    members, report spam messages and ignore slow
                    mode<br/>Implied by any other administrator privilege.
                can_delete_messages:
                  type: boolean
                  description: >-
                    Pass True if the administrator can delete messages of other
                    users
                can_manage_video_chats:
                  type: boolean
                  description: Pass True if the administrator can manage video chats
                can_restrict_members:
                  type: boolean
                  description: >-
                    Pass True if the administrator can restrict, ban or unban
                    chat members, or access supergroup statistics
                can_promote_members:
                  type: boolean
                  description: >-
                    Pass True if the administrator can add new administrators
                    with a subset of their own privileges or demote
                    administrators that they have promoted, directly or
                    indirectly (promoted by administrators that were appointed
                    by him)
                can_change_info:
                  type: boolean
                  description: >-
                    Pass True if the administrator can change chat title, photo
                    and other settings
                can_invite_users:
                  type: boolean
                  description: >-
                    Pass True if the administrator can invite new users to the
                    chat
                can_post_stories:
                  type: boolean
                  description: Pass True if the administrator can post stories to the chat
                can_edit_stories:
                  type: boolean
                  description: >-
                    Pass True if the administrator can edit stories posted by
                    other users, post stories to the chat page, pin chat
                    stories, and access the chat&#39;s story archive
                can_delete_stories:
                  type: boolean
                  description: >-
                    Pass True if the administrator can delete stories posted by
                    other users
                can_post_messages:
                  type: boolean
                  description: >-
                    Pass True if the administrator can post messages in the
                    channel, or access channel statistics; for channels only
                can_edit_messages:
                  type: boolean
                  description: >-
                    Pass True if the administrator can edit messages of other
                    users and can pin messages; for channels only
                can_pin_messages:
                  type: boolean
                  description: >-
                    Pass True if the administrator can pin messages; for
                    supergroups only
                can_manage_topics:
                  type: boolean
                  description: >-
                    Pass True if the user is allowed to create, rename, close,
                    and reopen forum topics; for supergroups only
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /readBusinessMessage:
    post:
      tags:
        - updating-messages
      summary: read_business_message
      description: >-
        Marks incoming message as read on behalf of a business
        account<br/>Requires the can_read_messages business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#readbusinessmessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which to read the message
                chat_id:
                  type: number
                  description: >-
                    Unique identifier of the chat in which the message was
                    received<br/>The chat must have been active in the last 24
                    hours.
                message_id:
                  type: number
                  description: Unique identifier of the message to mark as read
              required:
                - business_connection_id
                - chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /refundStarPayment:
    post:
      tags:
        - payments
      summary: refund_star_payment
      description: Refunds a successful payment in Telegram Stars
      externalDocs:
        url: https://core.telegram.org/bots/api#refundstarpayment
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Identifier of the user whose payment will be refunded
                telegram_payment_charge_id:
                  type: string
                  description: Telegram payment identifier
              required:
                - user_id
                - telegram_payment_charge_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /removeBusinessAccountProfilePhoto:
    post:
      tags:
        - updating-messages
      summary: remove_business_account_profile_photo
      description: >-
        Removes the current profile photo of a managed business
        account<br/>Requires the can_edit_profile_photo business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#removebusinessaccountprofilephoto
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                is_public:
                  type: boolean
                  description: >-
                    Pass True to remove the public photo, which is visible even
                    if the main photo is hidden by the business account&#39;s
                    privacy settings<br/>After the main photo is removed, the
                    previous profile photo (if present) becomes the main photo.
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /removeChatVerification:
    post:
      tags:
        - updating-messages
      summary: remove_chat_verification
      description: >-
        Removes verification from a chat that is currently verified on behalf of
        the organization represented by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#removechatverification
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /removeUserVerification:
    post:
      tags:
        - updating-messages
      summary: remove_user_verification
      description: >-
        Removes verification from a user who is currently verified on behalf of
        the organization represented by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#removeuserverification
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Unique identifier of the target user
              required:
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /reopenForumTopic:
    post:
      tags:
        - available-methods
      summary: reopen_forum_topic
      description: >-
        Use this method to reopen a closed topic in a forum supergroup
        chat<br/>The bot must be an administrator in the chat for this to work
        and must have the can_manage_topics administrator rights, unless it is
        the creator of the topic
      externalDocs:
        url: https://core.telegram.org/bots/api#reopenforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread of the forum
                    topic
              required:
                - chat_id
                - message_thread_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /reopenGeneralForumTopic:
    post:
      tags:
        - available-methods
      summary: reopen_general_forum_topic
      description: >-
        Use this method to reopen a closed &#39;General&#39; topic in a forum
        supergroup chat<br/>The bot must be an administrator in the chat for
        this to work and must have the can_manage_topics administrator
        rights<br/>The topic will be automatically unhidden if it was hidden
      externalDocs:
        url: https://core.telegram.org/bots/api#reopengeneralforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /replaceStickerInSet:
    post:
      tags:
        - stickers
      summary: replace_sticker_in_set
      description: >-
        Use this method to replace an existing sticker in a sticker set with a
        new one<br/>The method is equivalent to calling deleteStickerFromSet,
        then addStickerToSet, then setStickerPositionInSet
      externalDocs:
        url: https://core.telegram.org/bots/api#replacestickerinset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier of the sticker set owner
                name:
                  type: string
                  description: Sticker set name
                old_sticker:
                  type: string
                  description: File identifier of the replaced sticker
                sticker:
                  $ref: '#/components/schemas/InputSticker'
                  description: >-
                    A JSON-serialized object with information about the added
                    sticker<br/>If exactly the same sticker had already been
                    added to the set, then the set remains unchanged.
              required:
                - user_id
                - name
                - old_sticker
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /restrictChatMember:
    post:
      tags:
        - available-methods
      summary: restrict_chat_member
      description: >-
        Use this method to restrict a user in a supergroup<br/>The bot must be
        an administrator in the supergroup for this to work and must have the
        appropriate administrator rights<br/>Pass True for all permissions to
        lift restrictions from a user
      externalDocs:
        url: https://core.telegram.org/bots/api#restrictchatmember
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
                permissions:
                  $ref: '#/components/schemas/ChatPermissions'
                  description: A JSON-serialized object for new user permissions
                use_independent_chat_permissions:
                  type: boolean
                  description: >-
                    Pass True if chat permissions are set
                    independently<br/>Otherwise, the can_send_other_messages and
                    can_add_web_page_previews permissions will imply the
                    can_send_messages, can_send_audios, can_send_documents,
                    can_send_photos, can_send_videos, can_send_video_notes, and
                    can_send_voice_notes permissions; the can_send_polls
                    permission will imply the can_send_messages permission.
                until_date:
                  type: number
                  description: >-
                    Date when restrictions will be lifted for the user; Unix
                    time<br/>If user is restricted for more than 366 days or
                    less than 30 seconds from the current time, they are
                    considered to be restricted forever
              required:
                - chat_id
                - user_id
                - permissions
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /revokeChatInviteLink:
    post:
      tags:
        - available-methods
      summary: revoke_chat_invite_link
      description: >-
        Use this method to revoke an invite link created by the bot<br/>If the
        primary link is revoked, a new link is automatically generated<br/>The
        bot must be an administrator in the chat for this to work and must have
        the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#revokechatinvitelink
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier of the target chat or username of the
                    target channel (in the format @channelusername)
                invite_link:
                  type: string
                  description: The invite link to revoke
              required:
                - chat_id
                - invite_link
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInviteLink'
              example: ChatInviteLink
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /savePreparedInlineMessage:
    post:
      tags:
        - inline-mode
      summary: save_prepared_inline_message
      description: Stores a message that can be sent by a user of a Mini App
      externalDocs:
        url: https://core.telegram.org/bots/api#savepreparedinlinemessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: >-
                    Unique identifier of the target user that can use the
                    prepared message
                result:
                  $ref: '#/components/schemas/InlineQueryResult'
                  description: A JSON-serialized object describing the message to be sent
                allow_user_chats:
                  type: boolean
                  description: >-
                    Pass True if the message can be sent to private chats with
                    users
                allow_bot_chats:
                  type: boolean
                  description: >-
                    Pass True if the message can be sent to private chats with
                    bots
                allow_group_chats:
                  type: boolean
                  description: >-
                    Pass True if the message can be sent to group and supergroup
                    chats
                allow_channel_chats:
                  type: boolean
                  description: Pass True if the message can be sent to channel chats
              required:
                - user_id
                - result
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparedInlineMessage'
              example: PreparedInlineMessage
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendAnimation:
    post:
      tags:
        - available-methods
      summary: send_animation
      description: >-
        Use this method to send animation files (GIF or H.264/MPEG-4 AVC video
        without sound)<br/>Bots can currently send animation files of up to 50
        MB in size, this limit may be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendanimation
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                animation:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Animation to send<br/>Pass a file_id as String to send an
                    animation that exists on the Telegram servers (recommended),
                    pass an HTTP URL as a String for Telegram to get an
                    animation from the Internet, or upload a new animation using
                    multipart/form-data<br/>More information on Sending Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                duration:
                  type: number
                  description: Duration of sent animation in seconds
                width:
                  type: number
                  description: Animation width
                height:
                  type: number
                  description: Animation height
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Thumbnail of the file sent; can be ignored if thumbnail
                    generation for the file is supported server-side<br/>The
                    thumbnail should be in JPEG format and less than 200 kB in
                    size<br/>A thumbnail&#39;s width and height should not
                    exceed 320<br/>Ignored if the file is not uploaded using
                    multipart/form-data<br/>Thumbnails can&#39;t be reused and
                    can be only uploaded as a new file, so you can pass
                    “attach://&lt;file_attach_name&gt;” if the thumbnail was
                    uploaded using multipart/form-data under
                    &lt;file_attach_name&gt;<br/>More information on Sending
                    Files »
                caption:
                  type: string
                  description: >-
                    Animation caption (may also be used when resending animation
                    by file_id), 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the animation caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media
                has_spoiler:
                  type: boolean
                  description: >-
                    Pass True if the animation needs to be covered with a
                    spoiler animation
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - animation
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendAudio:
    post:
      tags:
        - available-methods
      summary: send_audio
      description: >-
        Use this method to send audio files, if you want Telegram clients to
        display them in the music player<br/>Your audio must be in the .MP3 or
        .M4A format<br/>Bots can currently send audio files of up to 50 MB in
        size, this limit may be changed in the future.<br/>For sending voice
        messages, use the sendVoice method instead.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendaudio
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                audio:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Audio file to send<br/>Pass a file_id as String to send an
                    audio file that exists on the Telegram servers
                    (recommended), pass an HTTP URL as a String for Telegram to
                    get an audio file from the Internet, or upload a new one
                    using multipart/form-data<br/>More information on Sending
                    Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                caption:
                  type: string
                  description: Audio caption, 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the audio caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                duration:
                  type: number
                  description: Duration of the audio in seconds
                performer:
                  type: string
                  description: Performer
                title:
                  type: string
                  description: Track name
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Thumbnail of the file sent; can be ignored if thumbnail
                    generation for the file is supported server-side<br/>The
                    thumbnail should be in JPEG format and less than 200 kB in
                    size<br/>A thumbnail&#39;s width and height should not
                    exceed 320<br/>Ignored if the file is not uploaded using
                    multipart/form-data<br/>Thumbnails can&#39;t be reused and
                    can be only uploaded as a new file, so you can pass
                    “attach://&lt;file_attach_name&gt;” if the thumbnail was
                    uploaded using multipart/form-data under
                    &lt;file_attach_name&gt;<br/>More information on Sending
                    Files »
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - audio
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendChatAction:
    post:
      tags:
        - available-methods
      summary: send_chat_action
      description: >-
        Use this method when you need to tell the user that something is
        happening on the bot&#39;s side<br/>The status is set for 5 seconds or
        less (when a message arrives from your bot, Telegram clients clear its
        typing status)<br/>

        Example: The ImageBot needs some time to process a request and upload
        the image<br/>Instead of sending a text message along the lines of
        “Retrieving image, please wait…”, the bot may use sendChatAction with
        action = upload_photo<br/>The user will see a “sending photo” status for
        the bot.

        <br/>We only recommend using this method when a response from the bot
        will take a noticeable amount of time to arrive.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendchataction
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                action:
                  type: string
                  description: >-
                    Type of action to broadcast<br/>Choose one, depending on
                    what the user is about to receive: typing for text messages,
                    upload_photo for photos, record_video or upload_video for
                    videos, record_voice or upload_voice for voice notes,
                    upload_document for general files, choose_sticker for
                    stickers, find_location for location data, record_video_note
                    or upload_video_note for video notes.
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the action will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread; for
                    supergroups only
              required:
                - chat_id
                - action
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendContact:
    post:
      tags:
        - available-methods
      summary: send_contact
      description: Use this method to send phone contacts
      externalDocs:
        url: https://core.telegram.org/bots/api#sendcontact
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                phone_number:
                  type: string
                  description: Contact&#39;s phone number
                first_name:
                  type: string
                  description: Contact&#39;s first name
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                last_name:
                  type: string
                  description: Contact&#39;s last name
                vcard:
                  type: string
                  description: >-
                    Additional data about the contact in the form of a vCard,
                    0-2048 bytes
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - phone_number
                - first_name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendDice:
    post:
      tags:
        - available-methods
      summary: send_dice
      description: >-
        Use this method to send an animated emoji that will display a random
        value
      externalDocs:
        url: https://core.telegram.org/bots/api#senddice
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                emoji:
                  type: string
                  enum:
                    - 🎲
                    - 🎯
                    - 🏀
                    - ⚽
                    - 🎳
                    - 🎰
                  description: >-
                    Emoji on which the dice throw animation is
                    based<br/>Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”,
                    “🎳”, or “🎰”<br/>Dice can have values 1-6 for “🎲”, “🎯”
                    and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for
                    “🎰”<br/>Defaults to “🎲”
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: Protects the contents of the sent message from forwarding
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendDocument:
    post:
      tags:
        - available-methods
      summary: send_document
      description: >-
        Use this method to send general files<br/>Bots can currently send files
        of any type of up to 50 MB in size, this limit may be changed in the
        future.
      externalDocs:
        url: https://core.telegram.org/bots/api#senddocument
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                document:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    File to send<br/>Pass a file_id as String to send a file
                    that exists on the Telegram servers (recommended), pass an
                    HTTP URL as a String for Telegram to get a file from the
                    Internet, or upload a new one using
                    multipart/form-data<br/>More information on Sending Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Thumbnail of the file sent; can be ignored if thumbnail
                    generation for the file is supported server-side<br/>The
                    thumbnail should be in JPEG format and less than 200 kB in
                    size<br/>A thumbnail&#39;s width and height should not
                    exceed 320<br/>Ignored if the file is not uploaded using
                    multipart/form-data<br/>Thumbnails can&#39;t be reused and
                    can be only uploaded as a new file, so you can pass
                    “attach://&lt;file_attach_name&gt;” if the thumbnail was
                    uploaded using multipart/form-data under
                    &lt;file_attach_name&gt;<br/>More information on Sending
                    Files »
                caption:
                  type: string
                  description: >-
                    Document caption (may also be used when resending documents
                    by file_id), 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the document caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                disable_content_type_detection:
                  type: boolean
                  description: >-
                    Disables automatic server-side content type detection for
                    files uploaded using multipart/form-data
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - document
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendGame:
    post:
      tags:
        - games
      summary: send_game
      description: Use this method to send a game
      externalDocs:
        url: https://core.telegram.org/bots/api#sendgame
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: number
                  description: Unique identifier for the target chat
                game_short_name:
                  type: string
                  description: >-
                    Short name of the game, serves as the unique identifier for
                    the game<br/>Set up your games via @BotFather.
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: >-
                    A JSON-serialized object for an inline keyboard<br/>If
                    empty, one &#39;Play game_title&#39; button will be
                    shown<br/>If not empty, the first button must launch the
                    game.
              required:
                - chat_id
                - game_short_name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendGift:
    post:
      tags:
        - updating-messages
      summary: send_gift
      description: >-
        Sends a gift to the given user or channel chat<br/>The gift can&#39;t be
        converted to Telegram Stars by the receiver
      externalDocs:
        url: https://core.telegram.org/bots/api#sendgift
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gift_id:
                  type: string
                  description: Identifier of the gift
                user_id:
                  type: number
                  description: >-
                    Required if chat_id is not specified<br/>Unique identifier
                    of the target user who will receive the gift.
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if user_id is not specified<br/>Unique identifier
                    for the chat or username of the channel (in the format
                    @channelusername) that will receive the gift.
                pay_for_upgrade:
                  type: boolean
                  description: >-
                    Pass True to pay for the gift upgrade from the bot&#39;s
                    balance, thereby making the upgrade free for the receiver
                text:
                  type: string
                  description: >-
                    Text that will be shown along with the gift; 0-128
                    characters
                text_parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the text<br/>See formatting
                    options for more details<br/>Entities other than “bold”,
                    “italic”, “underline”, “strikethrough”, “spoiler”, and
                    “custom_emoji” are ignored.
                text_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the gift text<br/>It can be specified instead of
                    text_parse_mode<br/>Entities other than “bold”, “italic”,
                    “underline”, “strikethrough”, “spoiler”, and “custom_emoji”
                    are ignored.
              required:
                - gift_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendInvoice:
    post:
      tags:
        - payments
      summary: send_invoice
      description: Use this method to send invoices
      externalDocs:
        url: https://core.telegram.org/bots/api#sendinvoice
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                title:
                  type: string
                  description: Product name, 1-32 characters
                description:
                  type: string
                  description: Product description, 1-255 characters
                payload:
                  type: string
                  description: >-
                    Bot-defined invoice payload, 1-128 bytes<br/>This will not
                    be displayed to the user, use it for your internal
                    processes.
                currency:
                  type: string
                  description: >-
                    Three-letter ISO 4217 currency code, see more on
                    currencies<br/>Pass “XTR” for payments in Telegram Stars.
                prices:
                  type: array
                  items:
                    $ref: '#/components/schemas/LabeledPrice'
                  description: >-
                    Price breakdown, a JSON-serialized list of components
                    (e.g<br/>product price, tax, discount, delivery cost,
                    delivery tax, bonus, etc.)<br/>Must contain exactly one item
                    for payments in Telegram Stars.
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                provider_token:
                  type: string
                  description: >-
                    Payment provider token, obtained via @BotFather<br/>Pass an
                    empty string for payments in Telegram Stars.
                max_tip_amount:
                  type: number
                  description: >-
                    The maximum accepted amount for tips in the smallest units
                    of the currency (integer, not float/double)<br/>For example,
                    for a maximum tip of US$ 1.45 pass max_tip_amount =
                    145<br/>See the exp parameter in currencies.json, it shows
                    the number of digits past the decimal point for each
                    currency (2 for the majority of currencies)<br/>Defaults to
                    0<br/>Not supported for payments in Telegram Stars.
                suggested_tip_amounts:
                  type: array
                  items:
                    type: number
                  description: >-
                    A JSON-serialized array of suggested amounts of tips in the
                    smallest units of the currency (integer, not
                    float/double)<br/>At most 4 suggested tip amounts can be
                    specified<br/>The suggested tip amounts must be positive,
                    passed in a strictly increased order and must not exceed
                    max_tip_amount.
                start_parameter:
                  type: string
                  description: >-
                    Unique deep-linking parameter<br/>If left empty, forwarded
                    copies of the sent message will have a Pay button, allowing
                    multiple users to pay directly from the forwarded message,
                    using the same invoice<br/>If non-empty, forwarded copies of
                    the sent message will have a URL button with a deep link to
                    the bot (instead of a Pay button), with the value used as
                    the start parameter
                provider_data:
                  type: string
                  description: >-
                    JSON-serialized data about the invoice, which will be shared
                    with the payment provider<br/>A detailed description of
                    required fields should be provided by the payment provider.
                photo_url:
                  type: string
                  description: >-
                    URL of the product photo for the invoice<br/>Can be a photo
                    of the goods or a marketing image for a service<br/>People
                    like it better when they see what they are paying for.
                photo_size:
                  type: number
                  description: Photo size in bytes
                photo_width:
                  type: number
                  description: Photo width
                photo_height:
                  type: number
                  description: Photo height
                need_name:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s full name to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_phone_number:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s phone number to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_email:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s email address to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                need_shipping_address:
                  type: boolean
                  description: >-
                    Pass True if you require the user&#39;s shipping address to
                    complete the order<br/>Ignored for payments in Telegram
                    Stars.
                send_phone_number_to_provider:
                  type: boolean
                  description: >-
                    Pass True if the user&#39;s phone number should be sent to
                    the provider<br/>Ignored for payments in Telegram Stars.
                send_email_to_provider:
                  type: boolean
                  description: >-
                    Pass True if the user&#39;s email address should be sent to
                    the provider<br/>Ignored for payments in Telegram Stars.
                is_flexible:
                  type: boolean
                  description: >-
                    Pass True if the final price depends on the shipping
                    method<br/>Ignored for payments in Telegram Stars.
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: >-
                    A JSON-serialized object for an inline keyboard<br/>If
                    empty, one &#39;Pay total price&#39; button will be
                    shown<br/>If not empty, the first button must be a Pay
                    button.
              required:
                - chat_id
                - title
                - description
                - payload
                - currency
                - prices
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendLocation:
    post:
      tags:
        - available-methods
      summary: send_location
      description: Use this method to send point on the map
      externalDocs:
        url: https://core.telegram.org/bots/api#sendlocation
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                latitude:
                  type: number
                  description: Latitude of the location
                longitude:
                  type: number
                  description: Longitude of the location
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                horizontal_accuracy:
                  type: number
                  description: >-
                    The radius of uncertainty for the location, measured in
                    meters; 0-1500
                live_period:
                  type: number
                  description: >-
                    Period in seconds during which the location will be updated
                    (see Live Locations, should be between 60 and 86400, or
                    0x7FFFFFFF for live locations that can be edited
                    indefinitely.
                heading:
                  type: number
                  description: >-
                    For live locations, a direction in which the user is moving,
                    in degrees<br/>Must be between 1 and 360 if specified.
                proximity_alert_radius:
                  type: number
                  description: >-
                    For live locations, a maximum distance for proximity alerts
                    about approaching another chat member, in meters<br/>Must be
                    between 1 and 100000 if specified.
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - latitude
                - longitude
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendMediaGroup:
    post:
      tags:
        - available-methods
      summary: send_media_group
      description: >-
        Use this method to send a group of photos, videos, documents or audios
        as an album<br/>Documents and audio files can be only grouped in an
        album with messages of the same type<br/>On success, an array of
        Messages that were sent is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendmediagroup
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                media:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/InputMediaAudio'
                      - $ref: '#/components/schemas/InputMediaDocument'
                      - $ref: '#/components/schemas/InputMediaPhoto'
                      - $ref: '#/components/schemas/InputMediaVideo'
                  description: >-
                    A JSON-serialized array describing messages to be sent, must
                    include 2-10 items
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                disable_notification:
                  type: boolean
                  description: >-
                    Sends messages silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent messages from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
              required:
                - chat_id
                - media
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              example: Message[]
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendMessage:
    post:
      tags:
        - available-methods
      summary: send_message
      description: Use this method to send text messages
      externalDocs:
        url: https://core.telegram.org/bots/api#sendmessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                text:
                  type: string
                  description: >-
                    Text of the message to be sent, 1-4096 characters after
                    entities parsing
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the message text<br/>See
                    formatting options for more details.
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    message text, which can be specified instead of parse_mode
                link_preview_options:
                  $ref: '#/components/schemas/LinkPreviewOptions'
                  description: Link preview generation options for the message
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - text
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendPaidMedia:
    post:
      tags:
        - available-methods
      summary: send_paid_media
      description: Use this method to send paid media
      externalDocs:
        url: https://core.telegram.org/bots/api#sendpaidmedia
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)<br/>If the
                    chat is a channel, all Telegram Star proceeds from this
                    media will be credited to the chat&#39;s
                    balance<br/>Otherwise, they will be credited to the
                    bot&#39;s balance.
                star_count:
                  type: number
                  description: >-
                    The number of Telegram Stars that must be paid to buy access
                    to the media; 1-10000
                media:
                  type: array
                  items:
                    $ref: '#/components/schemas/InputPaidMedia'
                  description: >-
                    A JSON-serialized array describing the media to be sent; up
                    to 10 items
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                payload:
                  type: string
                  description: >-
                    Bot-defined paid media payload, 0-128 bytes<br/>This will
                    not be displayed to the user, use it for your internal
                    processes.
                caption:
                  type: string
                  description: Media caption, 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the media caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - star_count
                - media
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendPhoto:
    post:
      tags:
        - available-methods
      summary: send_photo
      description: Use this method to send photos
      externalDocs:
        url: https://core.telegram.org/bots/api#sendphoto
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                photo:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Photo to send<br/>Pass a file_id as String to send a photo
                    that exists on the Telegram servers (recommended), pass an
                    HTTP URL as a String for Telegram to get a photo from the
                    Internet, or upload a new photo using
                    multipart/form-data<br/>The photo must be at most 10 MB in
                    size<br/>The photo&#39;s width and height must not exceed
                    10000 in total<br/>Width and height ratio must be at most
                    20<br/>More information on Sending Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                caption:
                  type: string
                  description: >-
                    Photo caption (may also be used when resending photos by
                    file_id), 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the photo caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media
                has_spoiler:
                  type: boolean
                  description: >-
                    Pass True if the photo needs to be covered with a spoiler
                    animation
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - photo
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendPoll:
    post:
      tags:
        - available-methods
      summary: send_poll
      description: Use this method to send a native poll
      externalDocs:
        url: https://core.telegram.org/bots/api#sendpoll
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                question:
                  type: string
                  description: Poll question, 1-300 characters
                options:
                  type: array
                  items:
                    $ref: '#/components/schemas/InputPollOption'
                  description: A JSON-serialized list of 2-10 answer options
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                question_parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the question<br/>See formatting
                    options for more details<br/>Currently, only custom emoji
                    entities are allowed
                question_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the poll question<br/>It can be specified instead of
                    question_parse_mode
                is_anonymous:
                  type: boolean
                  description: True, if the poll needs to be anonymous, defaults to True
                type:
                  type: string
                  description: Poll type, “quiz” or “regular”, defaults to “regular”
                allows_multiple_answers:
                  type: boolean
                  description: >-
                    True, if the poll allows multiple answers, ignored for polls
                    in quiz mode, defaults to False
                correct_option_id:
                  type: number
                  description: >-
                    0-based identifier of the correct answer option, required
                    for polls in quiz mode
                explanation:
                  type: string
                  description: >-
                    Text that is shown when a user chooses an incorrect answer
                    or taps on the lamp icon in a quiz-style poll, 0-200
                    characters with at most 2 line feeds after entities parsing
                explanation_parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the explanation<br/>See
                    formatting options for more details.
                explanation_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the poll explanation<br/>It can be specified instead of
                    explanation_parse_mode
                open_period:
                  type: number
                  description: >-
                    Amount of time in seconds the poll will be active after
                    creation, 5-600<br/>Can&#39;t be used together with
                    close_date.
                close_date:
                  type: number
                  description: >-
                    Point in time (Unix timestamp) when the poll will be
                    automatically closed<br/>Must be at least 5 and no more than
                    600 seconds in the future<br/>Can&#39;t be used together
                    with open_period.
                is_closed:
                  type: boolean
                  description: >-
                    Pass True if the poll needs to be immediately
                    closed<br/>This can be useful for poll preview.
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - question
                - options
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendSticker:
    post:
      tags:
        - stickers
      summary: send_sticker
      description: >-
        Use this method to send static .WEBP, animated .TGS, or video .WEBM
        stickers
      externalDocs:
        url: https://core.telegram.org/bots/api#sendsticker
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                sticker:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Sticker to send<br/>Pass a file_id as String to send a file
                    that exists on the Telegram servers (recommended), pass an
                    HTTP URL as a String for Telegram to get a .WEBP sticker
                    from the Internet, or upload a new .WEBP, .TGS, or .WEBM
                    sticker using multipart/form-data<br/>More information on
                    Sending Files »<br/>Video and animated stickers can&#39;t be
                    sent via an HTTP URL.
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                emoji:
                  type: string
                  description: >-
                    Emoji associated with the sticker; only for just uploaded
                    stickers
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendVenue:
    post:
      tags:
        - available-methods
      summary: send_venue
      description: Use this method to send information about a venue
      externalDocs:
        url: https://core.telegram.org/bots/api#sendvenue
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                latitude:
                  type: number
                  description: Latitude of the venue
                longitude:
                  type: number
                  description: Longitude of the venue
                title:
                  type: string
                  description: Name of the venue
                address:
                  type: string
                  description: Address of the venue
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                foursquare_id:
                  type: string
                  description: Foursquare identifier of the venue
                foursquare_type:
                  type: string
                  description: >-
                    Foursquare type of the venue, if known<br/>(For example,
                    “arts_entertainment/default”, “arts_entertainment/aquarium”
                    or “food/icecream”.)
                google_place_id:
                  type: string
                  description: Google Places identifier of the venue
                google_place_type:
                  type: string
                  description: Google Places type of the venue<br/>(See supported types.)
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - latitude
                - longitude
                - title
                - address
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendVideo:
    post:
      tags:
        - available-methods
      summary: send_video
      description: >-
        Use this method to send video files, Telegram clients support MPEG4
        videos (other formats may be sent as Document)<br/>Bots can currently
        send video files of up to 50 MB in size, this limit may be changed in
        the future.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendvideo
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                video:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Video to send<br/>Pass a file_id as String to send a video
                    that exists on the Telegram servers (recommended), pass an
                    HTTP URL as a String for Telegram to get a video from the
                    Internet, or upload a new video using
                    multipart/form-data<br/>More information on Sending Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                duration:
                  type: number
                  description: Duration of sent video in seconds
                width:
                  type: number
                  description: Video width
                height:
                  type: number
                  description: Video height
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Thumbnail of the file sent; can be ignored if thumbnail
                    generation for the file is supported server-side<br/>The
                    thumbnail should be in JPEG format and less than 200 kB in
                    size<br/>A thumbnail&#39;s width and height should not
                    exceed 320<br/>Ignored if the file is not uploaded using
                    multipart/form-data<br/>Thumbnails can&#39;t be reused and
                    can be only uploaded as a new file, so you can pass
                    “attach://&lt;file_attach_name&gt;” if the thumbnail was
                    uploaded using multipart/form-data under
                    &lt;file_attach_name&gt;<br/>More information on Sending
                    Files »
                cover:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Cover for the video in the message<br/>Pass a file_id to
                    send a file that exists on the Telegram servers
                    (recommended), pass an HTTP URL for Telegram to get a file
                    from the Internet, or pass
                    “attach://&lt;file_attach_name&gt;” to upload a new one
                    using multipart/form-data under &lt;file_attach_name&gt;
                    name<br/>More information on Sending Files »
                start_timestamp:
                  type: number
                  description: Start timestamp for the video in the message
                caption:
                  type: string
                  description: >-
                    Video caption (may also be used when resending videos by
                    file_id), 0-1024 characters after entities parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the video caption<br/>See
                    formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                show_caption_above_media:
                  type: boolean
                  description: >-
                    Pass True, if the caption must be shown above the message
                    media
                has_spoiler:
                  type: boolean
                  description: >-
                    Pass True if the video needs to be covered with a spoiler
                    animation
                supports_streaming:
                  type: boolean
                  description: Pass True if the uploaded video is suitable for streaming
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - video
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendVideoNote:
    post:
      tags:
        - available-methods
      summary: send_video_note
      description: >-
        As of v.4.0, Telegram clients support rounded square MPEG4 videos of up
        to 1 minute long<br/>Use this method to send video messages
      externalDocs:
        url: https://core.telegram.org/bots/api#sendvideonote
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                video_note:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Video note to send<br/>Pass a file_id as String to send a
                    video note that exists on the Telegram servers (recommended)
                    or upload a new video using multipart/form-data<br/>More
                    information on Sending Files »<br/>Sending video notes by a
                    URL is currently unsupported
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                duration:
                  type: number
                  description: Duration of sent video in seconds
                length:
                  type: number
                  description: >-
                    Video width and height, i.e<br/>diameter of the video
                    message
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Thumbnail of the file sent; can be ignored if thumbnail
                    generation for the file is supported server-side<br/>The
                    thumbnail should be in JPEG format and less than 200 kB in
                    size<br/>A thumbnail&#39;s width and height should not
                    exceed 320<br/>Ignored if the file is not uploaded using
                    multipart/form-data<br/>Thumbnails can&#39;t be reused and
                    can be only uploaded as a new file, so you can pass
                    “attach://&lt;file_attach_name&gt;” if the thumbnail was
                    uploaded using multipart/form-data under
                    &lt;file_attach_name&gt;<br/>More information on Sending
                    Files »
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - video_note
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /sendVoice:
    post:
      tags:
        - available-methods
      summary: send_voice
      description: >-
        Use this method to send audio files, if you want Telegram clients to
        display the file as a playable voice message<br/>For this to work, your
        audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or
        in .M4A format (other formats may be sent as Audio or Document)<br/>Bots
        can currently send voice messages of up to 50 MB in size, this limit may
        be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api#sendvoice
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                voice:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    Audio file to send<br/>Pass a file_id as String to send a
                    file that exists on the Telegram servers (recommended), pass
                    an HTTP URL as a String for Telegram to get a file from the
                    Internet, or upload a new one using
                    multipart/form-data<br/>More information on Sending Files »
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be sent
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread (topic) of
                    the forum; for forum supergroups only
                caption:
                  type: string
                  description: >-
                    Voice message caption, 0-1024 characters after entities
                    parsing
                parse_mode:
                  oneOf:
                    - type: string
                      enum:
                        - HTML
                        - MarkdownV2
                  description: >-
                    Mode for parsing entities in the voice message
                    caption<br/>See formatting options for more details.
                caption_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageEntity'
                  description: >-
                    A JSON-serialized list of special entities that appear in
                    the caption, which can be specified instead of parse_mode
                duration:
                  type: number
                  description: Duration of the voice message in seconds
                disable_notification:
                  type: boolean
                  description: >-
                    Sends the message silently<br/>Users will receive a
                    notification with no sound.
                protect_content:
                  type: boolean
                  description: >-
                    Protects the contents of the sent message from forwarding
                    and saving
                allow_paid_broadcast:
                  type: boolean
                  description: >-
                    Pass True to allow up to 1000 messages per second, ignoring
                    broadcasting limits for a fee of 0.1 Telegram Stars per
                    message<br/>The relevant Stars will be withdrawn from the
                    bot&#39;s balance
                message_effect_id:
                  type: string
                  description: >-
                    Unique identifier of the message effect to be added to the
                    message; for private chats only
                reply_parameters:
                  $ref: '#/components/schemas/ReplyParameters'
                  description: Description of the message to reply to
                reply_markup:
                  oneOf:
                    - $ref: '#/components/schemas/InlineKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardMarkup'
                    - $ref: '#/components/schemas/ReplyKeyboardRemove'
                    - $ref: '#/components/schemas/ForceReply'
                  description: >-
                    Additional interface options<br/>A JSON-serialized object
                    for an inline keyboard, custom reply keyboard, instructions
                    to remove a reply keyboard or to force a reply from the user
              required:
                - chat_id
                - voice
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: Message
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setBusinessAccountBio:
    post:
      tags:
        - updating-messages
      summary: set_business_account_bio
      description: >-
        Changes the bio of a managed business account<br/>Requires the
        can_change_bio business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#setbusinessaccountbio
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                bio:
                  type: string
                  description: >-
                    The new value of the bio for the business account; 0-140
                    characters
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setBusinessAccountGiftSettings:
    post:
      tags:
        - updating-messages
      summary: set_business_account_gift_settings
      description: >-
        Changes the privacy settings pertaining to incoming gifts in a managed
        business account<br/>Requires the can_change_gift_settings business bot
        right
      externalDocs:
        url: https://core.telegram.org/bots/api#setbusinessaccountgiftsettings
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                show_gift_button:
                  type: boolean
                  description: >-
                    Pass True, if a button for sending a gift to the user or by
                    the business account must always be shown in the input field
                accepted_gift_types:
                  $ref: '#/components/schemas/AcceptedGiftTypes'
                  description: Types of gifts accepted by the business account
              required:
                - business_connection_id
                - show_gift_button
                - accepted_gift_types
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setBusinessAccountName:
    post:
      tags:
        - updating-messages
      summary: set_business_account_name
      description: >-
        Changes the first and last name of a managed business
        account<br/>Requires the can_change_name business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#setbusinessaccountname
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                first_name:
                  type: string
                  description: >-
                    The new value of the first name for the business account;
                    1-64 characters
                last_name:
                  type: string
                  description: >-
                    The new value of the last name for the business account;
                    0-64 characters
              required:
                - business_connection_id
                - first_name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setBusinessAccountProfilePhoto:
    post:
      tags:
        - updating-messages
      summary: set_business_account_profile_photo
      description: >-
        Changes the profile photo of a managed business account<br/>Requires the
        can_edit_profile_photo business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#setbusinessaccountprofilephoto
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                photo:
                  $ref: '#/components/schemas/InputProfilePhoto'
                  description: The new profile photo to set
                is_public:
                  type: boolean
                  description: >-
                    Pass True to set the public photo, which will be visible
                    even if the main photo is hidden by the business
                    account&#39;s privacy settings<br/>An account can have only
                    one public photo.
              required:
                - business_connection_id
                - photo
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setBusinessAccountUsername:
    post:
      tags:
        - updating-messages
      summary: set_business_account_username
      description: >-
        Changes the username of a managed business account<br/>Requires the
        can_change_username business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#setbusinessaccountusername
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                username:
                  type: string
                  description: >-
                    The new value of the username for the business account; 0-32
                    characters
              required:
                - business_connection_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatAdministratorCustomTitle:
    post:
      tags:
        - available-methods
      summary: set_chat_administrator_custom_title
      description: >-
        Use this method to set a custom title for an administrator in a
        supergroup promoted by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatadministratorcustomtitle
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
                custom_title:
                  type: string
                  description: >-
                    New custom title for the administrator; 0-16 characters,
                    emoji are not allowed
              required:
                - chat_id
                - user_id
                - custom_title
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatDescription:
    post:
      tags:
        - available-methods
      summary: set_chat_description
      description: >-
        Use this method to change the description of a group, a supergroup or a
        channel<br/>The bot must be an administrator in the chat for this to
        work and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatdescription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                description:
                  type: string
                  description: New chat description, 0-255 characters
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatMenuButton:
    post:
      tags:
        - available-methods
      summary: set_chat_menu_button
      description: >-
        Use this method to change the bot&#39;s menu button in a private chat,
        or the default menu button
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatmenubutton
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: number
                  description: >-
                    Unique identifier for the target private chat<br/>If not
                    specified, default bot&#39;s menu button will be changed
                menu_button:
                  $ref: '#/components/schemas/MenuButton'
                  description: >-
                    A JSON-serialized object for the bot&#39;s new menu
                    button<br/>Defaults to MenuButtonDefault
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatPermissions:
    post:
      tags:
        - available-methods
      summary: set_chat_permissions
      description: >-
        Use this method to set default chat permissions for all members<br/>The
        bot must be an administrator in the group or a supergroup for this to
        work and must have the can_restrict_members administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatpermissions
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                permissions:
                  $ref: '#/components/schemas/ChatPermissions'
                  description: A JSON-serialized object for new default chat permissions
                use_independent_chat_permissions:
                  type: boolean
                  description: >-
                    Pass True if chat permissions are set
                    independently<br/>Otherwise, the can_send_other_messages and
                    can_add_web_page_previews permissions will imply the
                    can_send_messages, can_send_audios, can_send_documents,
                    can_send_photos, can_send_videos, can_send_video_notes, and
                    can_send_voice_notes permissions; the can_send_polls
                    permission will imply the can_send_messages permission.
              required:
                - chat_id
                - permissions
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatPhoto:
    post:
      tags:
        - available-methods
      summary: set_chat_photo
      description: >-
        Use this method to set a new profile photo for the chat<br/>Photos
        can&#39;t be changed for private chats<br/>The bot must be an
        administrator in the chat for this to work and must have the appropriate
        administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatphoto
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                photo:
                  $ref: '#/components/schemas/InputFile'
                  description: New chat photo, uploaded using multipart/form-data
              required:
                - chat_id
                - photo
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatStickerSet:
    post:
      tags:
        - available-methods
      summary: set_chat_sticker_set
      description: >-
        Use this method to set a new group sticker set for a supergroup<br/>The
        bot must be an administrator in the chat for this to work and must have
        the appropriate administrator rights<br/>Use the field
        can_set_sticker_set optionally returned in getChat requests to check if
        the bot can use this method
      externalDocs:
        url: https://core.telegram.org/bots/api#setchatstickerset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                sticker_set_name:
                  type: string
                  description: Name of the sticker set to be set as the group sticker set
              required:
                - chat_id
                - sticker_set_name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setChatTitle:
    post:
      tags:
        - available-methods
      summary: set_chat_title
      description: >-
        Use this method to change the title of a chat<br/>Titles can&#39;t be
        changed for private chats<br/>The bot must be an administrator in the
        chat for this to work and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#setchattitle
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                title:
                  type: string
                  description: New chat title, 1-128 characters
              required:
                - chat_id
                - title
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setCustomEmojiStickerSetThumbnail:
    post:
      tags:
        - stickers
      summary: set_custom_emoji_sticker_set_thumbnail
      description: Use this method to set the thumbnail of a custom emoji sticker set
      externalDocs:
        url: https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Sticker set name
                custom_emoji_id:
                  type: string
                  description: >-
                    Custom emoji identifier of a sticker from the sticker set;
                    pass an empty string to drop the thumbnail and use the first
                    sticker as the thumbnail.
              required:
                - name
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setGameScore:
    post:
      tags:
        - games
      summary: set_game_score
      description: Use this method to set the score of the specified user in a game message
      externalDocs:
        url: https://core.telegram.org/bots/api#setgamescore
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier
                score:
                  type: number
                  description: New score, must be non-negative
                force:
                  type: boolean
                  description: >-
                    Pass True if the high score is allowed to decrease<br/>This
                    can be useful when fixing mistakes or banning cheaters
                disable_edit_message:
                  type: boolean
                  description: >-
                    Pass True if the game message should not be automatically
                    edited to include the current scoreboard
                chat_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the sent message
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
              required:
                - user_id
                - score
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMessageReaction:
    post:
      tags:
        - available-methods
      summary: set_message_reaction
      description: >-
        Use this method to change the chosen reactions on a message<br/>Service
        messages of some types can&#39;t be reacted to<br/>Automatically
        forwarded messages from a channel to its discussion group have the same
        available reactions as messages in the channel<br/>Bots can&#39;t use
        paid reactions
      externalDocs:
        url: https://core.telegram.org/bots/api#setmessagereaction
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Identifier of the target message<br/>If the message belongs
                    to a media group, the reaction is set to the first
                    non-deleted message in the group instead.
                reaction:
                  type: array
                  items:
                    $ref: '#/components/schemas/ReactionType'
                  description: >-
                    A JSON-serialized list of reaction types to set on the
                    message<br/>Currently, as non-premium users, bots can set up
                    to one reaction per message<br/>A custom emoji reaction can
                    be used if it is either already present on the message or
                    explicitly allowed by chat administrators<br/>Paid reactions
                    can&#39;t be used by bots.
                is_big:
                  type: boolean
                  description: Pass True to set the reaction with a big animation
              required:
                - chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMyCommands:
    post:
      tags:
        - available-methods
      summary: set_my_commands
      description: >-
        Use this method to change the list of the bot&#39;s commands<br/>See
        this manual for more details about bot commands
      externalDocs:
        url: https://core.telegram.org/bots/api#setmycommands
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commands:
                  type: array
                  items:
                    $ref: '#/components/schemas/BotCommand'
                  description: >-
                    A JSON-serialized list of bot commands to be set as the list
                    of the bot&#39;s commands<br/>At most 100 commands can be
                    specified.
                scope:
                  $ref: '#/components/schemas/BotCommandScope'
                  description: >-
                    A JSON-serialized object, describing scope of users for
                    which the commands are relevant<br/>Defaults to
                    BotCommandScopeDefault.
                language_code:
                  type: string
                  description: >-
                    A two-letter ISO 639-1 language code<br/>If empty, commands
                    will be applied to all users from the given scope, for whose
                    language there are no dedicated commands
              required:
                - commands
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMyDefaultAdministratorRights:
    post:
      tags:
        - available-methods
      summary: set_my_default_administrator_rights
      description: >-
        Use this method to change the default administrator rights requested by
        the bot when it&#39;s added as an administrator to groups or
        channels<br/>These rights will be suggested to users, but they are free
        to modify the list before adding the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setmydefaultadministratorrights
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rights:
                  $ref: '#/components/schemas/ChatAdministratorRights'
                  description: >-
                    A JSON-serialized object describing new default
                    administrator rights<br/>If not specified, the default
                    administrator rights will be cleared.
                for_channels:
                  type: boolean
                  description: >-
                    Pass True to change the default administrator rights of the
                    bot in channels<br/>Otherwise, the default administrator
                    rights of the bot for groups and supergroups will be
                    changed.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMyDescription:
    post:
      tags:
        - available-methods
      summary: set_my_description
      description: >-
        Use this method to change the bot&#39;s description, which is shown in
        the chat with the bot if the chat is empty
      externalDocs:
        url: https://core.telegram.org/bots/api#setmydescription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: >-
                    New bot description; 0-512 characters<br/>Pass an empty
                    string to remove the dedicated description for the given
                    language.
                language_code:
                  type: string
                  description: >-
                    A two-letter ISO 639-1 language code<br/>If empty, the
                    description will be applied to all users for whose language
                    there is no dedicated description.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMyName:
    post:
      tags:
        - available-methods
      summary: set_my_name
      description: Use this method to change the bot&#39;s name
      externalDocs:
        url: https://core.telegram.org/bots/api#setmyname
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >-
                    New bot name; 0-64 characters<br/>Pass an empty string to
                    remove the dedicated name for the given language.
                language_code:
                  type: string
                  description: >-
                    A two-letter ISO 639-1 language code<br/>If empty, the name
                    will be shown to all users for whose language there is no
                    dedicated name.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setMyShortDescription:
    post:
      tags:
        - available-methods
      summary: set_my_short_description
      description: >-
        Use this method to change the bot&#39;s short description, which is
        shown on the bot&#39;s profile page and is sent together with the link
        when users share the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setmyshortdescription
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                short_description:
                  type: string
                  description: >-
                    New short description for the bot; 0-120 characters<br/>Pass
                    an empty string to remove the dedicated short description
                    for the given language.
                language_code:
                  type: string
                  description: >-
                    A two-letter ISO 639-1 language code<br/>If empty, the short
                    description will be applied to all users for whose language
                    there is no dedicated short description.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setPassportDataErrors:
    post:
      tags:
        - telegram-passport
      summary: set_passport_data_errors
      description: >-
        Informs a user that some of the Telegram Passport elements they provided
        contains errors<br/>The user will not be able to re-submit their
        Passport to you until the errors are fixed (the contents of the field
        for which you returned the error must change)<br/>Use this if the data
        submitted by the user doesn&#39;t satisfy the standards your service
        requires for any reason<br/>For example, if a birthday date seems
        invalid, a submitted document is blurry, a scan shows evidence of
        tampering, etc<br/>Supply some details in the error message to make sure
        the user knows how to correct the issues.
      externalDocs:
        url: https://core.telegram.org/bots/api#setpassportdataerrors
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier
                errors:
                  type: array
                  items:
                    $ref: '#/components/schemas/PassportElementError'
                  description: A JSON-serialized array describing the errors
              required:
                - user_id
                - errors
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerEmojiList:
    post:
      tags:
        - stickers
      summary: set_sticker_emoji_list
      description: >-
        Use this method to change the list of emoji assigned to a regular or
        custom emoji sticker<br/>The sticker must belong to a sticker set
        created by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickeremojilist
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sticker:
                  type: string
                  description: File identifier of the sticker
                emoji_list:
                  type: array
                  items:
                    type: string
                  description: >-
                    A JSON-serialized list of 1-20 emoji associated with the
                    sticker
              required:
                - sticker
                - emoji_list
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerKeywords:
    post:
      tags:
        - stickers
      summary: set_sticker_keywords
      description: >-
        Use this method to change search keywords assigned to a regular or
        custom emoji sticker<br/>The sticker must belong to a sticker set
        created by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickerkeywords
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sticker:
                  type: string
                  description: File identifier of the sticker
                keywords:
                  type: array
                  items:
                    type: string
                  description: >-
                    A JSON-serialized list of 0-20 search keywords for the
                    sticker with total length of up to 64 characters
              required:
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerMaskPosition:
    post:
      tags:
        - stickers
      summary: set_sticker_mask_position
      description: >-
        Use this method to change the mask position of a mask sticker<br/>The
        sticker must belong to a sticker set that was created by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickermaskposition
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sticker:
                  type: string
                  description: File identifier of the sticker
                mask_position:
                  $ref: '#/components/schemas/MaskPosition'
                  description: >-
                    A JSON-serialized object with the position where the mask
                    should be placed on faces<br/>Omit the parameter to remove
                    the mask position.
              required:
                - sticker
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerPositionInSet:
    post:
      tags:
        - stickers
      summary: set_sticker_position_in_set
      description: >-
        Use this method to move a sticker in a set created by the bot to a
        specific position
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickerpositioninset
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sticker:
                  type: string
                  description: File identifier of the sticker
                position:
                  type: number
                  description: New sticker position in the set, zero-based
              required:
                - sticker
                - position
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerSetThumbnail:
    post:
      tags:
        - stickers
      summary: set_sticker_set_thumbnail
      description: >-
        Use this method to set the thumbnail of a regular or mask sticker
        set<br/>The format of the thumbnail file must match the format of the
        stickers in the set
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickersetthumbnail
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Sticker set name
                user_id:
                  type: number
                  description: User identifier of the sticker set owner
                format:
                  type: string
                  enum:
                    - static
                    - animated
                    - video
                  description: >-
                    Format of the thumbnail, must be one of “static” for a .WEBP
                    or .PNG image, “animated” for a .TGS animation, or “video”
                    for a .WEBM video
                thumbnail:
                  oneOf:
                    - $ref: '#/components/schemas/InputFile'
                    - type: string
                  description: >-
                    A .WEBP or .PNG image with the thumbnail, must be up to 128
                    kilobytes in size and have a width and height of exactly
                    100px, or a .TGS animation with a thumbnail up to 32
                    kilobytes in size (see
                    https://core.telegram.org/stickers#animation-requirements
                    for animated sticker technical requirements), or a .WEBM
                    video with the thumbnail up to 32 kilobytes in size; see
                    https://core.telegram.org/stickers#video-requirements for
                    video sticker technical requirements<br/>Pass a file_id as a
                    String to send a file that already exists on the Telegram
                    servers, pass an HTTP URL as a String for Telegram to get a
                    file from the Internet, or upload a new one using
                    multipart/form-data<br/>More information on Sending Files
                    »<br/>Animated and video sticker set thumbnails can&#39;t be
                    uploaded via HTTP URL<br/>If omitted, then the thumbnail is
                    dropped and the first sticker is used as the thumbnail.
              required:
                - name
                - user_id
                - format
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setStickerSetTitle:
    post:
      tags:
        - stickers
      summary: set_sticker_set_title
      description: Use this method to set the title of a created sticker set
      externalDocs:
        url: https://core.telegram.org/bots/api#setstickersettitle
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Sticker set name
                title:
                  type: string
                  description: Sticker set title, 1-64 characters
              required:
                - name
                - title
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setUserEmojiStatus:
    post:
      tags:
        - available-methods
      summary: set_user_emoji_status
      description: >-
        Changes the emoji status for a given user that previously allowed the
        bot to manage their emoji status via the Mini App method
        requestEmojiStatusAccess
      externalDocs:
        url: https://core.telegram.org/bots/api#setuseremojistatus
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Unique identifier of the target user
                emoji_status_custom_emoji_id:
                  type: string
                  description: >-
                    Custom emoji identifier of the emoji status to set<br/>Pass
                    an empty string to remove the status.
                emoji_status_expiration_date:
                  type: number
                  description: Expiration date of the emoji status, if any
              required:
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /setWebhook:
    post:
      tags:
        - getting-updates
      summary: set_webhook
      description: >-
        Use this method to specify a URL and receive incoming updates via an
        outgoing webhook<br/>Whenever there is an update for the bot, we will
        send an HTTPS POST request to the specified URL, containing a
        JSON-serialized Update<br/>In case of an unsuccessful request (a request
        with response HTTP status code different from 2XY), we will repeat the
        request and give up after a reasonable amount of attempts<br/>If
        you&#39;d like to make sure that the webhook was set by you, you can
        specify secret data in the parameter secret_token<br/>If specified, the
        request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the
        secret token as content.
      externalDocs:
        url: https://core.telegram.org/bots/api#setwebhook
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: >-
                    HTTPS URL to send updates to<br/>Use an empty string to
                    remove webhook integration
                certificate:
                  $ref: '#/components/schemas/InputFile'
                  description: >-
                    Upload your public key certificate so that the root
                    certificate in use can be checked<br/>See our self-signed
                    guide for details.
                ip_address:
                  type: string
                  description: >-
                    The fixed IP address which will be used to send webhook
                    requests instead of the IP address resolved through DNS
                max_connections:
                  type: number
                  description: >-
                    The maximum allowed number of simultaneous HTTPS connections
                    to the webhook for update delivery, 1-100<br/>Defaults to
                    40<br/>Use lower values to limit the load on your bot&#39;s
                    server, and higher values to increase your bot&#39;s
                    throughput.
                allowed_updates:
                  type: array
                  items:
                    type: string
                  description: >-
                    A JSON-serialized list of the update types you want your bot
                    to receive<br/>For example, specify ["message",
                    "edited_channel_post", "callback_query"] to only receive
                    updates of these types<br/>See Update for a complete list of
                    available update types<br/>Specify an empty list to receive
                    all update types except chat_member, message_reaction, and
                    message_reaction_count (default)<br/>If not specified, the
                    previous setting will be used<br/>.<br/>Please note that
                    this parameter doesn&#39;t affect updates created before the
                    call to the setWebhook, so unwanted updates may be received
                    for a short period of time.
                drop_pending_updates:
                  type: boolean
                  description: Pass True to drop all pending updates
                secret_token:
                  type: string
                  description: >-
                    A secret token to be sent in a header
                    “X-Telegram-Bot-Api-Secret-Token” in every webhook request,
                    1-256 characters<br/>Only characters A-Z, a-z, 0-9, _ and -
                    are allowed<br/>The header is useful to ensure that the
                    request comes from a webhook set by you.
              required:
                - url
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /stopMessageLiveLocation:
    post:
      tags:
        - updating-messages
      summary: stop_message_live_location
      description: >-
        Use this method to stop updating a live location message before
        live_period expires
      externalDocs:
        url: https://core.telegram.org/bots/api#stopmessagelivelocation
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Required if inline_message_id is not specified<br/>Unique
                    identifier for the target chat or username of the target
                    channel (in the format @channelusername)
                message_id:
                  type: number
                  description: >-
                    Required if inline_message_id is not
                    specified<br/>Identifier of the message with live location
                    to stop
                inline_message_id:
                  type: string
                  description: >-
                    Required if chat_id and message_id are not
                    specified<br/>Identifier of the inline message
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for a new inline keyboard.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Message'
                  - type: boolean
              example: Message | boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /stopPoll:
    post:
      tags:
        - updating-messages
      summary: stop_poll
      description: Use this method to stop a poll which was sent by the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#stoppoll
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                message_id:
                  type: number
                  description: Identifier of the original message with the poll
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message to be edited was sent
                reply_markup:
                  $ref: '#/components/schemas/InlineKeyboardMarkup'
                  description: A JSON-serialized object for a new message inline keyboard.
              required:
                - chat_id
                - message_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
              example: Poll
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /transferBusinessAccountStars:
    post:
      tags:
        - updating-messages
      summary: transfer_business_account_stars
      description: >-
        Transfers Telegram Stars from the business account balance to the
        bot&#39;s balance<br/>Requires the can_transfer_stars business bot right
      externalDocs:
        url: https://core.telegram.org/bots/api#transferbusinessaccountstars
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                star_count:
                  type: number
                  description: Number of Telegram Stars to transfer; 1-10000
              required:
                - business_connection_id
                - star_count
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /transferGift:
    post:
      tags:
        - updating-messages
      summary: transfer_gift
      description: >-
        Transfers an owned unique gift to another user<br/>Requires the
        can_transfer_and_upgrade_gifts business bot right<br/>Requires
        can_transfer_stars business bot right if the transfer is paid
      externalDocs:
        url: https://core.telegram.org/bots/api#transfergift
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                owned_gift_id:
                  type: string
                  description: >-
                    Unique identifier of the regular gift that should be
                    transferred
                new_owner_chat_id:
                  type: number
                  description: >-
                    Unique identifier of the chat which will own the
                    gift<br/>The chat must be active in the last 24 hours.
                star_count:
                  type: number
                  description: >-
                    The amount of Telegram Stars that will be paid for the
                    transfer from the business account balance<br/>If positive,
                    then the can_transfer_stars business bot right is required.
              required:
                - business_connection_id
                - owned_gift_id
                - new_owner_chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unbanChatMember:
    post:
      tags:
        - available-methods
      summary: unban_chat_member
      description: >-
        Use this method to unban a previously banned user in a supergroup or
        channel<br/>The user will not return to the group or channel
        automatically, but will be able to join via link, etc<br/>The bot must
        be an administrator for this to work<br/>By default, this method
        guarantees that after the call the user is not a member of the chat, but
        will be able to join it<br/>So if the user is a member of the chat they
        will also be removed from the chat<br/>If you don&#39;t want this, use
        the parameter only_if_banned
      externalDocs:
        url: https://core.telegram.org/bots/api#unbanchatmember
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target group or username of the
                    target supergroup or channel (in the format
                    @channelusername)
                user_id:
                  type: number
                  description: Unique identifier of the target user
                only_if_banned:
                  type: boolean
                  description: Do nothing if the user is not banned
              required:
                - chat_id
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unbanChatSenderChat:
    post:
      tags:
        - available-methods
      summary: unban_chat_sender_chat
      description: >-
        Use this method to unban a previously banned channel chat in a
        supergroup or channel<br/>The bot must be an administrator for this to
        work and must have the appropriate administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#unbanchatsenderchat
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                sender_chat_id:
                  type: number
                  description: Unique identifier of the target sender chat
              required:
                - chat_id
                - sender_chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unhideGeneralForumTopic:
    post:
      tags:
        - available-methods
      summary: unhide_general_forum_topic
      description: >-
        Use this method to unhide the &#39;General&#39; topic in a forum
        supergroup chat<br/>The bot must be an administrator in the chat for
        this to work and must have the can_manage_topics administrator rights
      externalDocs:
        url: https://core.telegram.org/bots/api#unhidegeneralforumtopic
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unpinAllChatMessages:
    post:
      tags:
        - available-methods
      summary: unpin_all_chat_messages
      description: >-
        Use this method to clear the list of pinned messages in a chat<br/>If
        the chat is not a private chat, the bot must be an administrator in the
        chat for this to work and must have the &#39;can_pin_messages&#39;
        administrator right in a supergroup or &#39;can_edit_messages&#39;
        administrator right in a channel
      externalDocs:
        url: https://core.telegram.org/bots/api#unpinallchatmessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unpinAllForumTopicMessages:
    post:
      tags:
        - available-methods
      summary: unpin_all_forum_topic_messages
      description: >-
        Use this method to clear the list of pinned messages in a forum
        topic<br/>The bot must be an administrator in the chat for this to work
        and must have the can_pin_messages administrator right in the supergroup
      externalDocs:
        url: https://core.telegram.org/bots/api#unpinallforumtopicmessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
                message_thread_id:
                  type: number
                  description: >-
                    Unique identifier for the target message thread of the forum
                    topic
              required:
                - chat_id
                - message_thread_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unpinAllGeneralForumTopicMessages:
    post:
      tags:
        - available-methods
      summary: unpin_all_general_forum_topic_messages
      description: >-
        Use this method to clear the list of pinned messages in a General forum
        topic<br/>The bot must be an administrator in the chat for this to work
        and must have the can_pin_messages administrator right in the supergroup
      externalDocs:
        url: https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target supergroup (in the format @supergroupusername)
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /unpinChatMessage:
    post:
      tags:
        - available-methods
      summary: unpin_chat_message
      description: >-
        Use this method to remove a message from the list of pinned messages in
        a chat<br/>If the chat is not a private chat, the bot must be an
        administrator in the chat for this to work and must have the
        &#39;can_pin_messages&#39; administrator right in a supergroup or
        &#39;can_edit_messages&#39; administrator right in a channel
      externalDocs:
        url: https://core.telegram.org/bots/api#unpinchatmessage
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                business_connection_id:
                  type: string
                  description: >-
                    Unique identifier of the business connection on behalf of
                    which the message will be unpinned
                message_id:
                  type: number
                  description: >-
                    Identifier of the message to unpin<br/>Required if
                    business_connection_id is specified<br/>If not specified,
                    the most recent pinned message (by sending date) will be
                    unpinned.
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /upgradeGift:
    post:
      tags:
        - updating-messages
      summary: upgrade_gift
      description: >-
        Upgrades a given regular gift to a unique gift<br/>Requires the
        can_transfer_and_upgrade_gifts business bot right<br/>Additionally
        requires the can_transfer_stars business bot right if the upgrade is
        paid
      externalDocs:
        url: https://core.telegram.org/bots/api#upgradegift
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                business_connection_id:
                  type: string
                  description: Unique identifier of the business connection
                owned_gift_id:
                  type: string
                  description: >-
                    Unique identifier of the regular gift that should be
                    upgraded to a unique one
                keep_original_details:
                  type: boolean
                  description: >-
                    Pass True to keep the original gift text, sender and
                    receiver in the upgraded gift
                star_count:
                  type: number
                  description: >-
                    The amount of Telegram Stars that will be paid for the
                    upgrade from the business account balance<br/>If
                    gift.prepaid_upgrade_star_count &gt; 0, then pass 0,
                    otherwise, the can_transfer_stars business bot right is
                    required and gift.upgrade_star_count must be passed.
              required:
                - business_connection_id
                - owned_gift_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /uploadStickerFile:
    post:
      tags:
        - stickers
      summary: upload_sticker_file
      description: >-
        Use this method to upload a file with a sticker for later use in the
        createNewStickerSet, addStickerToSet, or replaceStickerInSet methods
        (the file can be used multiple times)
      externalDocs:
        url: https://core.telegram.org/bots/api#uploadstickerfile
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: User identifier of sticker file owner
                sticker:
                  $ref: '#/components/schemas/InputFile'
                  description: >-
                    A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM
                    format<br/>See https://core.telegram.org/stickers for
                    technical requirements<br/>More information on Sending Files
                    »
                sticker_format:
                  type: string
                  enum:
                    - static
                    - animated
                    - video
                  description: >-
                    Format of the sticker, must be one of “static”, “animated”,
                    “video”
              required:
                - user_id
                - sticker
                - sticker_format
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
              example: File
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /verifyChat:
    post:
      tags:
        - updating-messages
      summary: verify_chat
      description: >-
        Verifies a chat on behalf of the organization which is represented by
        the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#verifychat
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  oneOf:
                    - type: number
                    - type: string
                  description: >-
                    Unique identifier for the target chat or username of the
                    target channel (in the format @channelusername)
                custom_description:
                  type: string
                  description: >-
                    Custom description for the verification; 0-70
                    characters<br/>Must be empty if the organization isn&#39;t
                    allowed to provide a custom verification description.
              required:
                - chat_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /verifyUser:
    post:
      tags:
        - updating-messages
      summary: verify_user
      description: >-
        Verifies a user on behalf of the organization which is represented by
        the bot
      externalDocs:
        url: https://core.telegram.org/bots/api#verifyuser
        description: telegram documentation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                  description: Unique identifier of the target user
                custom_description:
                  type: string
                  description: >-
                    Custom description for the verification; 0-70
                    characters<br/>Must be empty if the organization isn&#39;t
                    allowed to provide a custom verification description.
              required:
                - user_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
              example: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
components:
  responses:
    ErrorResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            type: object
            properties:
              error_code:
                type: integer
              description:
                type: string
            required:
              - error_code
  schemas:
    AcceptedGiftTypes:
      type: object
      properties:
        unlimited_gifts:
          type: boolean
          description: True, if unlimited regular gifts are accepted
        limited_gifts:
          type: boolean
          description: True, if limited regular gifts are accepted
        unique_gifts:
          type: boolean
          description: >-
            True, if unique gifts or gifts that can be upgraded to unique for
            free are accepted
        premium_subscription:
          type: boolean
          description: True, if a Telegram Premium subscription is accepted
      required:
        - unlimited_gifts
        - limited_gifts
        - unique_gifts
        - premium_subscription
    AffiliateInfo:
      type: object
      properties:
        commission_per_mille:
          type: number
          description: >-
            The number of Telegram Stars received by the affiliate for each 1000
            Telegram Stars received by the bot from referred users
        amount:
          type: number
          description: >-
            Integer amount of Telegram Stars received by the affiliate from the
            transaction, rounded to 0; can be negative for refunds
        affiliate_user:
          $ref: '#/components/schemas/User'
          description: >-
            The bot or the user that received an affiliate commission if it was
            received by a bot or a user
        affiliate_chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            The chat that received an affiliate commission if it was received by
            a chat
        nanostar_amount:
          type: number
          description: >-
            The number of 1/1000000000 shares of Telegram Stars received by the
            affiliate; from -999999999 to 999999999; can be negative for refunds
      required:
        - commission_per_mille
        - amount
    Animation:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        width:
          type: number
          description: Video width as defined by the sender
        height:
          type: number
          description: Video height as defined by the sender
        duration:
          type: number
          description: Duration of the video in seconds as defined by the sender
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Animation thumbnail as defined by the sender
        file_name:
          type: string
          description: Original animation filename as defined by the sender
        mime_type:
          type: string
          description: MIME type of the file as defined by the sender
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
      required:
        - file_id
        - file_unique_id
        - width
        - height
        - duration
    Audio:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        duration:
          type: number
          description: Duration of the audio in seconds as defined by the sender
        performer:
          type: string
          description: Performer of the audio as defined by the sender or by audio tags
        title:
          type: string
          description: Title of the audio as defined by the sender or by audio tags
        file_name:
          type: string
          description: Original filename as defined by the sender
        mime_type:
          type: string
          description: MIME type of the file as defined by the sender
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Thumbnail of the album cover to which the music file belongs
      required:
        - file_id
        - file_unique_id
        - duration
    BackgroundFill:
      oneOf:
        - $ref: '#/components/schemas/BackgroundFillSolid'
        - $ref: '#/components/schemas/BackgroundFillGradient'
        - $ref: '#/components/schemas/BackgroundFillFreeformGradient'
    BackgroundFillFreeformGradient:
      type: object
      properties:
        type:
          type: string
          enum:
            - freeform_gradient
          description: Type of the background fill, always “freeform_gradient”
        colors:
          type: array
          items:
            type: number
          description: >-
            A list of the 3 or 4 base colors that are used to generate the
            freeform gradient in the RGB24 format
      required:
        - type
        - colors
    BackgroundFillGradient:
      type: object
      properties:
        type:
          type: string
          enum:
            - gradient
          description: Type of the background fill, always “gradient”
        top_color:
          type: number
          description: Top color of the gradient in the RGB24 format
        bottom_color:
          type: number
          description: Bottom color of the gradient in the RGB24 format
        rotation_angle:
          type: number
          description: Clockwise rotation angle of the background fill in degrees; 0-359
      required:
        - type
        - top_color
        - bottom_color
        - rotation_angle
    BackgroundFillSolid:
      type: object
      properties:
        type:
          type: string
          enum:
            - solid
          description: Type of the background fill, always “solid”
        color:
          type: number
          description: The color of the background fill in the RGB24 format
      required:
        - type
        - color
    BackgroundType:
      oneOf:
        - $ref: '#/components/schemas/BackgroundTypeFill'
        - $ref: '#/components/schemas/BackgroundTypeWallpaper'
        - $ref: '#/components/schemas/BackgroundTypePattern'
        - $ref: '#/components/schemas/BackgroundTypeChatTheme'
    BackgroundTypeChatTheme:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat_theme
          description: Type of the background, always “chat_theme”
        theme_name:
          type: string
          description: Name of the chat theme, which is usually an emoji
      required:
        - type
        - theme_name
    BackgroundTypeFill:
      type: object
      properties:
        type:
          type: string
          enum:
            - fill
          description: Type of the background, always “fill”
        fill:
          $ref: '#/components/schemas/BackgroundFill'
          description: The background fill
        dark_theme_dimming:
          type: number
          description: Dimming of the background in dark themes, as a percentage; 0-100
      required:
        - type
        - fill
        - dark_theme_dimming
    BackgroundTypePattern:
      type: object
      properties:
        type:
          type: string
          enum:
            - pattern
          description: Type of the background, always “pattern”
        document:
          $ref: '#/components/schemas/Document'
          description: Document with the pattern
        fill:
          $ref: '#/components/schemas/BackgroundFill'
          description: The background fill that is combined with the pattern
        intensity:
          type: number
          description: >-
            Intensity of the pattern when it is shown above the filled
            background; 0-100
        is_inverted:
          type: boolean
          description: >-
            True, if the background fill must be applied only to the pattern
            itself<br/>All other pixels are black in this case<br/>For dark
            themes only
        is_moving:
          type: boolean
          description: True, if the background moves slightly when the device is tilted
      required:
        - type
        - document
        - fill
        - intensity
    BackgroundTypeWallpaper:
      type: object
      properties:
        type:
          type: string
          enum:
            - wallpaper
          description: Type of the background, always “wallpaper”
        document:
          $ref: '#/components/schemas/Document'
          description: Document with the wallpaper
        dark_theme_dimming:
          type: number
          description: Dimming of the background in dark themes, as a percentage; 0-100
        is_blurred:
          type: boolean
          description: >-
            True, if the wallpaper is downscaled to fit in a 450x450 square and
            then box-blurred with radius 12
        is_moving:
          type: boolean
          description: True, if the background moves slightly when the device is tilted
      required:
        - type
        - document
        - dark_theme_dimming
    Birthdate:
      type: object
      properties:
        day:
          type: number
          description: Day of the user&#39;s birth; 1-31
        month:
          type: number
          description: Month of the user&#39;s birth; 1-12
        year:
          type: number
          description: Year of the user&#39;s birth
      required:
        - day
        - month
    BotCommand:
      type: object
      properties:
        command:
          type: string
          description: >-
            Text of the command; 1-32 characters<br/>Can contain only lowercase
            English letters, digits and underscores.
        description:
          type: string
          description: Description of the command; 1-256 characters.
      required:
        - command
        - description
    BotCommandScope:
      oneOf:
        - $ref: '#/components/schemas/BotCommandScopeDefault'
        - $ref: '#/components/schemas/BotCommandScopeAllPrivateChats'
        - $ref: '#/components/schemas/BotCommandScopeAllGroupChats'
        - $ref: '#/components/schemas/BotCommandScopeAllChatAdministrators'
        - $ref: '#/components/schemas/BotCommandScopeChat'
        - $ref: '#/components/schemas/BotCommandScopeChatAdministrators'
        - $ref: '#/components/schemas/BotCommandScopeChatMember'
    BotCommandScopeAllChatAdministrators:
      type: object
      properties:
        type:
          type: string
          enum:
            - all_chat_administrators
          description: Scope type, must be all_chat_administrators
      required:
        - type
    BotCommandScopeAllGroupChats:
      type: object
      properties:
        type:
          type: string
          enum:
            - all_group_chats
          description: Scope type, must be all_group_chats
      required:
        - type
    BotCommandScopeAllPrivateChats:
      type: object
      properties:
        type:
          type: string
          enum:
            - all_private_chats
          description: Scope type, must be all_private_chats
      required:
        - type
    BotCommandScopeChat:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat
          description: Scope type, must be chat
        chat_id:
          oneOf:
            - type: number
            - type: string
          description: >-
            Unique identifier for the target chat or username of the target
            supergroup (in the format @supergroupusername)
      required:
        - type
        - chat_id
    BotCommandScopeChatAdministrators:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat_administrators
          description: Scope type, must be chat_administrators
        chat_id:
          oneOf:
            - type: number
            - type: string
          description: >-
            Unique identifier for the target chat or username of the target
            supergroup (in the format @supergroupusername)
      required:
        - type
        - chat_id
    BotCommandScopeChatMember:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat_member
          description: Scope type, must be chat_member
        chat_id:
          oneOf:
            - type: number
            - type: string
          description: >-
            Unique identifier for the target chat or username of the target
            supergroup (in the format @supergroupusername)
        user_id:
          type: number
          description: Unique identifier of the target user
      required:
        - type
        - chat_id
        - user_id
    BotCommandScopeDefault:
      type: object
      properties:
        type:
          type: string
          enum:
            - default
          description: Scope type, must be default
      required:
        - type
    BotDescription:
      type: object
      properties:
        description:
          type: string
          description: The bot&#39;s description
      required:
        - description
    BotName:
      type: object
      properties:
        name:
          type: string
          description: The bot&#39;s name
      required:
        - name
    BotShortDescription:
      type: object
      properties:
        short_description:
          type: string
          description: The bot&#39;s short description
      required:
        - short_description
    BusinessBotRights:
      type: object
      properties:
        can_reply:
          type: boolean
          description: >-
            True, if the bot can send and edit messages in the private chats
            that had incoming messages in the last 24 hours
        can_read_messages:
          type: boolean
          description: True, if the bot can mark incoming private messages as read
        can_delete_outgoing_messages:
          type: boolean
          description: True, if the bot can delete messages sent by the bot
        can_delete_all_messages:
          type: boolean
          description: True, if the bot can delete all private messages in managed chats
        can_edit_name:
          type: boolean
          description: >-
            True, if the bot can edit the first and last name of the business
            account
        can_edit_bio:
          type: boolean
          description: True, if the bot can edit the bio of the business account
        can_edit_profile_photo:
          type: boolean
          description: True, if the bot can edit the profile photo of the business account
        can_edit_username:
          type: boolean
          description: True, if the bot can edit the username of the business account
        can_change_gift_settings:
          type: boolean
          description: >-
            True, if the bot can change the privacy settings pertaining to gifts
            for the business account
        can_view_gifts_and_stars:
          type: boolean
          description: >-
            True, if the bot can view gifts and the amount of Telegram Stars
            owned by the business account
        can_convert_gifts_to_stars:
          type: boolean
          description: >-
            True, if the bot can convert regular gifts owned by the business
            account to Telegram Stars
        can_transfer_and_upgrade_gifts:
          type: boolean
          description: >-
            True, if the bot can transfer and upgrade gifts owned by the
            business account
        can_transfer_stars:
          type: boolean
          description: >-
            True, if the bot can transfer Telegram Stars received by the
            business account to its own account, or use them to upgrade and
            transfer gifts
        can_manage_stories:
          type: boolean
          description: >-
            True, if the bot can post, edit and delete stories on behalf of the
            business account
    BusinessConnection:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the business connection
        user:
          $ref: '#/components/schemas/User'
          description: Business account user that created the business connection
        user_chat_id:
          type: number
          description: >-
            Identifier of a private chat with the user who created the business
            connection<br/>This number may have more than 32 significant bits
            and some programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            64-bit integer or double-precision float type are safe for storing
            this identifier.
        date:
          type: number
          description: Date the connection was established in Unix time
        is_enabled:
          type: boolean
          description: True, if the connection is active
        rights:
          $ref: '#/components/schemas/BusinessBotRights'
          description: Rights of the business bot
      required:
        - id
        - user
        - user_chat_id
        - date
        - is_enabled
    BusinessIntro:
      type: object
      properties:
        title:
          type: string
          description: Title text of the business intro
        message:
          type: string
          description: Message text of the business intro
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: Sticker of the business intro
    BusinessLocation:
      type: object
      properties:
        address:
          type: string
          description: Address of the business
        location:
          $ref: '#/components/schemas/Location'
          description: Location of the business
      required:
        - address
    BusinessMessagesDeleted:
      type: object
      properties:
        business_connection_id:
          type: string
          description: Unique identifier of the business connection
        chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            Information about a chat in the business account<br/>The bot may not
            have access to the chat or the corresponding user.
        message_ids:
          type: array
          items:
            type: number
          description: >-
            The list of identifiers of deleted messages in the chat of the
            business account
      required:
        - business_connection_id
        - chat
        - message_ids
    BusinessOpeningHours:
      type: object
      properties:
        time_zone_name:
          type: string
          description: Unique name of the time zone for which the opening hours are defined
        opening_hours:
          type: array
          items:
            $ref: '#/components/schemas/BusinessOpeningHoursInterval'
          description: List of time intervals describing business opening hours
      required:
        - time_zone_name
        - opening_hours
    BusinessOpeningHoursInterval:
      type: object
      properties:
        opening_minute:
          type: number
          description: >-
            The minute&#39;s sequence number in a week, starting on Monday,
            marking the start of the time interval during which the business is
            open; 0 - 7 * 24 * 60
        closing_minute:
          type: number
          description: >-
            The minute&#39;s sequence number in a week, starting on Monday,
            marking the end of the time interval during which the business is
            open; 0 - 8 * 24 * 60
      required:
        - opening_minute
        - closing_minute
    CallbackGame:
      type: object
      additionalProperties: false
    CallbackQuery:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this query
        from:
          $ref: '#/components/schemas/User'
          description: Sender
        chat_instance:
          type: string
          description: >-
            Global identifier, uniquely corresponding to the chat to which the
            message with the callback button was sent<br/>Useful for high scores
            in games.
        message:
          $ref: '#/components/schemas/MaybeInaccessibleMessage'
          description: >-
            Message sent by the bot with the callback button that originated the
            query
        inline_message_id:
          type: string
          description: >-
            Identifier of the message sent via the bot in inline mode, that
            originated the query.
        data:
          type: string
          description: >-
            Data associated with the callback button<br/>Be aware that the
            message originated the query can contain no callback buttons with
            this data.
        game_short_name:
          type: string
          description: >-
            Short name of a Game to be returned, serves as the unique identifier
            for the game
      required:
        - id
        - from
        - chat_instance
    Chat:
      type: object
      properties:
        id:
          type: number
          description: >-
            Unique identifier for this chat<br/>This number may have more than
            32 significant bits and some programming languages may have
            difficulty/silent defects in interpreting it<br/>But it has at most
            52 significant bits, so a signed 64-bit integer or double-precision
            float type are safe for storing this identifier.
        type:
          type: string
          enum:
            - private
            - group
            - supergroup
            - channel
          description: >-
            Type of the chat, can be either “private”, “group”, “supergroup” or
            “channel”
        title:
          type: string
          description: Title, for supergroups, channels and group chats
        username:
          type: string
          description: Username, for private chats, supergroups and channels if available
        first_name:
          type: string
          description: First name of the other party in a private chat
        last_name:
          type: string
          description: Last name of the other party in a private chat
        is_forum:
          type: boolean
          description: True, if the supergroup chat is a forum (has topics enabled)
      required:
        - id
        - type
    ChatAdministratorRights:
      type: object
      properties:
        is_anonymous:
          type: boolean
          description: True, if the user&#39;s presence in the chat is hidden
        can_manage_chat:
          type: boolean
          description: >-
            True, if the administrator can access the chat event log, get boost
            list, see hidden supergroup and channel members, report spam
            messages and ignore slow mode<br/>Implied by any other administrator
            privilege.
        can_delete_messages:
          type: boolean
          description: True, if the administrator can delete messages of other users
        can_manage_video_chats:
          type: boolean
          description: True, if the administrator can manage video chats
        can_restrict_members:
          type: boolean
          description: >-
            True, if the administrator can restrict, ban or unban chat members,
            or access supergroup statistics
        can_promote_members:
          type: boolean
          description: >-
            True, if the administrator can add new administrators with a subset
            of their own privileges or demote administrators that they have
            promoted, directly or indirectly (promoted by administrators that
            were appointed by the user)
        can_change_info:
          type: boolean
          description: >-
            True, if the user is allowed to change the chat title, photo and
            other settings
        can_invite_users:
          type: boolean
          description: True, if the user is allowed to invite new users to the chat
        can_post_stories:
          type: boolean
          description: True, if the administrator can post stories to the chat
        can_edit_stories:
          type: boolean
          description: >-
            True, if the administrator can edit stories posted by other users,
            post stories to the chat page, pin chat stories, and access the
            chat&#39;s story archive
        can_delete_stories:
          type: boolean
          description: True, if the administrator can delete stories posted by other users
        can_post_messages:
          type: boolean
          description: >-
            True, if the administrator can post messages in the channel, or
            access channel statistics; for channels only
        can_edit_messages:
          type: boolean
          description: >-
            True, if the administrator can edit messages of other users and can
            pin messages; for channels only
        can_pin_messages:
          type: boolean
          description: >-
            True, if the user is allowed to pin messages; for groups and
            supergroups only
        can_manage_topics:
          type: boolean
          description: >-
            True, if the user is allowed to create, rename, close, and reopen
            forum topics; for supergroups only
      required:
        - is_anonymous
        - can_manage_chat
        - can_delete_messages
        - can_manage_video_chats
        - can_restrict_members
        - can_promote_members
        - can_change_info
        - can_invite_users
        - can_post_stories
        - can_edit_stories
        - can_delete_stories
    ChatBackground:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/BackgroundType'
          description: Type of the background
      required:
        - type
    ChatBoost:
      type: object
      properties:
        boost_id:
          type: string
          description: Unique identifier of the boost
        add_date:
          type: number
          description: Point in time (Unix timestamp) when the chat was boosted
        expiration_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when the boost will automatically
            expire, unless the booster&#39;s Telegram Premium subscription is
            prolonged
        source:
          $ref: '#/components/schemas/ChatBoostSource'
          description: Source of the added boost
      required:
        - boost_id
        - add_date
        - expiration_date
        - source
    ChatBoostAdded:
      type: object
      properties:
        boost_count:
          type: number
          description: Number of boosts added by the user
      required:
        - boost_count
    ChatBoostRemoved:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat which was boosted
        boost_id:
          type: string
          description: Unique identifier of the boost
        remove_date:
          type: number
          description: Point in time (Unix timestamp) when the boost was removed
        source:
          $ref: '#/components/schemas/ChatBoostSource'
          description: Source of the removed boost
      required:
        - chat
        - boost_id
        - remove_date
        - source
    ChatBoostSource:
      oneOf:
        - $ref: '#/components/schemas/ChatBoostSourcePremium'
        - $ref: '#/components/schemas/ChatBoostSourceGiftCode'
        - $ref: '#/components/schemas/ChatBoostSourceGiveaway'
    ChatBoostSourceGiftCode:
      type: object
      properties:
        source:
          type: string
          enum:
            - gift_code
          description: Source of the boost, always “gift_code”
        user:
          $ref: '#/components/schemas/User'
          description: User for which the gift code was created
      required:
        - source
        - user
    ChatBoostSourceGiveaway:
      type: object
      properties:
        source:
          type: string
          enum:
            - giveaway
          description: Source of the boost, always “giveaway”
        giveaway_message_id:
          type: number
          description: >-
            Identifier of a message in the chat with the giveaway; the message
            could have been deleted already<br/>May be 0 if the message
            isn&#39;t sent yet.
        user:
          $ref: '#/components/schemas/User'
          description: >-
            User that won the prize in the giveaway if any; for Telegram Premium
            giveaways only
        prize_star_count:
          type: number
          description: >-
            The number of Telegram Stars to be split between giveaway winners;
            for Telegram Star giveaways only
        is_unclaimed:
          type: boolean
          description: >-
            True, if the giveaway was completed, but there was no user to win
            the prize
      required:
        - source
        - giveaway_message_id
    ChatBoostSourcePremium:
      type: object
      properties:
        source:
          type: string
          enum:
            - premium
          description: Source of the boost, always “premium”
        user:
          $ref: '#/components/schemas/User'
          description: User that boosted the chat
      required:
        - source
        - user
    ChatBoostUpdated:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat which was boosted
        boost:
          $ref: '#/components/schemas/ChatBoost'
          description: Information about the chat boost
      required:
        - chat
        - boost
    ChatFullInfo:
      type: object
      properties:
        id:
          type: number
          description: >-
            Unique identifier for this chat<br/>This number may have more than
            32 significant bits and some programming languages may have
            difficulty/silent defects in interpreting it<br/>But it has at most
            52 significant bits, so a signed 64-bit integer or double-precision
            float type are safe for storing this identifier.
        type:
          type: string
          enum:
            - private
            - group
            - supergroup
            - channel
          description: >-
            Type of the chat, can be either “private”, “group”, “supergroup” or
            “channel”
        accent_color_id:
          type: number
          description: >-
            Identifier of the accent color for the chat name and backgrounds of
            the chat photo, reply header, and link preview<br/>See accent colors
            for more details.
        max_reaction_count:
          type: number
          description: >-
            The maximum number of reactions that can be set on a message in the
            chat
        accepted_gift_types:
          $ref: '#/components/schemas/AcceptedGiftTypes'
          description: >-
            Information about types of gifts that are accepted by the chat or by
            the corresponding user for private chats
        title:
          type: string
          description: Title, for supergroups, channels and group chats
        username:
          type: string
          description: Username, for private chats, supergroups and channels if available
        first_name:
          type: string
          description: First name of the other party in a private chat
        last_name:
          type: string
          description: Last name of the other party in a private chat
        is_forum:
          type: boolean
          description: True, if the supergroup chat is a forum (has topics enabled)
        photo:
          $ref: '#/components/schemas/ChatPhoto'
          description: Chat photo
        active_usernames:
          type: array
          items:
            type: string
          description: >-
            If non-empty, the list of all active chat usernames; for private
            chats, supergroups and channels
        birthdate:
          $ref: '#/components/schemas/Birthdate'
          description: For private chats, the date of birth of the user
        business_intro:
          $ref: '#/components/schemas/BusinessIntro'
          description: For private chats with business accounts, the intro of the business
        business_location:
          $ref: '#/components/schemas/BusinessLocation'
          description: >-
            For private chats with business accounts, the location of the
            business
        business_opening_hours:
          $ref: '#/components/schemas/BusinessOpeningHours'
          description: >-
            For private chats with business accounts, the opening hours of the
            business
        personal_chat:
          $ref: '#/components/schemas/Chat'
          description: For private chats, the personal channel of the user
        available_reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionType'
          description: >-
            List of available reactions allowed in the chat<br/>If omitted, then
            all emoji reactions are allowed.
        background_custom_emoji_id:
          type: string
          description: >-
            Custom emoji identifier of the emoji chosen by the chat for the
            reply header and link preview background
        profile_accent_color_id:
          type: number
          description: >-
            Identifier of the accent color for the chat&#39;s profile
            background<br/>See profile accent colors for more details.
        profile_background_custom_emoji_id:
          type: string
          description: >-
            Custom emoji identifier of the emoji chosen by the chat for its
            profile background
        emoji_status_custom_emoji_id:
          type: string
          description: >-
            Custom emoji identifier of the emoji status of the chat or the other
            party in a private chat
        emoji_status_expiration_date:
          type: number
          description: >-
            Expiration date of the emoji status of the chat or the other party
            in a private chat, in Unix time, if any
        bio:
          type: string
          description: Bio of the other party in a private chat
        has_private_forwards:
          type: boolean
          description: >-
            True, if privacy settings of the other party in the private chat
            allows to use tg://user?id=&lt;user_id&gt; links only in chats with
            the user
        has_restricted_voice_and_video_messages:
          type: boolean
          description: >-
            True, if the privacy settings of the other party restrict sending
            voice and video note messages in the private chat
        join_to_send_messages:
          type: boolean
          description: >-
            True, if users need to join the supergroup before they can send
            messages
        join_by_request:
          type: boolean
          description: >-
            True, if all users directly joining the supergroup without using an
            invite link need to be approved by supergroup administrators
        description:
          type: string
          description: Description, for groups, supergroups and channel chats
        invite_link:
          type: string
          description: Primary invite link, for groups, supergroups and channel chats
        pinned_message:
          $ref: '#/components/schemas/Message'
          description: The most recent pinned message (by sending date)
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
          description: Default chat member permissions, for groups and supergroups
        can_send_paid_media:
          type: boolean
          description: >-
            True, if paid media messages can be sent or forwarded to the channel
            chat<br/>The field is available only for channel chats.
        slow_mode_delay:
          type: number
          description: >-
            For supergroups, the minimum allowed delay between consecutive
            messages sent by each unprivileged user; in seconds
        unrestrict_boost_count:
          type: number
          description: >-
            For supergroups, the minimum number of boosts that a
            non-administrator user needs to add in order to ignore slow mode and
            chat permissions
        message_auto_delete_time:
          type: number
          description: >-
            The time after which all messages sent to the chat will be
            automatically deleted; in seconds
        has_aggressive_anti_spam_enabled:
          type: boolean
          description: >-
            True, if aggressive anti-spam checks are enabled in the
            supergroup<br/>The field is only available to chat administrators.
        has_hidden_members:
          type: boolean
          description: >-
            True, if non-administrators can only get the list of bots and
            administrators in the chat
        has_protected_content:
          type: boolean
          description: >-
            True, if messages from the chat can&#39;t be forwarded to other
            chats
        has_visible_history:
          type: boolean
          description: >-
            True, if new chat members will have access to old messages;
            available only to chat administrators
        sticker_set_name:
          type: string
          description: For supergroups, name of the group sticker set
        can_set_sticker_set:
          type: boolean
          description: True, if the bot can change the group sticker set
        custom_emoji_sticker_set_name:
          type: string
          description: >-
            For supergroups, the name of the group&#39;s custom emoji sticker
            set<br/>Custom emoji from this set can be used by all users and bots
            in the group.
        linked_chat_id:
          type: number
          description: >-
            Unique identifier for the linked chat, i.e<br/>the discussion group
            identifier for a channel and vice versa; for supergroups and channel
            chats<br/>This identifier may be greater than 32 bits and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it is smaller than 52 bits, so a signed 64
            bit integer or double-precision float type are safe for storing this
            identifier.
        location:
          $ref: '#/components/schemas/ChatLocation'
          description: For supergroups, the location to which the supergroup is connected
      required:
        - id
        - type
        - accent_color_id
        - max_reaction_count
        - accepted_gift_types
    ChatInviteLink:
      type: object
      properties:
        invite_link:
          type: string
          description: >-
            The invite link<br/>If the link was created by another chat
            administrator, then the second part of the link will be replaced
            with “…”.
        creator:
          $ref: '#/components/schemas/User'
          description: Creator of the link
        creates_join_request:
          type: boolean
          description: >-
            True, if users joining the chat via the link need to be approved by
            chat administrators
        is_primary:
          type: boolean
          description: True, if the link is primary
        is_revoked:
          type: boolean
          description: True, if the link is revoked
        name:
          type: string
          description: Invite link name
        expire_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when the link will expire or has been
            expired
        member_limit:
          type: number
          description: >-
            The maximum number of users that can be members of the chat
            simultaneously after joining the chat via this invite link; 1-99999
        pending_join_request_count:
          type: number
          description: Number of pending join requests created using this link
        subscription_period:
          type: number
          description: >-
            The number of seconds the subscription will be active for before the
            next payment
        subscription_price:
          type: number
          description: >-
            The amount of Telegram Stars a user must pay initially and after
            each subsequent subscription period to be a member of the chat using
            the link
      required:
        - invite_link
        - creator
        - creates_join_request
        - is_primary
        - is_revoked
    ChatJoinRequest:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat to which the request was sent
        from:
          $ref: '#/components/schemas/User'
          description: User that sent the join request
        user_chat_id:
          type: number
          description: >-
            Identifier of a private chat with the user who sent the join
            request<br/>This number may have more than 32 significant bits and
            some programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            64-bit integer or double-precision float type are safe for storing
            this identifier<br/>The bot can use this identifier for 5 minutes to
            send messages until the join request is processed, assuming no other
            administrator contacted the user.
        date:
          type: number
          description: Date the request was sent in Unix time
        bio:
          type: string
          description: Bio of the user.
        invite_link:
          $ref: '#/components/schemas/ChatInviteLink'
          description: Chat invite link that was used by the user to send the join request
      required:
        - chat
        - from
        - user_chat_id
        - date
    ChatLocation:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
          description: >-
            The location to which the supergroup is connected<br/>Can&#39;t be a
            live location.
        address:
          type: string
          description: Location address; 1-64 characters, as defined by the chat owner
      required:
        - location
        - address
    ChatMember:
      oneOf:
        - $ref: '#/components/schemas/ChatMemberOwner'
        - $ref: '#/components/schemas/ChatMemberAdministrator'
        - $ref: '#/components/schemas/ChatMemberMember'
        - $ref: '#/components/schemas/ChatMemberRestricted'
        - $ref: '#/components/schemas/ChatMemberLeft'
        - $ref: '#/components/schemas/ChatMemberBanned'
    ChatMemberAdministrator:
      type: object
      properties:
        status:
          type: string
          enum:
            - administrator
          description: The member&#39;s status in the chat, always “administrator”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        can_be_edited:
          type: boolean
          description: >-
            True, if the bot is allowed to edit administrator privileges of that
            user
        is_anonymous:
          type: boolean
          description: True, if the user&#39;s presence in the chat is hidden
        can_manage_chat:
          type: boolean
          description: >-
            True, if the administrator can access the chat event log, get boost
            list, see hidden supergroup and channel members, report spam
            messages and ignore slow mode<br/>Implied by any other administrator
            privilege.
        can_delete_messages:
          type: boolean
          description: True, if the administrator can delete messages of other users
        can_manage_video_chats:
          type: boolean
          description: True, if the administrator can manage video chats
        can_restrict_members:
          type: boolean
          description: >-
            True, if the administrator can restrict, ban or unban chat members,
            or access supergroup statistics
        can_promote_members:
          type: boolean
          description: >-
            True, if the administrator can add new administrators with a subset
            of their own privileges or demote administrators that they have
            promoted, directly or indirectly (promoted by administrators that
            were appointed by the user)
        can_change_info:
          type: boolean
          description: >-
            True, if the user is allowed to change the chat title, photo and
            other settings
        can_invite_users:
          type: boolean
          description: True, if the user is allowed to invite new users to the chat
        can_post_stories:
          type: boolean
          description: True, if the administrator can post stories to the chat
        can_edit_stories:
          type: boolean
          description: >-
            True, if the administrator can edit stories posted by other users,
            post stories to the chat page, pin chat stories, and access the
            chat&#39;s story archive
        can_delete_stories:
          type: boolean
          description: True, if the administrator can delete stories posted by other users
        can_post_messages:
          type: boolean
          description: >-
            True, if the administrator can post messages in the channel, or
            access channel statistics; for channels only
        can_edit_messages:
          type: boolean
          description: >-
            True, if the administrator can edit messages of other users and can
            pin messages; for channels only
        can_pin_messages:
          type: boolean
          description: >-
            True, if the user is allowed to pin messages; for groups and
            supergroups only
        can_manage_topics:
          type: boolean
          description: >-
            True, if the user is allowed to create, rename, close, and reopen
            forum topics; for supergroups only
        custom_title:
          type: string
          description: Custom title for this user
      required:
        - status
        - user
        - can_be_edited
        - is_anonymous
        - can_manage_chat
        - can_delete_messages
        - can_manage_video_chats
        - can_restrict_members
        - can_promote_members
        - can_change_info
        - can_invite_users
        - can_post_stories
        - can_edit_stories
        - can_delete_stories
    ChatMemberBanned:
      type: object
      properties:
        status:
          type: string
          enum:
            - kicked
          description: The member&#39;s status in the chat, always “kicked”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        until_date:
          type: number
          description: >-
            Date when restrictions will be lifted for this user; Unix
            time<br/>If 0, then the user is banned forever
      required:
        - status
        - user
        - until_date
    ChatMemberLeft:
      type: object
      properties:
        status:
          type: string
          enum:
            - left
          description: The member&#39;s status in the chat, always “left”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
      required:
        - status
        - user
    ChatMemberMember:
      type: object
      properties:
        status:
          type: string
          enum:
            - member
          description: The member&#39;s status in the chat, always “member”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        until_date:
          type: number
          description: Date when the user&#39;s subscription will expire; Unix time
      required:
        - status
        - user
    ChatMemberOwner:
      type: object
      properties:
        status:
          type: string
          enum:
            - creator
          description: The member&#39;s status in the chat, always “creator”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        is_anonymous:
          type: boolean
          description: True, if the user&#39;s presence in the chat is hidden
        custom_title:
          type: string
          description: Custom title for this user
      required:
        - status
        - user
        - is_anonymous
    ChatMemberRestricted:
      type: object
      properties:
        status:
          type: string
          enum:
            - restricted
          description: The member&#39;s status in the chat, always “restricted”
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        is_member:
          type: boolean
          description: >-
            True, if the user is a member of the chat at the moment of the
            request
        can_send_messages:
          type: boolean
          description: >-
            True, if the user is allowed to send text messages, contacts,
            giveaways, giveaway winners, invoices, locations and venues
        can_send_audios:
          type: boolean
          description: True, if the user is allowed to send audios
        can_send_documents:
          type: boolean
          description: True, if the user is allowed to send documents
        can_send_photos:
          type: boolean
          description: True, if the user is allowed to send photos
        can_send_videos:
          type: boolean
          description: True, if the user is allowed to send videos
        can_send_video_notes:
          type: boolean
          description: True, if the user is allowed to send video notes
        can_send_voice_notes:
          type: boolean
          description: True, if the user is allowed to send voice notes
        can_send_polls:
          type: boolean
          description: True, if the user is allowed to send polls
        can_send_other_messages:
          type: boolean
          description: >-
            True, if the user is allowed to send animations, games, stickers and
            use inline bots
        can_add_web_page_previews:
          type: boolean
          description: >-
            True, if the user is allowed to add web page previews to their
            messages
        can_change_info:
          type: boolean
          description: >-
            True, if the user is allowed to change the chat title, photo and
            other settings
        can_invite_users:
          type: boolean
          description: True, if the user is allowed to invite new users to the chat
        can_pin_messages:
          type: boolean
          description: True, if the user is allowed to pin messages
        can_manage_topics:
          type: boolean
          description: True, if the user is allowed to create forum topics
        until_date:
          type: number
          description: >-
            Date when restrictions will be lifted for this user; Unix
            time<br/>If 0, then the user is restricted forever
      required:
        - status
        - user
        - is_member
        - can_send_messages
        - can_send_audios
        - can_send_documents
        - can_send_photos
        - can_send_videos
        - can_send_video_notes
        - can_send_voice_notes
        - can_send_polls
        - can_send_other_messages
        - can_add_web_page_previews
        - can_change_info
        - can_invite_users
        - can_pin_messages
        - can_manage_topics
        - until_date
    ChatMemberUpdated:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat the user belongs to
        from:
          $ref: '#/components/schemas/User'
          description: Performer of the action, which resulted in the change
        date:
          type: number
          description: Date the change was done in Unix time
        old_chat_member:
          $ref: '#/components/schemas/ChatMember'
          description: Previous information about the chat member
        new_chat_member:
          $ref: '#/components/schemas/ChatMember'
          description: New information about the chat member
        invite_link:
          $ref: '#/components/schemas/ChatInviteLink'
          description: >-
            Chat invite link, which was used by the user to join the chat; for
            joining by invite link events only.
        via_join_request:
          type: boolean
          description: >-
            True, if the user joined the chat after sending a direct join
            request without using an invite link and being approved by an
            administrator
        via_chat_folder_invite_link:
          type: boolean
          description: True, if the user joined the chat via a chat folder invite link
      required:
        - chat
        - from
        - date
        - old_chat_member
        - new_chat_member
    ChatPermissions:
      type: object
      properties:
        can_send_messages:
          type: boolean
          description: >-
            True, if the user is allowed to send text messages, contacts,
            giveaways, giveaway winners, invoices, locations and venues
        can_send_audios:
          type: boolean
          description: True, if the user is allowed to send audios
        can_send_documents:
          type: boolean
          description: True, if the user is allowed to send documents
        can_send_photos:
          type: boolean
          description: True, if the user is allowed to send photos
        can_send_videos:
          type: boolean
          description: True, if the user is allowed to send videos
        can_send_video_notes:
          type: boolean
          description: True, if the user is allowed to send video notes
        can_send_voice_notes:
          type: boolean
          description: True, if the user is allowed to send voice notes
        can_send_polls:
          type: boolean
          description: True, if the user is allowed to send polls
        can_send_other_messages:
          type: boolean
          description: >-
            True, if the user is allowed to send animations, games, stickers and
            use inline bots
        can_add_web_page_previews:
          type: boolean
          description: >-
            True, if the user is allowed to add web page previews to their
            messages
        can_change_info:
          type: boolean
          description: >-
            True, if the user is allowed to change the chat title, photo and
            other settings<br/>Ignored in public supergroups
        can_invite_users:
          type: boolean
          description: True, if the user is allowed to invite new users to the chat
        can_pin_messages:
          type: boolean
          description: >-
            True, if the user is allowed to pin messages<br/>Ignored in public
            supergroups
        can_manage_topics:
          type: boolean
          description: >-
            True, if the user is allowed to create forum topics<br/>If omitted
            defaults to the value of can_pin_messages
    ChatPhoto:
      type: object
      properties:
        small_file_id:
          type: string
          description: >-
            File identifier of small (160x160) chat photo<br/>This file_id can
            be used only for photo download and only for as long as the photo is
            not changed.
        small_file_unique_id:
          type: string
          description: >-
            Unique file identifier of small (160x160) chat photo, which is
            supposed to be the same over time and for different
            bots<br/>Can&#39;t be used to download or reuse the file.
        big_file_id:
          type: string
          description: >-
            File identifier of big (640x640) chat photo<br/>This file_id can be
            used only for photo download and only for as long as the photo is
            not changed.
        big_file_unique_id:
          type: string
          description: >-
            Unique file identifier of big (640x640) chat photo, which is
            supposed to be the same over time and for different
            bots<br/>Can&#39;t be used to download or reuse the file.
      required:
        - small_file_id
        - small_file_unique_id
        - big_file_id
        - big_file_unique_id
    ChatShared:
      type: object
      properties:
        request_id:
          type: number
          description: Identifier of the request
        chat_id:
          type: number
          description: >-
            Identifier of the shared chat<br/>This number may have more than 32
            significant bits and some programming languages may have
            difficulty/silent defects in interpreting it<br/>But it has at most
            52 significant bits, so a 64-bit integer or double-precision float
            type are safe for storing this identifier<br/>The bot may not have
            access to the chat and could be unable to use this identifier,
            unless the chat is already known to the bot by some other means.
        title:
          type: string
          description: Title of the chat, if the title was requested by the bot.
        username:
          type: string
          description: >-
            Username of the chat, if the username was requested by the bot and
            available.
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: >-
            Available sizes of the chat photo, if the photo was requested by the
            bot
      required:
        - request_id
        - chat_id
    ChosenInlineResult:
      type: object
      properties:
        result_id:
          type: string
          description: The unique identifier for the result that was chosen
        from:
          $ref: '#/components/schemas/User'
          description: The user that chose the result
        query:
          type: string
          description: The query that was used to obtain the result
        location:
          $ref: '#/components/schemas/Location'
          description: Sender location, only for bots that require user location
        inline_message_id:
          type: string
          description: >-
            Identifier of the sent inline message<br/>Available only if there is
            an inline keyboard attached to the message<br/>Will be also received
            in callback queries and can be used to edit the message.
      required:
        - result_id
        - from
        - query
    Contact:
      type: object
      properties:
        phone_number:
          type: string
          description: Contact&#39;s phone number
        first_name:
          type: string
          description: Contact&#39;s first name
        last_name:
          type: string
          description: Contact&#39;s last name
        user_id:
          type: number
          description: >-
            Contact&#39;s user identifier in Telegram<br/>This number may have
            more than 32 significant bits and some programming languages may
            have difficulty/silent defects in interpreting it<br/>But it has at
            most 52 significant bits, so a 64-bit integer or double-precision
            float type are safe for storing this identifier.
        vcard:
          type: string
          description: Additional data about the contact in the form of a vCard
      required:
        - phone_number
        - first_name
    CopyTextButton:
      type: object
      properties:
        text:
          type: string
          description: The text to be copied to the clipboard; 1-256 characters
      required:
        - text
    Dice:
      type: object
      properties:
        emoji:
          type: string
          description: Emoji on which the dice throw animation is based
        value:
          type: number
          description: >-
            Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for
            “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji
      required:
        - emoji
        - value
    Document:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Document thumbnail as defined by the sender
        file_name:
          type: string
          description: Original filename as defined by the sender
        mime_type:
          type: string
          description: MIME type of the file as defined by the sender
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
      required:
        - file_id
        - file_unique_id
    EncryptedCredentials:
      type: object
      properties:
        data:
          type: string
          description: >-
            Base64-encoded encrypted JSON-serialized data with unique user&#39;s
            payload, data hashes and secrets required for
            EncryptedPassportElement decryption and authentication
        hash:
          type: string
          description: Base64-encoded data hash for data authentication
        secret:
          type: string
          description: >-
            Base64-encoded secret, encrypted with the bot&#39;s public RSA key,
            required for data decryption
      required:
        - data
        - hash
        - secret
    EncryptedPassportElement:
      type: object
      properties:
        type:
          type: string
          description: >-
            Element type<br/>One of “personal_details”, “passport”,
            “driver_license”, “identity_card”, “internal_passport”, “address”,
            “utility_bill”, “bank_statement”, “rental_agreement”,
            “passport_registration”, “temporary_registration”, “phone_number”,
            “email”.
        hash:
          type: string
          description: >-
            Base64-encoded element hash for using in
            PassportElementErrorUnspecified
        data:
          type: string
          description: >-
            Base64-encoded encrypted Telegram Passport element data provided by
            the user; available only for “personal_details”, “passport”,
            “driver_license”, “identity_card”, “internal_passport” and “address”
            types<br/>Can be decrypted and verified using the accompanying
            EncryptedCredentials.
        phone_number:
          type: string
          description: >-
            User&#39;s verified phone number; available only for “phone_number”
            type
        email:
          type: string
          description: User&#39;s verified email address; available only for “email” type
        files:
          type: array
          items:
            $ref: '#/components/schemas/PassportFile'
          description: >-
            Array of encrypted files with documents provided by the user;
            available only for “utility_bill”, “bank_statement”,
            “rental_agreement”, “passport_registration” and
            “temporary_registration” types<br/>Files can be decrypted and
            verified using the accompanying EncryptedCredentials.
        front_side:
          $ref: '#/components/schemas/PassportFile'
          description: >-
            Encrypted file with the front side of the document, provided by the
            user; available only for “passport”, “driver_license”,
            “identity_card” and “internal_passport”<br/>The file can be
            decrypted and verified using the accompanying EncryptedCredentials.
        reverse_side:
          $ref: '#/components/schemas/PassportFile'
          description: >-
            Encrypted file with the reverse side of the document, provided by
            the user; available only for “driver_license” and
            “identity_card”<br/>The file can be decrypted and verified using the
            accompanying EncryptedCredentials.
        selfie:
          $ref: '#/components/schemas/PassportFile'
          description: >-
            Encrypted file with the selfie of the user holding a document,
            provided by the user; available if requested for “passport”,
            “driver_license”, “identity_card” and “internal_passport”<br/>The
            file can be decrypted and verified using the accompanying
            EncryptedCredentials.
        translation:
          type: array
          items:
            $ref: '#/components/schemas/PassportFile'
          description: >-
            Array of encrypted files with translated versions of documents
            provided by the user; available if requested for “passport”,
            “driver_license”, “identity_card”, “internal_passport”,
            “utility_bill”, “bank_statement”, “rental_agreement”,
            “passport_registration” and “temporary_registration” types<br/>Files
            can be decrypted and verified using the accompanying
            EncryptedCredentials.
      required:
        - type
        - hash
    ExternalReplyInfo:
      type: object
      properties:
        origin:
          $ref: '#/components/schemas/MessageOrigin'
          description: Origin of the message replied to by the given message
        chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            Chat the original message belongs to<br/>Available only if the chat
            is a supergroup or a channel.
        message_id:
          type: number
          description: >-
            Unique message identifier inside the original chat<br/>Available
            only if the original chat is a supergroup or a channel.
        link_preview_options:
          $ref: '#/components/schemas/LinkPreviewOptions'
          description: >-
            Options used for link preview generation for the original message,
            if it is a text message
        animation:
          $ref: '#/components/schemas/Animation'
          description: Message is an animation, information about the animation
        audio:
          $ref: '#/components/schemas/Audio'
          description: Message is an audio file, information about the file
        document:
          $ref: '#/components/schemas/Document'
          description: Message is a general file, information about the file
        paid_media:
          $ref: '#/components/schemas/PaidMediaInfo'
          description: Message contains paid media; information about the paid media
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: Message is a photo, available sizes of the photo
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: Message is a sticker, information about the sticker
        story:
          $ref: '#/components/schemas/Story'
          description: Message is a forwarded story
        video:
          $ref: '#/components/schemas/Video'
          description: Message is a video, information about the video
        video_note:
          $ref: '#/components/schemas/VideoNote'
          description: Message is a video note, information about the video message
        voice:
          $ref: '#/components/schemas/Voice'
          description: Message is a voice message, information about the file
        has_media_spoiler:
          type: boolean
          description: True, if the message media is covered by a spoiler animation
        contact:
          $ref: '#/components/schemas/Contact'
          description: Message is a shared contact, information about the contact
        dice:
          $ref: '#/components/schemas/Dice'
          description: Message is a dice with random value
        game:
          $ref: '#/components/schemas/Game'
          description: Message is a game, information about the game<br/>More about games »
        giveaway:
          $ref: '#/components/schemas/Giveaway'
          description: Message is a scheduled giveaway, information about the giveaway
        giveaway_winners:
          $ref: '#/components/schemas/GiveawayWinners'
          description: A giveaway with public winners was completed
        invoice:
          $ref: '#/components/schemas/Invoice'
          description: >-
            Message is an invoice for a payment, information about the
            invoice<br/>More about payments »
        location:
          $ref: '#/components/schemas/Location'
          description: Message is a shared location, information about the location
        poll:
          $ref: '#/components/schemas/Poll'
          description: Message is a native poll, information about the poll
        venue:
          $ref: '#/components/schemas/Venue'
          description: Message is a venue, information about the venue
      required:
        - origin
    File:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
        file_path:
          type: string
          description: >-
            File path<br/>Use
            https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt; to
            get the file.
      required:
        - file_id
        - file_unique_id
    ForceReply:
      type: object
      properties:
        force_reply:
          type: boolean
          description: >-
            Shows reply interface to the user, as if they manually selected the
            bot&#39;s message and tapped &#39;Reply&#39;
        input_field_placeholder:
          type: string
          description: >-
            The placeholder to be shown in the input field when the reply is
            active; 1-64 characters
        selective:
          type: boolean
          description: >-
            Use this parameter if you want to force reply from specific users
            only<br/>Targets: 1) users that are @mentioned in the text of the
            Message object; 2) if the bot&#39;s message is a reply to a message
            in the same chat and forum topic, sender of the original message.
      required:
        - force_reply
    ForumTopic:
      type: object
      properties:
        message_thread_id:
          type: number
          description: Unique identifier of the forum topic
        name:
          type: string
          description: Name of the topic
        icon_color:
          type: number
          description: Color of the topic icon in RGB format
        icon_custom_emoji_id:
          type: string
          description: Unique identifier of the custom emoji shown as the topic icon
      required:
        - message_thread_id
        - name
        - icon_color
    ForumTopicClosed:
      type: object
      additionalProperties: false
    ForumTopicCreated:
      type: object
      properties:
        name:
          type: string
          description: Name of the topic
        icon_color:
          type: number
          description: Color of the topic icon in RGB format
        icon_custom_emoji_id:
          type: string
          description: Unique identifier of the custom emoji shown as the topic icon
      required:
        - name
        - icon_color
    ForumTopicEdited:
      type: object
      properties:
        name:
          type: string
          description: New name of the topic, if it was edited
        icon_custom_emoji_id:
          type: string
          description: >-
            New identifier of the custom emoji shown as the topic icon, if it
            was edited; an empty string if the icon was removed
    ForumTopicReopened:
      type: object
      additionalProperties: false
    Game:
      type: object
      properties:
        title:
          type: string
          description: Title of the game
        description:
          type: string
          description: Description of the game
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: Photo that will be displayed in the game message in chats.
        text:
          type: string
          description: >-
            Brief description of the game or high scores included in the game
            message<br/>Can be automatically edited to include current high
            scores for the game when the bot calls setGameScore, or manually
            edited using editMessageText<br/>0-4096 characters.
        text_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            Special entities that appear in text, such as usernames, URLs, bot
            commands, etc.
        animation:
          $ref: '#/components/schemas/Animation'
          description: >-
            Animation that will be displayed in the game message in
            chats<br/>Upload via BotFather
      required:
        - title
        - description
        - photo
    GameHighScore:
      type: object
      properties:
        position:
          type: number
          description: Position in high score table for the game
        user:
          $ref: '#/components/schemas/User'
          description: User
        score:
          type: number
          description: Score
      required:
        - position
        - user
        - score
    GeneralForumTopicHidden:
      type: object
      additionalProperties: false
    GeneralForumTopicUnhidden:
      type: object
      additionalProperties: false
    Gift:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the gift
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: The sticker that represents the gift
        star_count:
          type: number
          description: The number of Telegram Stars that must be paid to send the sticker
        upgrade_star_count:
          type: number
          description: >-
            The number of Telegram Stars that must be paid to upgrade the gift
            to a unique one
        total_count:
          type: number
          description: >-
            The total number of the gifts of this type that can be sent; for
            limited gifts only
        remaining_count:
          type: number
          description: >-
            The number of remaining gifts of this type that can be sent; for
            limited gifts only
      required:
        - id
        - sticker
        - star_count
    GiftInfo:
      type: object
      properties:
        gift:
          $ref: '#/components/schemas/Gift'
          description: Information about the gift
        owned_gift_id:
          type: string
          description: >-
            Unique identifier of the received gift for the bot; only present for
            gifts received on behalf of business accounts
        convert_star_count:
          type: number
          description: >-
            Number of Telegram Stars that can be claimed by the receiver by
            converting the gift; omitted if conversion to Telegram Stars is
            impossible
        prepaid_upgrade_star_count:
          type: number
          description: >-
            Number of Telegram Stars that were prepaid by the sender for the
            ability to upgrade the gift
        can_be_upgraded:
          type: boolean
          description: True, if the gift can be upgraded to a unique gift
        text:
          type: string
          description: Text of the message that was added to the gift
        entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: Special entities that appear in the text
        is_private:
          type: boolean
          description: >-
            True, if the sender and gift text are shown only to the gift
            receiver; otherwise, everyone will be able to see them
      required:
        - gift
    Gifts:
      type: object
      properties:
        gifts:
          type: array
          items:
            $ref: '#/components/schemas/Gift'
          description: The list of gifts
      required:
        - gifts
    Giveaway:
      type: object
      properties:
        chats:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
          description: >-
            The list of chats which the user must join to participate in the
            giveaway
        winners_selection_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when winners of the giveaway will be
            selected
        winner_count:
          type: number
          description: >-
            The number of users which are supposed to be selected as winners of
            the giveaway
        only_new_members:
          type: boolean
          description: >-
            True, if only users who join the chats after the giveaway started
            should be eligible to win
        has_public_winners:
          type: boolean
          description: True, if the list of giveaway winners will be visible to everyone
        prize_description:
          type: string
          description: Description of additional giveaway prize
        country_codes:
          type: array
          items:
            type: string
          description: >-
            A list of two-letter ISO 3166-1 alpha-2 country codes indicating the
            countries from which eligible users for the giveaway must
            come<br/>If empty, then all users can participate in the
            giveaway<br/>Users with a phone number that was bought on Fragment
            can always participate in giveaways.
        prize_star_count:
          type: number
          description: >-
            The number of Telegram Stars to be split between giveaway winners;
            for Telegram Star giveaways only
        premium_subscription_month_count:
          type: number
          description: >-
            The number of months the Telegram Premium subscription won from the
            giveaway will be active for; for Telegram Premium giveaways only
      required:
        - chats
        - winners_selection_date
        - winner_count
    GiveawayCompleted:
      type: object
      properties:
        winner_count:
          type: number
          description: Number of winners in the giveaway
        unclaimed_prize_count:
          type: number
          description: Number of undistributed prizes
        giveaway_message:
          $ref: '#/components/schemas/Message'
          description: >-
            Message with the giveaway that was completed, if it wasn&#39;t
            deleted
        is_star_giveaway:
          type: boolean
          description: >-
            True, if the giveaway is a Telegram Star giveaway<br/>Otherwise,
            currently, the giveaway is a Telegram Premium giveaway.
      required:
        - winner_count
    GiveawayCreated:
      type: object
      properties:
        prize_star_count:
          type: number
          description: >-
            The number of Telegram Stars to be split between giveaway winners;
            for Telegram Star giveaways only
    GiveawayWinners:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: The chat that created the giveaway
        giveaway_message_id:
          type: number
          description: Identifier of the message with the giveaway in the chat
        winners_selection_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when winners of the giveaway were
            selected
        winner_count:
          type: number
          description: Total number of winners in the giveaway
        winners:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: List of up to 100 winners of the giveaway
        additional_chat_count:
          type: number
          description: >-
            The number of other chats the user had to join in order to be
            eligible for the giveaway
        prize_star_count:
          type: number
          description: >-
            The number of Telegram Stars that were split between giveaway
            winners; for Telegram Star giveaways only
        premium_subscription_month_count:
          type: number
          description: >-
            The number of months the Telegram Premium subscription won from the
            giveaway will be active for; for Telegram Premium giveaways only
        unclaimed_prize_count:
          type: number
          description: Number of undistributed prizes
        only_new_members:
          type: boolean
          description: >-
            True, if only users who had joined the chats after the giveaway
            started were eligible to win
        was_refunded:
          type: boolean
          description: >-
            True, if the giveaway was canceled because the payment for it was
            refunded
        prize_description:
          type: string
          description: Description of additional giveaway prize
      required:
        - chat
        - giveaway_message_id
        - winners_selection_date
        - winner_count
        - winners
    InaccessibleMessage:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat the message belonged to
        message_id:
          type: number
          description: Unique message identifier inside the chat
        date:
          type: number
          description: >-
            Always 0<br/>The field can be used to differentiate regular and
            inaccessible messages.
      required:
        - chat
        - message_id
        - date
    InlineKeyboardButton:
      type: object
      properties:
        text:
          type: string
          description: Label text on the button
        url:
          type: string
          description: >-
            HTTP or tg:// URL to be opened when the button is pressed<br/>Links
            tg://user?id=&lt;user_id&gt; can be used to mention a user by their
            identifier without using a username, if this is allowed by their
            privacy settings.
        callback_data:
          type: string
          description: >-
            Data to be sent in a callback query to the bot when the button is
            pressed, 1-64 bytes
        web_app:
          $ref: '#/components/schemas/WebAppInfo'
          description: >-
            Description of the Web App that will be launched when the user
            presses the button<br/>The Web App will be able to send an arbitrary
            message on behalf of the user using the method
            answerWebAppQuery<br/>Available only in private chats between a user
            and the bot<br/>Not supported for messages sent on behalf of a
            Telegram Business account.
        login_url:
          $ref: '#/components/schemas/LoginUrl'
          description: >-
            An HTTPS URL used to automatically authorize the user<br/>Can be
            used as a replacement for the Telegram Login Widget.
        switch_inline_query:
          type: string
          description: >-
            If set, pressing the button will prompt the user to select one of
            their chats, open that chat and insert the bot&#39;s username and
            the specified inline query in the input field<br/>May be empty, in
            which case just the bot&#39;s username will be inserted<br/>Not
            supported for messages sent on behalf of a Telegram Business
            account.
        switch_inline_query_current_chat:
          type: string
          description: >-
            If set, pressing the button will insert the bot&#39;s username and
            the specified inline query in the current chat&#39;s input
            field<br/>May be empty, in which case only the bot&#39;s username
            will be inserted<br/>.<br/>This offers a quick way for the user to
            open your bot in inline mode in the same chat - good for selecting
            something from multiple options<br/>Not supported in channels and
            for messages sent on behalf of a Telegram Business account.
        switch_inline_query_chosen_chat:
          $ref: '#/components/schemas/SwitchInlineQueryChosenChat'
          description: >-
            If set, pressing the button will prompt the user to select one of
            their chats of the specified type, open that chat and insert the
            bot&#39;s username and the specified inline query in the input
            field<br/>Not supported for messages sent on behalf of a Telegram
            Business account.
        copy_text:
          $ref: '#/components/schemas/CopyTextButton'
          description: >-
            Description of the button that copies the specified text to the
            clipboard.
        callback_game:
          $ref: '#/components/schemas/CallbackGame'
          description: >-
            Description of the game that will be launched when the user presses
            the button<br/>.<br/>NOTE: This type of button must always be the
            first button in the first row.
        pay:
          type: boolean
          description: >-
            Specify True, to send a Pay button<br/>Substrings “⭐” and “XTR” in
            the buttons&#39;s text will be replaced with a Telegram Star
            icon<br/>.<br/>NOTE: This type of button must always be the first
            button in the first row and can only be used in invoice messages.
      required:
        - text
    InlineKeyboardMarkup:
      type: object
      properties:
        inline_keyboard:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/InlineKeyboardButton'
          description: >-
            Array of button rows, each represented by an Array of
            InlineKeyboardButton objects
      required:
        - inline_keyboard
    InlineQuery:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this query
        from:
          $ref: '#/components/schemas/User'
          description: Sender
        query:
          type: string
          description: Text of the query (up to 256 characters)
        offset:
          type: string
          description: Offset of the results to be returned, can be controlled by the bot
        chat_type:
          type: string
          description: >-
            Type of the chat from which the inline query was sent<br/>Can be
            either “sender” for a private chat with the inline query sender,
            “private”, “group”, “supergroup”, or “channel”<br/>The chat type
            should be always known for requests sent from official clients and
            most third-party clients, unless the request was sent from a secret
            chat
        location:
          $ref: '#/components/schemas/Location'
          description: Sender location, only for bots that request user location
      required:
        - id
        - from
        - query
        - offset
    InlineQueryResult:
      oneOf:
        - $ref: '#/components/schemas/InlineQueryResultCachedAudio'
        - $ref: '#/components/schemas/InlineQueryResultCachedDocument'
        - $ref: '#/components/schemas/InlineQueryResultCachedGif'
        - $ref: '#/components/schemas/InlineQueryResultCachedMpeg4Gif'
        - $ref: '#/components/schemas/InlineQueryResultCachedPhoto'
        - $ref: '#/components/schemas/InlineQueryResultCachedSticker'
        - $ref: '#/components/schemas/InlineQueryResultCachedVideo'
        - $ref: '#/components/schemas/InlineQueryResultCachedVoice'
        - $ref: '#/components/schemas/InlineQueryResultArticle'
        - $ref: '#/components/schemas/InlineQueryResultAudio'
        - $ref: '#/components/schemas/InlineQueryResultContact'
        - $ref: '#/components/schemas/InlineQueryResultGame'
        - $ref: '#/components/schemas/InlineQueryResultDocument'
        - $ref: '#/components/schemas/InlineQueryResultGif'
        - $ref: '#/components/schemas/InlineQueryResultLocation'
        - $ref: '#/components/schemas/InlineQueryResultMpeg4Gif'
        - $ref: '#/components/schemas/InlineQueryResultPhoto'
        - $ref: '#/components/schemas/InlineQueryResultVenue'
        - $ref: '#/components/schemas/InlineQueryResultVideo'
        - $ref: '#/components/schemas/InlineQueryResultVoice'
    InlineQueryResultArticle:
      type: object
      properties:
        type:
          type: string
          enum:
            - article
          description: Type of the result, must be article
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        title:
          type: string
          description: Title of the result
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        url:
          type: string
          description: URL of the result
        description:
          type: string
          description: Short description of the result
        thumbnail_url:
          type: string
          description: Url of the thumbnail for the result
        thumbnail_width:
          type: number
          description: Thumbnail width
        thumbnail_height:
          type: number
          description: Thumbnail height
      required:
        - type
        - id
        - title
        - input_message_content
    InlineQueryResultAudio:
      type: object
      properties:
        type:
          type: string
          enum:
            - audio
          description: Type of the result, must be audio
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        audio_url:
          type: string
          description: A valid URL for the audio file
        title:
          type: string
          description: Title
        caption:
          type: string
          description: Caption, 0-1024 characters after entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the audio caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        performer:
          type: string
          description: Performer
        audio_duration:
          type: number
          description: Audio duration in seconds
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the audio
      required:
        - type
        - id
        - audio_url
        - title
    InlineQueryResultCachedAudio:
      type: object
      properties:
        type:
          type: string
          enum:
            - audio
          description: Type of the result, must be audio
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        audio_file_id:
          type: string
          description: A valid file identifier for the audio file
        caption:
          type: string
          description: Caption, 0-1024 characters after entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the audio caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the audio
      required:
        - type
        - id
        - audio_file_id
    InlineQueryResultCachedDocument:
      type: object
      properties:
        type:
          type: string
          enum:
            - document
          description: Type of the result, must be document
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        title:
          type: string
          description: Title for the result
        document_file_id:
          type: string
          description: A valid file identifier for the file
        description:
          type: string
          description: Short description of the result
        caption:
          type: string
          description: >-
            Caption of the document to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the document caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the file
      required:
        - type
        - id
        - title
        - document_file_id
    InlineQueryResultCachedGif:
      type: object
      properties:
        type:
          type: string
          enum:
            - gif
          description: Type of the result, must be gif
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        gif_file_id:
          type: string
          description: A valid file identifier for the GIF file
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: >-
            Caption of the GIF file to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the caption<br/>See formatting options
            for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the GIF animation
      required:
        - type
        - id
        - gif_file_id
    InlineQueryResultCachedMpeg4Gif:
      type: object
      properties:
        type:
          type: string
          enum:
            - mpeg4_gif
          description: Type of the result, must be mpeg4_gif
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        mpeg4_file_id:
          type: string
          description: A valid file identifier for the MPEG4 file
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: >-
            Caption of the MPEG-4 file to be sent, 0-1024 characters after
            entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the caption<br/>See formatting options
            for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the video animation
      required:
        - type
        - id
        - mpeg4_file_id
    InlineQueryResultCachedPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the result, must be photo
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        photo_file_id:
          type: string
          description: A valid file identifier of the photo
        title:
          type: string
          description: Title for the result
        description:
          type: string
          description: Short description of the result
        caption:
          type: string
          description: >-
            Caption of the photo to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the photo caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the photo
      required:
        - type
        - id
        - photo_file_id
    InlineQueryResultCachedSticker:
      type: object
      properties:
        type:
          type: string
          enum:
            - sticker
          description: Type of the result, must be sticker
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        sticker_file_id:
          type: string
          description: A valid file identifier of the sticker
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the sticker
      required:
        - type
        - id
        - sticker_file_id
    InlineQueryResultCachedVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the result, must be video
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        video_file_id:
          type: string
          description: A valid file identifier for the video file
        title:
          type: string
          description: Title for the result
        description:
          type: string
          description: Short description of the result
        caption:
          type: string
          description: >-
            Caption of the video to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the video caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the video
      required:
        - type
        - id
        - video_file_id
        - title
    InlineQueryResultCachedVoice:
      type: object
      properties:
        type:
          type: string
          enum:
            - voice
          description: Type of the result, must be voice
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        voice_file_id:
          type: string
          description: A valid file identifier for the voice message
        title:
          type: string
          description: Voice message title
        caption:
          type: string
          description: Caption, 0-1024 characters after entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the voice message caption<br/>See
            formatting options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the voice message
      required:
        - type
        - id
        - voice_file_id
        - title
    InlineQueryResultContact:
      type: object
      properties:
        type:
          type: string
          enum:
            - contact
          description: Type of the result, must be contact
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        phone_number:
          type: string
          description: Contact&#39;s phone number
        first_name:
          type: string
          description: Contact&#39;s first name
        last_name:
          type: string
          description: Contact&#39;s last name
        vcard:
          type: string
          description: >-
            Additional data about the contact in the form of a vCard, 0-2048
            bytes
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the contact
        thumbnail_url:
          type: string
          description: Url of the thumbnail for the result
        thumbnail_width:
          type: number
          description: Thumbnail width
        thumbnail_height:
          type: number
          description: Thumbnail height
      required:
        - type
        - id
        - phone_number
        - first_name
    InlineQueryResultDocument:
      type: object
      properties:
        type:
          type: string
          enum:
            - document
          description: Type of the result, must be document
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        title:
          type: string
          description: Title for the result
        document_url:
          type: string
          description: A valid URL for the file
        mime_type:
          type: string
          description: >-
            MIME type of the content of the file, either “application/pdf” or
            “application/zip”
        caption:
          type: string
          description: >-
            Caption of the document to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the document caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        description:
          type: string
          description: Short description of the result
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the file
        thumbnail_url:
          type: string
          description: URL of the thumbnail (JPEG only) for the file
        thumbnail_width:
          type: number
          description: Thumbnail width
        thumbnail_height:
          type: number
          description: Thumbnail height
      required:
        - type
        - id
        - title
        - document_url
        - mime_type
    InlineQueryResultGame:
      type: object
      properties:
        type:
          type: string
          enum:
            - game
          description: Type of the result, must be game
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        game_short_name:
          type: string
          description: Short name of the game
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
      required:
        - type
        - id
        - game_short_name
    InlineQueryResultGif:
      type: object
      properties:
        type:
          type: string
          enum:
            - gif
          description: Type of the result, must be gif
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        gif_url:
          type: string
          description: A valid URL for the GIF file
        thumbnail_url:
          type: string
          description: >-
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for
            the result
        gif_width:
          type: number
          description: Width of the GIF
        gif_height:
          type: number
          description: Height of the GIF
        gif_duration:
          type: number
          description: Duration of the GIF in seconds
        thumbnail_mime_type:
          type: string
          enum:
            - image/jpeg
            - image/gif
            - video/mp4
          description: >-
            MIME type of the thumbnail, must be one of “image/jpeg”,
            “image/gif”, or “video/mp4”<br/>Defaults to “image/jpeg”
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: >-
            Caption of the GIF file to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the caption<br/>See formatting options
            for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the GIF animation
      required:
        - type
        - id
        - gif_url
        - thumbnail_url
    InlineQueryResultLocation:
      type: object
      properties:
        type:
          type: string
          enum:
            - location
          description: Type of the result, must be location
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        latitude:
          type: number
          description: Location latitude in degrees
        longitude:
          type: number
          description: Location longitude in degrees
        title:
          type: string
          description: Location title
        horizontal_accuracy:
          type: number
          description: >-
            The radius of uncertainty for the location, measured in meters;
            0-1500
        live_period:
          type: number
          description: >-
            Period in seconds during which the location can be updated, should
            be between 60 and 86400, or 0x7FFFFFFF for live locations that can
            be edited indefinitely.
        heading:
          type: number
          description: >-
            For live locations, a direction in which the user is moving, in
            degrees<br/>Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: number
          description: >-
            For live locations, a maximum distance for proximity alerts about
            approaching another chat member, in meters<br/>Must be between 1 and
            100000 if specified.
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the location
        thumbnail_url:
          type: string
          description: Url of the thumbnail for the result
        thumbnail_width:
          type: number
          description: Thumbnail width
        thumbnail_height:
          type: number
          description: Thumbnail height
      required:
        - type
        - id
        - latitude
        - longitude
        - title
    InlineQueryResultMpeg4Gif:
      type: object
      properties:
        type:
          type: string
          enum:
            - mpeg4_gif
          description: Type of the result, must be mpeg4_gif
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        mpeg4_url:
          type: string
          description: A valid URL for the MPEG4 file
        thumbnail_url:
          type: string
          description: >-
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for
            the result
        mpeg4_width:
          type: number
          description: Video width
        mpeg4_height:
          type: number
          description: Video height
        mpeg4_duration:
          type: number
          description: Video duration in seconds
        thumbnail_mime_type:
          type: string
          enum:
            - image/jpeg
            - image/gif
            - video/mp4
          description: >-
            MIME type of the thumbnail, must be one of “image/jpeg”,
            “image/gif”, or “video/mp4”<br/>Defaults to “image/jpeg”
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: >-
            Caption of the MPEG-4 file to be sent, 0-1024 characters after
            entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the caption<br/>See formatting options
            for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the video animation
      required:
        - type
        - id
        - mpeg4_url
        - thumbnail_url
    InlineQueryResultPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the result, must be photo
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        photo_url:
          type: string
          description: >-
            A valid URL of the photo<br/>Photo must be in JPEG format<br/>Photo
            size must not exceed 5MB
        thumbnail_url:
          type: string
          description: URL of the thumbnail for the photo
        photo_width:
          type: number
          description: Width of the photo
        photo_height:
          type: number
          description: Height of the photo
        title:
          type: string
          description: Title for the result
        description:
          type: string
          description: Short description of the result
        caption:
          type: string
          description: >-
            Caption of the photo to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the photo caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the photo
      required:
        - type
        - id
        - photo_url
        - thumbnail_url
    InlineQueryResultsButton:
      type: object
      properties:
        text:
          type: string
          description: Label text on the button
        web_app:
          $ref: '#/components/schemas/WebAppInfo'
          description: >-
            Description of the Web App that will be launched when the user
            presses the button<br/>The Web App will be able to switch back to
            the inline mode using the method switchInlineQuery inside the Web
            App.
        start_parameter:
          type: string
          description: >-
            Deep-linking parameter for the /start message sent to the bot when a
            user presses the button<br/>1-64 characters, only A-Z, a-z, 0-9, _
            and - are allowed<br/>.<br/>Example: An inline bot that sends
            YouTube videos can ask the user to connect the bot to their YouTube
            account to adapt search results accordingly<br/>To do this, it
            displays a &#39;Connect your YouTube account&#39; button above the
            results, or even before showing any<br/>The user presses the button,
            switches to a private chat with the bot and, in doing so, passes a
            start parameter that instructs the bot to return an OAuth
            link<br/>Once done, the bot can offer a switch_inline button so that
            the user can easily return to the chat where they wanted to use the
            bot&#39;s inline capabilities.
      required:
        - text
    InlineQueryResultVenue:
      type: object
      properties:
        type:
          type: string
          enum:
            - venue
          description: Type of the result, must be venue
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        latitude:
          type: number
          description: Latitude of the venue location in degrees
        longitude:
          type: number
          description: Longitude of the venue location in degrees
        title:
          type: string
          description: Title of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue if known
        foursquare_type:
          type: string
          description: >-
            Foursquare type of the venue, if known<br/>(For example,
            “arts_entertainment/default”, “arts_entertainment/aquarium” or
            “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue<br/>(See supported types.)
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the venue
        thumbnail_url:
          type: string
          description: Url of the thumbnail for the result
        thumbnail_width:
          type: number
          description: Thumbnail width
        thumbnail_height:
          type: number
          description: Thumbnail height
      required:
        - type
        - id
        - latitude
        - longitude
        - title
        - address
    InlineQueryResultVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the result, must be video
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        video_url:
          type: string
          description: A valid URL for the embedded video player or video file
        mime_type:
          type: string
          description: >-
            MIME type of the content of the video URL, “text/html” or
            “video/mp4”
        thumbnail_url:
          type: string
          description: URL of the thumbnail (JPEG only) for the video
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: >-
            Caption of the video to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the video caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        video_width:
          type: number
          description: Video width
        video_height:
          type: number
          description: Video height
        video_duration:
          type: number
          description: Video duration in seconds
        description:
          type: string
          description: Short description of the result
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: >-
            Content of the message to be sent instead of the video<br/>This
            field is required if InlineQueryResultVideo is used to send an
            HTML-page as a result (e.g., a YouTube video).
      required:
        - type
        - id
        - video_url
        - mime_type
        - thumbnail_url
        - title
    InlineQueryResultVoice:
      type: object
      properties:
        type:
          type: string
          enum:
            - voice
          description: Type of the result, must be voice
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        voice_url:
          type: string
          description: A valid URL for the voice recording
        title:
          type: string
          description: Recording title
        caption:
          type: string
          description: Caption, 0-1024 characters after entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the voice message caption<br/>See
            formatting options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        voice_duration:
          type: number
          description: Recording duration in seconds
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: Inline keyboard attached to the message
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
          description: Content of the message to be sent instead of the voice recording
      required:
        - type
        - id
        - voice_url
        - title
    InputContactMessageContent:
      type: object
      properties:
        phone_number:
          type: string
          description: Contact&#39;s phone number
        first_name:
          type: string
          description: Contact&#39;s first name
        last_name:
          type: string
          description: Contact&#39;s last name
        vcard:
          type: string
          description: >-
            Additional data about the contact in the form of a vCard, 0-2048
            bytes
      required:
        - phone_number
        - first_name
    InputFile:
      type: string
      format: binary
    InputInvoiceMessageContent:
      type: object
      properties:
        title:
          type: string
          description: Product name, 1-32 characters
        description:
          type: string
          description: Product description, 1-255 characters
        payload:
          type: string
          description: >-
            Bot-defined invoice payload, 1-128 bytes<br/>This will not be
            displayed to the user, use it for your internal processes.
        currency:
          type: string
          description: >-
            Three-letter ISO 4217 currency code, see more on currencies<br/>Pass
            “XTR” for payments in Telegram Stars.
        prices:
          type: array
          items:
            $ref: '#/components/schemas/LabeledPrice'
          description: >-
            Price breakdown, a JSON-serialized list of components
            (e.g<br/>product price, tax, discount, delivery cost, delivery tax,
            bonus, etc.)<br/>Must contain exactly one item for payments in
            Telegram Stars.
        provider_token:
          type: string
          description: >-
            Payment provider token, obtained via @BotFather<br/>Pass an empty
            string for payments in Telegram Stars.
        max_tip_amount:
          type: number
          description: >-
            The maximum accepted amount for tips in the smallest units of the
            currency (integer, not float/double)<br/>For example, for a maximum
            tip of US$ 1.45 pass max_tip_amount = 145<br/>See the exp parameter
            in currencies.json, it shows the number of digits past the decimal
            point for each currency (2 for the majority of
            currencies)<br/>Defaults to 0<br/>Not supported for payments in
            Telegram Stars.
        suggested_tip_amounts:
          type: array
          items:
            type: number
          description: >-
            A JSON-serialized array of suggested amounts of tip in the smallest
            units of the currency (integer, not float/double)<br/>At most 4
            suggested tip amounts can be specified<br/>The suggested tip amounts
            must be positive, passed in a strictly increased order and must not
            exceed max_tip_amount.
        provider_data:
          type: string
          description: >-
            A JSON-serialized object for data about the invoice, which will be
            shared with the payment provider<br/>A detailed description of the
            required fields should be provided by the payment provider.
        photo_url:
          type: string
          description: >-
            URL of the product photo for the invoice<br/>Can be a photo of the
            goods or a marketing image for a service.
        photo_size:
          type: number
          description: Photo size in bytes
        photo_width:
          type: number
          description: Photo width
        photo_height:
          type: number
          description: Photo height
        need_name:
          type: boolean
          description: >-
            Pass True if you require the user&#39;s full name to complete the
            order<br/>Ignored for payments in Telegram Stars.
        need_phone_number:
          type: boolean
          description: >-
            Pass True if you require the user&#39;s phone number to complete the
            order<br/>Ignored for payments in Telegram Stars.
        need_email:
          type: boolean
          description: >-
            Pass True if you require the user&#39;s email address to complete
            the order<br/>Ignored for payments in Telegram Stars.
        need_shipping_address:
          type: boolean
          description: >-
            Pass True if you require the user&#39;s shipping address to complete
            the order<br/>Ignored for payments in Telegram Stars.
        send_phone_number_to_provider:
          type: boolean
          description: >-
            Pass True if the user&#39;s phone number should be sent to the
            provider<br/>Ignored for payments in Telegram Stars.
        send_email_to_provider:
          type: boolean
          description: >-
            Pass True if the user&#39;s email address should be sent to the
            provider<br/>Ignored for payments in Telegram Stars.
        is_flexible:
          type: boolean
          description: >-
            Pass True if the final price depends on the shipping
            method<br/>Ignored for payments in Telegram Stars.
      required:
        - title
        - description
        - payload
        - currency
        - prices
    InputLocationMessageContent:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude of the location in degrees
        longitude:
          type: number
          description: Longitude of the location in degrees
        horizontal_accuracy:
          type: number
          description: >-
            The radius of uncertainty for the location, measured in meters;
            0-1500
        live_period:
          type: number
          description: >-
            Period in seconds during which the location can be updated, should
            be between 60 and 86400, or 0x7FFFFFFF for live locations that can
            be edited indefinitely.
        heading:
          type: number
          description: >-
            For live locations, a direction in which the user is moving, in
            degrees<br/>Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: number
          description: >-
            For live locations, a maximum distance for proximity alerts about
            approaching another chat member, in meters<br/>Must be between 1 and
            100000 if specified.
      required:
        - latitude
        - longitude
    InputMedia:
      oneOf:
        - $ref: '#/components/schemas/InputMediaAnimation'
        - $ref: '#/components/schemas/InputMediaDocument'
        - $ref: '#/components/schemas/InputMediaAudio'
        - $ref: '#/components/schemas/InputMediaPhoto'
        - $ref: '#/components/schemas/InputMediaVideo'
    InputMediaAnimation:
      type: object
      properties:
        type:
          type: string
          enum:
            - animation
          description: Type of the result, must be animation
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        thumbnail:
          type: string
          description: >-
            Thumbnail of the file sent; can be ignored if thumbnail generation
            for the file is supported server-side<br/>The thumbnail should be in
            JPEG format and less than 200 kB in size<br/>A thumbnail&#39;s width
            and height should not exceed 320<br/>Ignored if the file is not
            uploaded using multipart/form-data<br/>Thumbnails can&#39;t be
            reused and can be only uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded
            using multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        caption:
          type: string
          description: >-
            Caption of the animation to be sent, 0-1024 characters after
            entities parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the animation caption<br/>See
            formatting options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        width:
          type: number
          description: Animation width
        height:
          type: number
          description: Animation height
        duration:
          type: number
          description: Animation duration in seconds
        has_spoiler:
          type: boolean
          description: >-
            Pass True if the animation needs to be covered with a spoiler
            animation
      required:
        - type
        - media
    InputMediaAudio:
      type: object
      properties:
        type:
          type: string
          enum:
            - audio
          description: Type of the result, must be audio
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        thumbnail:
          type: string
          description: >-
            Thumbnail of the file sent; can be ignored if thumbnail generation
            for the file is supported server-side<br/>The thumbnail should be in
            JPEG format and less than 200 kB in size<br/>A thumbnail&#39;s width
            and height should not exceed 320<br/>Ignored if the file is not
            uploaded using multipart/form-data<br/>Thumbnails can&#39;t be
            reused and can be only uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded
            using multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        caption:
          type: string
          description: >-
            Caption of the audio to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the audio caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        duration:
          type: number
          description: Duration of the audio in seconds
        performer:
          type: string
          description: Performer of the audio
        title:
          type: string
          description: Title of the audio
      required:
        - type
        - media
    InputMediaDocument:
      type: object
      properties:
        type:
          type: string
          enum:
            - document
          description: Type of the result, must be document
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        thumbnail:
          type: string
          description: >-
            Thumbnail of the file sent; can be ignored if thumbnail generation
            for the file is supported server-side<br/>The thumbnail should be in
            JPEG format and less than 200 kB in size<br/>A thumbnail&#39;s width
            and height should not exceed 320<br/>Ignored if the file is not
            uploaded using multipart/form-data<br/>Thumbnails can&#39;t be
            reused and can be only uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded
            using multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        caption:
          type: string
          description: >-
            Caption of the document to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the document caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        disable_content_type_detection:
          type: boolean
          description: >-
            Disables automatic server-side content type detection for files
            uploaded using multipart/form-data<br/>Always True, if the document
            is sent as part of an album.
      required:
        - type
        - media
    InputMediaPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the result, must be photo
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        caption:
          type: string
          description: >-
            Caption of the photo to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the photo caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        has_spoiler:
          type: boolean
          description: Pass True if the photo needs to be covered with a spoiler animation
      required:
        - type
        - media
    InputMediaVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the result, must be video
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        thumbnail:
          type: string
          description: >-
            Thumbnail of the file sent; can be ignored if thumbnail generation
            for the file is supported server-side<br/>The thumbnail should be in
            JPEG format and less than 200 kB in size<br/>A thumbnail&#39;s width
            and height should not exceed 320<br/>Ignored if the file is not
            uploaded using multipart/form-data<br/>Thumbnails can&#39;t be
            reused and can be only uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded
            using multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        cover:
          type: string
          description: >-
            Cover for the video in the message<br/>Pass a file_id to send a file
            that exists on the Telegram servers (recommended), pass an HTTP URL
            for Telegram to get a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        start_timestamp:
          type: number
          description: Start timestamp for the video in the message
        caption:
          type: string
          description: >-
            Caption of the video to be sent, 0-1024 characters after entities
            parsing
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the video caption<br/>See formatting
            options for more details.
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in the caption, which can be
            specified instead of parse_mode
        show_caption_above_media:
          type: boolean
          description: Pass True, if the caption must be shown above the message media
        width:
          type: number
          description: Video width
        height:
          type: number
          description: Video height
        duration:
          type: number
          description: Video duration in seconds
        supports_streaming:
          type: boolean
          description: Pass True if the uploaded video is suitable for streaming
        has_spoiler:
          type: boolean
          description: Pass True if the video needs to be covered with a spoiler animation
      required:
        - type
        - media
    InputMessageContent:
      oneOf:
        - $ref: '#/components/schemas/InputTextMessageContent'
        - $ref: '#/components/schemas/InputLocationMessageContent'
        - $ref: '#/components/schemas/InputVenueMessageContent'
        - $ref: '#/components/schemas/InputContactMessageContent'
        - $ref: '#/components/schemas/InputInvoiceMessageContent'
    InputPaidMedia:
      oneOf:
        - $ref: '#/components/schemas/InputPaidMediaPhoto'
        - $ref: '#/components/schemas/InputPaidMediaVideo'
    InputPaidMediaPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the media, must be photo
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
      required:
        - type
        - media
    InputPaidMediaVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the media, must be video
        media:
          type: string
          description: >-
            File to send<br/>Pass a file_id to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL for Telegram to get
            a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        thumbnail:
          type: string
          description: >-
            Thumbnail of the file sent; can be ignored if thumbnail generation
            for the file is supported server-side<br/>The thumbnail should be in
            JPEG format and less than 200 kB in size<br/>A thumbnail&#39;s width
            and height should not exceed 320<br/>Ignored if the file is not
            uploaded using multipart/form-data<br/>Thumbnails can&#39;t be
            reused and can be only uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded
            using multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        cover:
          type: string
          description: >-
            Cover for the video in the message<br/>Pass a file_id to send a file
            that exists on the Telegram servers (recommended), pass an HTTP URL
            for Telegram to get a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new one using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>More
            information on Sending Files »
        start_timestamp:
          type: number
          description: Start timestamp for the video in the message
        width:
          type: number
          description: Video width
        height:
          type: number
          description: Video height
        duration:
          type: number
          description: Video duration in seconds
        supports_streaming:
          type: boolean
          description: Pass True if the uploaded video is suitable for streaming
      required:
        - type
        - media
    InputPollOption:
      type: object
      properties:
        text:
          type: string
          description: Option text, 1-100 characters
        text_parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the text<br/>See formatting options for
            more details<br/>Currently, only custom emoji entities are allowed
        text_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            A JSON-serialized list of special entities that appear in the poll
            option text<br/>It can be specified instead of text_parse_mode
      required:
        - text
    InputProfilePhoto:
      oneOf:
        - $ref: '#/components/schemas/InputProfilePhotoStatic'
        - $ref: '#/components/schemas/InputProfilePhotoAnimated'
    InputProfilePhotoAnimated:
      type: object
      properties:
        type:
          type: string
          enum:
            - animated
          description: Type of the profile photo, must be “animated”
        animation:
          type: string
          description: >-
            The animated profile photo<br/>Profile photos can&#39;t be reused
            and can only be uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the photo was uploaded using
            multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
        main_frame_timestamp:
          type: number
          description: >-
            Timestamp in seconds of the frame that will be used as the static
            profile photo<br/>Defaults to 0.0.
      required:
        - type
        - animation
    InputProfilePhotoStatic:
      type: object
      properties:
        type:
          type: string
          enum:
            - static
          description: Type of the profile photo, must be “static”
        photo:
          type: string
          description: >-
            The static profile photo<br/>Profile photos can&#39;t be reused and
            can only be uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the photo was uploaded using
            multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
      required:
        - type
        - photo
    InputSticker:
      type: object
      properties:
        sticker:
          type: string
          description: >-
            The added sticker<br/>Pass a file_id as a String to send a file that
            already exists on the Telegram servers, pass an HTTP URL as a String
            for Telegram to get a file from the Internet, or pass
            “attach://&lt;file_attach_name&gt;” to upload a new file using
            multipart/form-data under &lt;file_attach_name&gt; name<br/>Animated
            and video stickers can&#39;t be uploaded via HTTP URL<br/>More
            information on Sending Files »
        format:
          type: string
          enum:
            - static
            - animated
            - video
          description: >-
            Format of the added sticker, must be one of “static” for a .WEBP or
            .PNG image, “animated” for a .TGS animation, “video” for a .WEBM
            video
        emoji_list:
          type: array
          items:
            type: string
          description: List of 1-20 emoji associated with the sticker
        mask_position:
          $ref: '#/components/schemas/MaskPosition'
          description: >-
            Position where the mask should be placed on faces<br/>For “mask”
            stickers only.
        keywords:
          type: array
          items:
            type: string
          description: >-
            List of 0-20 search keywords for the sticker with total length of up
            to 64 characters<br/>For “regular” and “custom_emoji” stickers only.
      required:
        - sticker
        - format
        - emoji_list
    InputStoryContent:
      oneOf:
        - $ref: '#/components/schemas/InputStoryContentPhoto'
        - $ref: '#/components/schemas/InputStoryContentVideo'
    InputStoryContentPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the content, must be “photo”
        photo:
          type: string
          description: >-
            The photo to post as a story<br/>The photo must be of the size
            1080x1920 and must not exceed 10 MB<br/>The photo can&#39;t be
            reused and can only be uploaded as a new file, so you can pass
            “attach://&lt;file_attach_name&gt;” if the photo was uploaded using
            multipart/form-data under &lt;file_attach_name&gt;<br/>More
            information on Sending Files »
      required:
        - type
        - photo
    InputStoryContentVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the content, must be “video”
        video:
          type: string
          description: >-
            The video to post as a story<br/>The video must be of the size
            720x1280, streamable, encoded with H.265 codec, with key frames
            added each second in the MPEG4 format, and must not exceed 30
            MB<br/>The video can&#39;t be reused and can only be uploaded as a
            new file, so you can pass “attach://&lt;file_attach_name&gt;” if the
            video was uploaded using multipart/form-data under
            &lt;file_attach_name&gt;<br/>More information on Sending Files »
        duration:
          type: number
          description: Precise duration of the video in seconds; 0-60
        cover_frame_timestamp:
          type: number
          description: >-
            Timestamp in seconds of the frame that will be used as the static
            cover for the story<br/>Defaults to 0.0.
        is_animation:
          type: boolean
          description: Pass True if the video has no sound
      required:
        - type
        - video
    InputTextMessageContent:
      type: object
      properties:
        message_text:
          type: string
          description: Text of the message to be sent, 1-4096 characters
        parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the message text<br/>See formatting
            options for more details.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            List of special entities that appear in message text, which can be
            specified instead of parse_mode
        link_preview_options:
          $ref: '#/components/schemas/LinkPreviewOptions'
          description: Link preview generation options for the message
      required:
        - message_text
    InputVenueMessageContent:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude of the venue in degrees
        longitude:
          type: number
          description: Longitude of the venue in degrees
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue, if known
        foursquare_type:
          type: string
          description: >-
            Foursquare type of the venue, if known<br/>(For example,
            “arts_entertainment/default”, “arts_entertainment/aquarium” or
            “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue<br/>(See supported types.)
      required:
        - latitude
        - longitude
        - title
        - address
    Invoice:
      type: object
      properties:
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        start_parameter:
          type: string
          description: >-
            Unique bot deep-linking parameter that can be used to generate this
            invoice
        currency:
          type: string
          description: >-
            Three-letter ISO 4217 currency code, or “XTR” for payments in
            Telegram Stars
        total_amount:
          type: number
          description: >-
            Total price in the smallest units of the currency (integer, not
            float/double)<br/>For example, for a price of US$ 1.45 pass amount =
            145<br/>See the exp parameter in currencies.json, it shows the
            number of digits past the decimal point for each currency (2 for the
            majority of currencies).
      required:
        - title
        - description
        - start_parameter
        - currency
        - total_amount
    KeyboardButton:
      type: object
      properties:
        text:
          type: string
          description: >-
            Text of the button<br/>If none of the optional fields are used, it
            will be sent as a message when the button is pressed
        request_users:
          $ref: '#/components/schemas/KeyboardButtonRequestUsers'
          description: >-
            Identifiers of selected users will be sent to the bot in a
            “users_shared” service message<br/>Available in private chats only.
        request_chat:
          $ref: '#/components/schemas/KeyboardButtonRequestChat'
          description: >-
            Tapping on a chat will send its identifier to the bot in a
            “chat_shared” service message<br/>Available in private chats only.
        request_contact:
          type: boolean
          description: >-
            If True, the user&#39;s phone number will be sent as a contact when
            the button is pressed<br/>Available in private chats only.
        request_location:
          type: boolean
          description: >-
            If True, the user&#39;s current location will be sent when the
            button is pressed<br/>Available in private chats only.
        request_poll:
          $ref: '#/components/schemas/KeyboardButtonPollType'
          description: >-
            If specified, the user will be asked to create a poll and send it to
            the bot when the button is pressed<br/>Available in private chats
            only.
        web_app:
          $ref: '#/components/schemas/WebAppInfo'
          description: >-
            If specified, the described Web App will be launched when the button
            is pressed<br/>The Web App will be able to send a “web_app_data”
            service message<br/>Available in private chats only.
      required:
        - text
    KeyboardButtonPollType:
      type: object
      properties:
        type:
          type: string
          description: >-
            If quiz is passed, the user will be allowed to create only polls in
            the quiz mode<br/>If regular is passed, only regular polls will be
            allowed<br/>Otherwise, the user will be allowed to create a poll of
            any type.
    KeyboardButtonRequestChat:
      type: object
      properties:
        request_id:
          type: number
          description: >-
            Signed 32-bit identifier of the request, which will be received back
            in the ChatShared object<br/>Must be unique within the message
        chat_is_channel:
          type: boolean
          description: >-
            Pass True to request a channel chat, pass False to request a group
            or a supergroup chat.
        chat_is_forum:
          type: boolean
          description: >-
            Pass True to request a forum supergroup, pass False to request a
            non-forum chat<br/>If not specified, no additional restrictions are
            applied.
        chat_has_username:
          type: boolean
          description: >-
            Pass True to request a supergroup or a channel with a username, pass
            False to request a chat without a username<br/>If not specified, no
            additional restrictions are applied.
        chat_is_created:
          type: boolean
          description: >-
            Pass True to request a chat owned by the user<br/>Otherwise, no
            additional restrictions are applied.
        user_administrator_rights:
          $ref: '#/components/schemas/ChatAdministratorRights'
          description: >-
            A JSON-serialized object listing the required administrator rights
            of the user in the chat<br/>The rights must be a superset of
            bot_administrator_rights<br/>If not specified, no additional
            restrictions are applied.
        bot_administrator_rights:
          $ref: '#/components/schemas/ChatAdministratorRights'
          description: >-
            A JSON-serialized object listing the required administrator rights
            of the bot in the chat<br/>The rights must be a subset of
            user_administrator_rights<br/>If not specified, no additional
            restrictions are applied.
        bot_is_member:
          type: boolean
          description: >-
            Pass True to request a chat with the bot as a member<br/>Otherwise,
            no additional restrictions are applied.
        request_title:
          type: boolean
          description: Pass True to request the chat&#39;s title
        request_username:
          type: boolean
          description: Pass True to request the chat&#39;s username
        request_photo:
          type: boolean
          description: Pass True to request the chat&#39;s photo
      required:
        - request_id
        - chat_is_channel
    KeyboardButtonRequestUsers:
      type: object
      properties:
        request_id:
          type: number
          description: >-
            Signed 32-bit identifier of the request that will be received back
            in the UsersShared object<br/>Must be unique within the message
        user_is_bot:
          type: boolean
          description: >-
            Pass True to request bots, pass False to request regular
            users<br/>If not specified, no additional restrictions are applied.
        user_is_premium:
          type: boolean
          description: >-
            Pass True to request premium users, pass False to request
            non-premium users<br/>If not specified, no additional restrictions
            are applied.
        max_quantity:
          type: number
          description: The maximum number of users to be selected; 1-10<br/>Defaults to 1.
        request_name:
          type: boolean
          description: Pass True to request the users&#39; first and last names
        request_username:
          type: boolean
          description: Pass True to request the users&#39; usernames
        request_photo:
          type: boolean
          description: Pass True to request the users&#39; photos
      required:
        - request_id
    LabeledPrice:
      type: object
      properties:
        label:
          type: string
          description: Portion label
        amount:
          type: number
          description: >-
            Price of the product in the smallest units of the currency (integer,
            not float/double)<br/>For example, for a price of US$ 1.45 pass
            amount = 145<br/>See the exp parameter in currencies.json, it shows
            the number of digits past the decimal point for each currency (2 for
            the majority of currencies).
      required:
        - label
        - amount
    LinkPreviewOptions:
      type: object
      properties:
        is_disabled:
          type: boolean
          description: True, if the link preview is disabled
        url:
          type: string
          description: >-
            URL to use for the link preview<br/>If empty, then the first URL
            found in the message text will be used
        prefer_small_media:
          type: boolean
          description: >-
            True, if the media in the link preview is supposed to be shrunk;
            ignored if the URL isn&#39;t explicitly specified or media size
            change isn&#39;t supported for the preview
        prefer_large_media:
          type: boolean
          description: >-
            True, if the media in the link preview is supposed to be enlarged;
            ignored if the URL isn&#39;t explicitly specified or media size
            change isn&#39;t supported for the preview
        show_above_text:
          type: boolean
          description: >-
            True, if the link preview must be shown above the message text;
            otherwise, the link preview will be shown below the message text
    Location:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude as defined by the sender
        longitude:
          type: number
          description: Longitude as defined by the sender
        horizontal_accuracy:
          type: number
          description: >-
            The radius of uncertainty for the location, measured in meters;
            0-1500
        live_period:
          type: number
          description: >-
            Time relative to the message sending date, during which the location
            can be updated; in seconds<br/>For active live locations only.
        heading:
          type: number
          description: >-
            The direction in which user is moving, in degrees; 1-360<br/>For
            active live locations only.
        proximity_alert_radius:
          type: number
          description: >-
            The maximum distance for proximity alerts about approaching another
            chat member, in meters<br/>For sent live locations only.
      required:
        - latitude
        - longitude
    LocationAddress:
      type: object
      properties:
        country_code:
          type: string
          description: >-
            The two-letter ISO 3166-1 alpha-2 country code of the country where
            the location is located
        state:
          type: string
          description: State of the location
        city:
          type: string
          description: City of the location
        street:
          type: string
          description: Street address of the location
      required:
        - country_code
    LoginUrl:
      type: object
      properties:
        url:
          type: string
          description: >-
            An HTTPS URL to be opened with user authorization data added to the
            query string when the button is pressed<br/>If the user refuses to
            provide authorization data, the original URL without information
            about the user will be opened<br/>The data added is the same as
            described in Receiving authorization data<br/>.<br/>NOTE: You must
            always check the hash of the received data to verify the
            authentication and the integrity of the data as described in
            Checking authorization.
        forward_text:
          type: string
          description: New text of the button in forwarded messages.
        bot_username:
          type: string
          description: >-
            Username of a bot, which will be used for user authorization<br/>See
            Setting up a bot for more details<br/>If not specified, the current
            bot&#39;s username will be assumed<br/>The url&#39;s domain must be
            the same as the domain linked with the bot<br/>See Linking your
            domain to the bot for more details.
        request_write_access:
          type: boolean
          description: >-
            Pass True to request the permission for your bot to send messages to
            the user.
      required:
        - url
    MaskPosition:
      type: object
      properties:
        point:
          type: string
          description: >-
            The part of the face relative to which the mask should be
            placed<br/>One of “forehead”, “eyes”, “mouth”, or “chin”.
        x_shift:
          type: number
          description: >-
            Shift by X-axis measured in widths of the mask scaled to the face
            size, from left to right<br/>For example, choosing -1.0 will place
            mask just to the left of the default mask position.
        y_shift:
          type: number
          description: >-
            Shift by Y-axis measured in heights of the mask scaled to the face
            size, from top to bottom<br/>For example, 1.0 will place the mask
            just below the default mask position.
        scale:
          type: number
          description: Mask scaling coefficient<br/>For example, 2.0 means double size.
      required:
        - point
        - x_shift
        - y_shift
        - scale
    MaybeInaccessibleMessage:
      oneOf:
        - $ref: '#/components/schemas/Message'
        - $ref: '#/components/schemas/InaccessibleMessage'
    MenuButton:
      oneOf:
        - $ref: '#/components/schemas/MenuButtonCommands'
        - $ref: '#/components/schemas/MenuButtonWebApp'
        - $ref: '#/components/schemas/MenuButtonDefault'
    MenuButtonCommands:
      type: object
      properties:
        type:
          type: string
          enum:
            - commands
          description: Type of the button, must be commands
      required:
        - type
    MenuButtonDefault:
      type: object
      properties:
        type:
          type: string
          enum:
            - default
          description: Type of the button, must be default
      required:
        - type
    MenuButtonWebApp:
      type: object
      properties:
        type:
          type: string
          enum:
            - web_app
          description: Type of the button, must be web_app
        text:
          type: string
          description: Text on the button
        web_app:
          $ref: '#/components/schemas/WebAppInfo'
          description: >-
            Description of the Web App that will be launched when the user
            presses the button<br/>The Web App will be able to send an arbitrary
            message on behalf of the user using the method
            answerWebAppQuery<br/>Alternatively, a t.me link to a Web App of the
            bot can be specified in the object instead of the Web App&#39;s URL,
            in which case the Web App will be opened as if the user pressed the
            link.
      required:
        - type
        - text
        - web_app
    Message:
      type: object
      properties:
        message_id:
          type: number
          description: >-
            Unique message identifier inside this chat<br/>In specific instances
            (e.g., message containing a video sent to a big chat), the server
            might automatically schedule a message instead of sending it
            immediately<br/>In such cases, this field will be 0 and the relevant
            message will be unusable until it is actually sent
        date:
          type: number
          description: >-
            Date the message was sent in Unix time<br/>It is always a positive
            number, representing a valid date.
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat the message belongs to
        message_thread_id:
          type: number
          description: >-
            Unique identifier of a message thread to which the message belongs;
            for supergroups only
        from:
          $ref: '#/components/schemas/User'
          description: >-
            Sender of the message; may be empty for messages sent to
            channels<br/>For backward compatibility, if the message was sent on
            behalf of a chat, the field contains a fake sender user in
            non-channel chats
        sender_chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            Sender of the message when sent on behalf of a chat<br/>For example,
            the supergroup itself for messages sent by its anonymous
            administrators or a linked channel for messages automatically
            forwarded to the channel&#39;s discussion group<br/>For backward
            compatibility, if the message was sent on behalf of a chat, the
            field from contains a fake sender user in non-channel chats.
        sender_boost_count:
          type: number
          description: >-
            If the sender of the message boosted the chat, the number of boosts
            added by the user
        sender_business_bot:
          $ref: '#/components/schemas/User'
          description: >-
            The bot that actually sent the message on behalf of the business
            account<br/>Available only for outgoing messages sent on behalf of
            the connected business account.
        business_connection_id:
          type: string
          description: >-
            Unique identifier of the business connection from which the message
            was received<br/>If non-empty, the message belongs to a chat of the
            corresponding business account that is independent from any
            potential bot chat which might share the same identifier.
        forward_origin:
          $ref: '#/components/schemas/MessageOrigin'
          description: Information about the original message for forwarded messages
        is_topic_message:
          type: boolean
          description: True, if the message is sent to a forum topic
        is_automatic_forward:
          type: boolean
          description: >-
            True, if the message is a channel post that was automatically
            forwarded to the connected discussion group
        reply_to_message:
          $ref: '#/components/schemas/Message'
          description: >-
            For replies in the same chat and message thread, the original
            message<br/>Note that the Message object in this field will not
            contain further reply_to_message fields even if it itself is a
            reply.
        external_reply:
          $ref: '#/components/schemas/ExternalReplyInfo'
          description: >-
            Information about the message that is being replied to, which may
            come from another chat or forum topic
        quote:
          $ref: '#/components/schemas/TextQuote'
          description: >-
            For replies that quote part of the original message, the quoted part
            of the message
        reply_to_story:
          $ref: '#/components/schemas/Story'
          description: For replies to a story, the original story
        via_bot:
          $ref: '#/components/schemas/User'
          description: Bot through which the message was sent
        edit_date:
          type: number
          description: Date the message was last edited in Unix time
        has_protected_content:
          type: boolean
          description: True, if the message can&#39;t be forwarded
        is_from_offline:
          type: boolean
          description: >-
            True, if the message was sent by an implicit action, for example, as
            an away or a greeting business message, or as a scheduled message
        media_group_id:
          type: string
          description: >-
            The unique identifier of a media message group this message belongs
            to
        author_signature:
          type: string
          description: >-
            Signature of the post author for messages in channels, or the custom
            title of an anonymous group administrator
        paid_star_count:
          type: number
          description: >-
            The number of Telegram Stars that were paid by the sender of the
            message to send it
        text:
          type: string
          description: For text messages, the actual UTF-8 text of the message
        entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            For text messages, special entities like usernames, URLs, bot
            commands, etc<br/>that appear in the text
        link_preview_options:
          $ref: '#/components/schemas/LinkPreviewOptions'
          description: >-
            Options used for link preview generation for the message, if it is a
            text message and link preview options were changed
        effect_id:
          type: string
          description: Unique identifier of the message effect added to the message
        animation:
          $ref: '#/components/schemas/Animation'
          description: >-
            Message is an animation, information about the animation<br/>For
            backward compatibility, when this field is set, the document field
            will also be set
        audio:
          $ref: '#/components/schemas/Audio'
          description: Message is an audio file, information about the file
        document:
          $ref: '#/components/schemas/Document'
          description: Message is a general file, information about the file
        paid_media:
          $ref: '#/components/schemas/PaidMediaInfo'
          description: Message contains paid media; information about the paid media
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: Message is a photo, available sizes of the photo
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: Message is a sticker, information about the sticker
        story:
          $ref: '#/components/schemas/Story'
          description: Message is a forwarded story
        video:
          $ref: '#/components/schemas/Video'
          description: Message is a video, information about the video
        video_note:
          $ref: '#/components/schemas/VideoNote'
          description: Message is a video note, information about the video message
        voice:
          $ref: '#/components/schemas/Voice'
          description: Message is a voice message, information about the file
        caption:
          type: string
          description: >-
            Caption for the animation, audio, document, paid media, photo, video
            or voice
        caption_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            For messages with a caption, special entities like usernames, URLs,
            bot commands, etc<br/>that appear in the caption
        show_caption_above_media:
          type: boolean
          description: True, if the caption must be shown above the message media
        has_media_spoiler:
          type: boolean
          description: True, if the message media is covered by a spoiler animation
        contact:
          $ref: '#/components/schemas/Contact'
          description: Message is a shared contact, information about the contact
        dice:
          $ref: '#/components/schemas/Dice'
          description: Message is a dice with random value
        game:
          $ref: '#/components/schemas/Game'
          description: Message is a game, information about the game<br/>More about games »
        poll:
          $ref: '#/components/schemas/Poll'
          description: Message is a native poll, information about the poll
        venue:
          $ref: '#/components/schemas/Venue'
          description: >-
            Message is a venue, information about the venue<br/>For backward
            compatibility, when this field is set, the location field will also
            be set
        location:
          $ref: '#/components/schemas/Location'
          description: Message is a shared location, information about the location
        new_chat_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: >-
            New members that were added to the group or supergroup and
            information about them (the bot itself may be one of these members)
        left_chat_member:
          $ref: '#/components/schemas/User'
          description: >-
            A member was removed from the group, information about them (this
            member may be the bot itself)
        new_chat_title:
          type: string
          description: A chat title was changed to this value
        new_chat_photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: A chat photo was change to this value
        delete_chat_photo:
          type: boolean
          description: 'Service message: the chat photo was deleted'
        group_chat_created:
          type: boolean
          description: 'Service message: the group has been created'
        supergroup_chat_created:
          type: boolean
          description: >-
            Service message: the supergroup has been created<br/>This field
            can&#39;t be received in a message coming through updates, because
            bot can&#39;t be a member of a supergroup when it is created<br/>It
            can only be found in reply_to_message if someone replies to a very
            first message in a directly created supergroup.
        channel_chat_created:
          type: boolean
          description: >-
            Service message: the channel has been created<br/>This field
            can&#39;t be received in a message coming through updates, because
            bot can&#39;t be a member of a channel when it is created<br/>It can
            only be found in reply_to_message if someone replies to a very first
            message in a channel.
        message_auto_delete_timer_changed:
          $ref: '#/components/schemas/MessageAutoDeleteTimerChanged'
          description: 'Service message: auto-delete timer settings changed in the chat'
        migrate_to_chat_id:
          type: number
          description: >-
            The group has been migrated to a supergroup with the specified
            identifier<br/>This number may have more than 32 significant bits
            and some programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this identifier.
        migrate_from_chat_id:
          type: number
          description: >-
            The supergroup has been migrated from a group with the specified
            identifier<br/>This number may have more than 32 significant bits
            and some programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this identifier.
        pinned_message:
          $ref: '#/components/schemas/MaybeInaccessibleMessage'
          description: >-
            Specified message was pinned<br/>Note that the Message object in
            this field will not contain further reply_to_message fields even if
            it itself is a reply.
        invoice:
          $ref: '#/components/schemas/Invoice'
          description: >-
            Message is an invoice for a payment, information about the
            invoice<br/>More about payments »
        successful_payment:
          $ref: '#/components/schemas/SuccessfulPayment'
          description: >-
            Message is a service message about a successful payment, information
            about the payment<br/>More about payments »
        refunded_payment:
          $ref: '#/components/schemas/RefundedPayment'
          description: >-
            Message is a service message about a refunded payment, information
            about the payment<br/>More about payments »
        users_shared:
          $ref: '#/components/schemas/UsersShared'
          description: 'Service message: users were shared with the bot'
        chat_shared:
          $ref: '#/components/schemas/ChatShared'
          description: 'Service message: a chat was shared with the bot'
        gift:
          $ref: '#/components/schemas/GiftInfo'
          description: 'Service message: a regular gift was sent or received'
        unique_gift:
          $ref: '#/components/schemas/UniqueGiftInfo'
          description: 'Service message: a unique gift was sent or received'
        connected_website:
          type: string
          description: >-
            The domain name of the website on which the user has logged
            in<br/>More about Telegram Login »
        write_access_allowed:
          $ref: '#/components/schemas/WriteAccessAllowed'
          description: >-
            Service message: the user allowed the bot to write messages after
            adding it to the attachment or side menu, launching a Web App from a
            link, or accepting an explicit request from a Web App sent by the
            method requestWriteAccess
        passport_data:
          $ref: '#/components/schemas/PassportData'
          description: Telegram Passport data
        proximity_alert_triggered:
          $ref: '#/components/schemas/ProximityAlertTriggered'
          description: >-
            Service message<br/>A user in the chat triggered another user&#39;s
            proximity alert while sharing Live Location.
        boost_added:
          $ref: '#/components/schemas/ChatBoostAdded'
          description: 'Service message: user boosted the chat'
        chat_background_set:
          $ref: '#/components/schemas/ChatBackground'
          description: 'Service message: chat background set'
        forum_topic_created:
          $ref: '#/components/schemas/ForumTopicCreated'
          description: 'Service message: forum topic created'
        forum_topic_edited:
          $ref: '#/components/schemas/ForumTopicEdited'
          description: 'Service message: forum topic edited'
        forum_topic_closed:
          $ref: '#/components/schemas/ForumTopicClosed'
          description: 'Service message: forum topic closed'
        forum_topic_reopened:
          $ref: '#/components/schemas/ForumTopicReopened'
          description: 'Service message: forum topic reopened'
        general_forum_topic_hidden:
          $ref: '#/components/schemas/GeneralForumTopicHidden'
          description: 'Service message: the &#39;General&#39; forum topic hidden'
        general_forum_topic_unhidden:
          $ref: '#/components/schemas/GeneralForumTopicUnhidden'
          description: 'Service message: the &#39;General&#39; forum topic unhidden'
        giveaway_created:
          $ref: '#/components/schemas/GiveawayCreated'
          description: 'Service message: a scheduled giveaway was created'
        giveaway:
          $ref: '#/components/schemas/Giveaway'
          description: The message is a scheduled giveaway message
        giveaway_winners:
          $ref: '#/components/schemas/GiveawayWinners'
          description: A giveaway with public winners was completed
        giveaway_completed:
          $ref: '#/components/schemas/GiveawayCompleted'
          description: 'Service message: a giveaway without public winners was completed'
        paid_message_price_changed:
          $ref: '#/components/schemas/PaidMessagePriceChanged'
          description: 'Service message: the price for paid messages has changed in the chat'
        video_chat_scheduled:
          $ref: '#/components/schemas/VideoChatScheduled'
          description: 'Service message: video chat scheduled'
        video_chat_started:
          $ref: '#/components/schemas/VideoChatStarted'
          description: 'Service message: video chat started'
        video_chat_ended:
          $ref: '#/components/schemas/VideoChatEnded'
          description: 'Service message: video chat ended'
        video_chat_participants_invited:
          $ref: '#/components/schemas/VideoChatParticipantsInvited'
          description: 'Service message: new participants invited to a video chat'
        web_app_data:
          $ref: '#/components/schemas/WebAppData'
          description: 'Service message: data sent by a Web App'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
          description: >-
            Inline keyboard attached to the message<br/>login_url buttons are
            represented as ordinary url buttons.
      required:
        - message_id
        - date
        - chat
    MessageAutoDeleteTimerChanged:
      type: object
      properties:
        message_auto_delete_time:
          type: number
          description: New auto-delete time for messages in the chat; in seconds
      required:
        - message_auto_delete_time
    MessageEntity:
      type: object
      properties:
        type:
          type: string
          enum:
            - mention
            - hashtag
            - cashtag
            - bot_command
            - url
            - email
            - phone_number
            - bold
            - italic
            - underline
            - strikethrough
            - spoiler
            - blockquote
            - expandable_blockquote
            - code
            - pre
            - text_link
            - text_mention
            - custom_emoji
          description: >-
            Type of the entity<br/>Currently, can be “mention” (@username),
            “hashtag” (#hashtag or #hashtag@chatusername), “cashtag” ($USD or
            $USD@chatusername), “bot_command” (/start@jobs_bot), “url”
            (https://telegram.org), “email” (do-not-reply@telegram.org),
            “phone_number” (+1-212-555-0123), “bold” (bold text), “italic”
            (italic text), “underline” (underlined text), “strikethrough”
            (strikethrough text), “spoiler” (spoiler message), “blockquote”
            (block quotation), “expandable_blockquote” (collapsed-by-default
            block quotation), “code” (monowidth string), “pre” (monowidth
            block), “text_link” (for clickable text URLs), “text_mention” (for
            users without usernames), “custom_emoji” (for inline custom emoji
            stickers)
        offset:
          type: number
          description: Offset in UTF-16 code units to the start of the entity
        length:
          type: number
          description: Length of the entity in UTF-16 code units
        url:
          type: string
          description: >-
            For “text_link” only, URL that will be opened after user taps on the
            text
        user:
          $ref: '#/components/schemas/User'
          description: For “text_mention” only, the mentioned user
        language:
          type: string
          description: For “pre” only, the programming language of the entity text
        custom_emoji_id:
          type: string
          description: >-
            For “custom_emoji” only, unique identifier of the custom
            emoji<br/>Use getCustomEmojiStickers to get full information about
            the sticker
      required:
        - type
        - offset
        - length
    MessageId:
      type: object
      properties:
        message_id:
          type: number
          description: >-
            Unique message identifier<br/>In specific instances (e.g., message
            containing a video sent to a big chat), the server might
            automatically schedule a message instead of sending it
            immediately<br/>In such cases, this field will be 0 and the relevant
            message will be unusable until it is actually sent
      required:
        - message_id
    MessageOrigin:
      oneOf:
        - $ref: '#/components/schemas/MessageOriginUser'
        - $ref: '#/components/schemas/MessageOriginHiddenUser'
        - $ref: '#/components/schemas/MessageOriginChat'
        - $ref: '#/components/schemas/MessageOriginChannel'
    MessageOriginChannel:
      type: object
      properties:
        type:
          type: string
          enum:
            - channel
          description: Type of the message origin, always “channel”
        date:
          type: number
          description: Date the message was sent originally in Unix time
        chat:
          $ref: '#/components/schemas/Chat'
          description: Channel chat to which the message was originally sent
        message_id:
          type: number
          description: Unique message identifier inside the chat
        author_signature:
          type: string
          description: Signature of the original post author
      required:
        - type
        - date
        - chat
        - message_id
    MessageOriginChat:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat
          description: Type of the message origin, always “chat”
        date:
          type: number
          description: Date the message was sent originally in Unix time
        sender_chat:
          $ref: '#/components/schemas/Chat'
          description: Chat that sent the message originally
        author_signature:
          type: string
          description: >-
            For messages originally sent by an anonymous chat administrator,
            original message author signature
      required:
        - type
        - date
        - sender_chat
    MessageOriginHiddenUser:
      type: object
      properties:
        type:
          type: string
          enum:
            - hidden_user
          description: Type of the message origin, always “hidden_user”
        date:
          type: number
          description: Date the message was sent originally in Unix time
        sender_user_name:
          type: string
          description: Name of the user that sent the message originally
      required:
        - type
        - date
        - sender_user_name
    MessageOriginUser:
      type: object
      properties:
        type:
          type: string
          enum:
            - user
          description: Type of the message origin, always “user”
        date:
          type: number
          description: Date the message was sent originally in Unix time
        sender_user:
          $ref: '#/components/schemas/User'
          description: User that sent the message originally
      required:
        - type
        - date
        - sender_user
    MessageReactionCountUpdated:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: The chat containing the message
        message_id:
          type: number
          description: Unique message identifier inside the chat
        date:
          type: number
          description: Date of the change in Unix time
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionCount'
          description: List of reactions that are present on the message
      required:
        - chat
        - message_id
        - date
        - reactions
    MessageReactionUpdated:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: The chat containing the message the user reacted to
        message_id:
          type: number
          description: Unique identifier of the message inside the chat
        date:
          type: number
          description: Date of the change in Unix time
        old_reaction:
          type: array
          items:
            $ref: '#/components/schemas/ReactionType'
          description: Previous list of reaction types that were set by the user
        new_reaction:
          type: array
          items:
            $ref: '#/components/schemas/ReactionType'
          description: New list of reaction types that have been set by the user
        user:
          $ref: '#/components/schemas/User'
          description: The user that changed the reaction, if the user isn&#39;t anonymous
        actor_chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            The chat on behalf of which the reaction was changed, if the user is
            anonymous
      required:
        - chat
        - message_id
        - date
        - old_reaction
        - new_reaction
    OrderInfo:
      type: object
      properties:
        name:
          type: string
          description: User name
        phone_number:
          type: string
          description: User&#39;s phone number
        email:
          type: string
          description: User email
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
          description: User shipping address
    OwnedGift:
      oneOf:
        - $ref: '#/components/schemas/OwnedGiftRegular'
        - $ref: '#/components/schemas/OwnedGiftUnique'
    OwnedGiftRegular:
      type: object
      properties:
        type:
          type: string
          enum:
            - regular
          description: Type of the gift, always “regular”
        gift:
          $ref: '#/components/schemas/Gift'
          description: Information about the regular gift
        send_date:
          type: number
          description: Date the gift was sent in Unix time
        owned_gift_id:
          type: string
          description: >-
            Unique identifier of the gift for the bot; for gifts received on
            behalf of business accounts only
        sender_user:
          $ref: '#/components/schemas/User'
          description: Sender of the gift if it is a known user
        text:
          type: string
          description: Text of the message that was added to the gift
        entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: Special entities that appear in the text
        is_private:
          type: boolean
          description: >-
            True, if the sender and gift text are shown only to the gift
            receiver; otherwise, everyone will be able to see them
        is_saved:
          type: boolean
          description: >-
            True, if the gift is displayed on the account&#39;s profile page;
            for gifts received on behalf of business accounts only
        can_be_upgraded:
          type: boolean
          description: >-
            True, if the gift can be upgraded to a unique gift; for gifts
            received on behalf of business accounts only
        was_refunded:
          type: boolean
          description: True, if the gift was refunded and isn&#39;t available anymore
        convert_star_count:
          type: number
          description: >-
            Number of Telegram Stars that can be claimed by the receiver instead
            of the gift; omitted if the gift cannot be converted to Telegram
            Stars
        prepaid_upgrade_star_count:
          type: number
          description: >-
            Number of Telegram Stars that were paid by the sender for the
            ability to upgrade the gift
      required:
        - type
        - gift
        - send_date
    OwnedGifts:
      type: object
      properties:
        total_count:
          type: number
          description: The total number of gifts owned by the user or the chat
        gifts:
          type: array
          items:
            $ref: '#/components/schemas/OwnedGift'
          description: The list of gifts
        next_offset:
          type: string
          description: >-
            Offset for the next request<br/>If empty, then there are no more
            results
      required:
        - total_count
        - gifts
    OwnedGiftUnique:
      type: object
      properties:
        type:
          type: string
          enum:
            - unique
          description: Type of the gift, always “unique”
        gift:
          $ref: '#/components/schemas/UniqueGift'
          description: Information about the unique gift
        send_date:
          type: number
          description: Date the gift was sent in Unix time
        owned_gift_id:
          type: string
          description: >-
            Unique identifier of the received gift for the bot; for gifts
            received on behalf of business accounts only
        sender_user:
          $ref: '#/components/schemas/User'
          description: Sender of the gift if it is a known user
        is_saved:
          type: boolean
          description: >-
            True, if the gift is displayed on the account&#39;s profile page;
            for gifts received on behalf of business accounts only
        can_be_transferred:
          type: boolean
          description: >-
            True, if the gift can be transferred to another owner; for gifts
            received on behalf of business accounts only
        transfer_star_count:
          type: number
          description: >-
            Number of Telegram Stars that must be paid to transfer the gift;
            omitted if the bot cannot transfer the gift
      required:
        - type
        - gift
        - send_date
    PaidMedia:
      oneOf:
        - $ref: '#/components/schemas/PaidMediaPreview'
        - $ref: '#/components/schemas/PaidMediaPhoto'
        - $ref: '#/components/schemas/PaidMediaVideo'
    PaidMediaInfo:
      type: object
      properties:
        star_count:
          type: number
          description: >-
            The number of Telegram Stars that must be paid to buy access to the
            media
        paid_media:
          type: array
          items:
            $ref: '#/components/schemas/PaidMedia'
          description: Information about the paid media
      required:
        - star_count
        - paid_media
    PaidMediaPhoto:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
          description: Type of the paid media, always “photo”
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: The photo
      required:
        - type
        - photo
    PaidMediaPreview:
      type: object
      properties:
        type:
          type: string
          enum:
            - preview
          description: Type of the paid media, always “preview”
        width:
          type: number
          description: Media width as defined by the sender
        height:
          type: number
          description: Media height as defined by the sender
        duration:
          type: number
          description: Duration of the media in seconds as defined by the sender
      required:
        - type
    PaidMediaPurchased:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/User'
          description: User who purchased the media
        paid_media_payload:
          type: string
          description: Bot-specified paid media payload
      required:
        - from
        - paid_media_payload
    PaidMediaVideo:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
          description: Type of the paid media, always “video”
        video:
          $ref: '#/components/schemas/Video'
          description: The video
      required:
        - type
        - video
    PaidMessagePriceChanged:
      type: object
      properties:
        paid_message_star_count:
          type: number
          description: >-
            The new number of Telegram Stars that must be paid by
            non-administrator users of the supergroup chat for each sent message
      required:
        - paid_message_star_count
    PassportData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EncryptedPassportElement'
          description: >-
            Array with information about documents and other Telegram Passport
            elements that was shared with the bot
        credentials:
          $ref: '#/components/schemas/EncryptedCredentials'
          description: Encrypted credentials required to decrypt the data
      required:
        - data
        - credentials
    PassportElementError:
      oneOf:
        - $ref: '#/components/schemas/PassportElementErrorDataField'
        - $ref: '#/components/schemas/PassportElementErrorFrontSide'
        - $ref: '#/components/schemas/PassportElementErrorReverseSide'
        - $ref: '#/components/schemas/PassportElementErrorSelfie'
        - $ref: '#/components/schemas/PassportElementErrorFile'
        - $ref: '#/components/schemas/PassportElementErrorFiles'
        - $ref: '#/components/schemas/PassportElementErrorTranslationFile'
        - $ref: '#/components/schemas/PassportElementErrorTranslationFiles'
        - $ref: '#/components/schemas/PassportElementErrorUnspecified'
    PassportElementErrorDataField:
      type: object
      properties:
        source:
          type: string
          enum:
            - data
          description: Error source, must be data
        type:
          type: string
          enum:
            - personal_details
            - passport
            - driver_license
            - identity_card
            - internal_passport
            - address
          description: >-
            The section of the user&#39;s Telegram Passport which has the error,
            one of “personal_details”, “passport”, “driver_license”,
            “identity_card”, “internal_passport”, “address”
        field_name:
          type: string
          description: Name of the data field which has the error
        data_hash:
          type: string
          description: Base64-encoded data hash
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - field_name
        - data_hash
        - message
    PassportElementErrorFile:
      type: object
      properties:
        source:
          type: string
          enum:
            - file
          description: Error source, must be file
        type:
          type: string
          enum:
            - utility_bill
            - bank_statement
            - rental_agreement
            - passport_registration
            - temporary_registration
          description: >-
            The section of the user&#39;s Telegram Passport which has the issue,
            one of “utility_bill”, “bank_statement”, “rental_agreement”,
            “passport_registration”, “temporary_registration”
        file_hash:
          type: string
          description: Base64-encoded file hash
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hash
        - message
    PassportElementErrorFiles:
      type: object
      properties:
        source:
          type: string
          enum:
            - files
          description: Error source, must be files
        type:
          type: string
          enum:
            - utility_bill
            - bank_statement
            - rental_agreement
            - passport_registration
            - temporary_registration
          description: >-
            The section of the user&#39;s Telegram Passport which has the issue,
            one of “utility_bill”, “bank_statement”, “rental_agreement”,
            “passport_registration”, “temporary_registration”
        file_hashes:
          type: array
          items:
            type: string
          description: List of base64-encoded file hashes
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hashes
        - message
    PassportElementErrorFrontSide:
      type: object
      properties:
        source:
          type: string
          enum:
            - front_side
          description: Error source, must be front_side
        type:
          type: string
          enum:
            - passport
            - driver_license
            - identity_card
            - internal_passport
          description: >-
            The section of the user&#39;s Telegram Passport which has the issue,
            one of “passport”, “driver_license”, “identity_card”,
            “internal_passport”
        file_hash:
          type: string
          description: Base64-encoded hash of the file with the front side of the document
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hash
        - message
    PassportElementErrorReverseSide:
      type: object
      properties:
        source:
          type: string
          enum:
            - reverse_side
          description: Error source, must be reverse_side
        type:
          type: string
          enum:
            - driver_license
            - identity_card
          description: >-
            The section of the user&#39;s Telegram Passport which has the issue,
            one of “driver_license”, “identity_card”
        file_hash:
          type: string
          description: >-
            Base64-encoded hash of the file with the reverse side of the
            document
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hash
        - message
    PassportElementErrorSelfie:
      type: object
      properties:
        source:
          type: string
          enum:
            - selfie
          description: Error source, must be selfie
        type:
          type: string
          enum:
            - passport
            - driver_license
            - identity_card
            - internal_passport
          description: >-
            The section of the user&#39;s Telegram Passport which has the issue,
            one of “passport”, “driver_license”, “identity_card”,
            “internal_passport”
        file_hash:
          type: string
          description: Base64-encoded hash of the file with the selfie
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hash
        - message
    PassportElementErrorTranslationFile:
      type: object
      properties:
        source:
          type: string
          enum:
            - translation_file
          description: Error source, must be translation_file
        type:
          type: string
          enum:
            - passport
            - driver_license
            - identity_card
            - internal_passport
            - utility_bill
            - bank_statement
            - rental_agreement
            - passport_registration
            - temporary_registration
          description: >-
            Type of element of the user&#39;s Telegram Passport which has the
            issue, one of “passport”, “driver_license”, “identity_card”,
            “internal_passport”, “utility_bill”, “bank_statement”,
            “rental_agreement”, “passport_registration”,
            “temporary_registration”
        file_hash:
          type: string
          description: Base64-encoded file hash
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hash
        - message
    PassportElementErrorTranslationFiles:
      type: object
      properties:
        source:
          type: string
          enum:
            - translation_files
          description: Error source, must be translation_files
        type:
          type: string
          enum:
            - passport
            - driver_license
            - identity_card
            - internal_passport
            - utility_bill
            - bank_statement
            - rental_agreement
            - passport_registration
            - temporary_registration
          description: >-
            Type of element of the user&#39;s Telegram Passport which has the
            issue, one of “passport”, “driver_license”, “identity_card”,
            “internal_passport”, “utility_bill”, “bank_statement”,
            “rental_agreement”, “passport_registration”,
            “temporary_registration”
        file_hashes:
          type: array
          items:
            type: string
          description: List of base64-encoded file hashes
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - file_hashes
        - message
    PassportElementErrorUnspecified:
      type: object
      properties:
        source:
          type: string
          enum:
            - unspecified
          description: Error source, must be unspecified
        type:
          type: string
          description: >-
            Type of element of the user&#39;s Telegram Passport which has the
            issue
        element_hash:
          type: string
          description: Base64-encoded element hash
        message:
          type: string
          description: Error message
      required:
        - source
        - type
        - element_hash
        - message
    PassportFile:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        file_size:
          type: number
          description: File size in bytes
        file_date:
          type: number
          description: Unix time when the file was uploaded
      required:
        - file_id
        - file_unique_id
        - file_size
        - file_date
    PhotoSize:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        width:
          type: number
          description: Photo width
        height:
          type: number
          description: Photo height
        file_size:
          type: number
          description: File size in bytes
      required:
        - file_id
        - file_unique_id
        - width
        - height
    Poll:
      type: object
      properties:
        id:
          type: string
          description: Unique poll identifier
        question:
          type: string
          description: Poll question, 1-300 characters
        options:
          type: array
          items:
            $ref: '#/components/schemas/PollOption'
          description: List of poll options
        total_voter_count:
          type: number
          description: Total number of users that voted in the poll
        is_closed:
          type: boolean
          description: True, if the poll is closed
        is_anonymous:
          type: boolean
          description: True, if the poll is anonymous
        type:
          type: string
          enum:
            - regular
            - quiz
          description: Poll type, currently can be “regular” or “quiz”
        allows_multiple_answers:
          type: boolean
          description: True, if the poll allows multiple answers
        question_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            Special entities that appear in the question<br/>Currently, only
            custom emoji entities are allowed in poll questions
        correct_option_id:
          type: number
          description: >-
            0-based identifier of the correct answer option<br/>Available only
            for polls in the quiz mode, which are closed, or was sent (not
            forwarded) by the bot or to the private chat with the bot.
        explanation:
          type: string
          description: >-
            Text that is shown when a user chooses an incorrect answer or taps
            on the lamp icon in a quiz-style poll, 0-200 characters
        explanation_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            Special entities like usernames, URLs, bot commands, etc<br/>that
            appear in the explanation
        open_period:
          type: number
          description: Amount of time in seconds the poll will be active after creation
        close_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when the poll will be automatically
            closed
      required:
        - id
        - question
        - options
        - total_voter_count
        - is_closed
        - is_anonymous
        - type
        - allows_multiple_answers
    PollAnswer:
      type: object
      properties:
        poll_id:
          type: string
          description: Unique poll identifier
        option_ids:
          type: array
          items:
            type: number
          description: >-
            0-based identifiers of chosen answer options<br/>May be empty if the
            vote was retracted.
        voter_chat:
          $ref: '#/components/schemas/Chat'
          description: >-
            The chat that changed the answer to the poll, if the voter is
            anonymous
        user:
          $ref: '#/components/schemas/User'
          description: >-
            The user that changed the answer to the poll, if the voter isn&#39;t
            anonymous
      required:
        - poll_id
        - option_ids
    PollOption:
      type: object
      properties:
        text:
          type: string
          description: Option text, 1-100 characters
        voter_count:
          type: number
          description: Number of users that voted for this option
        text_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            Special entities that appear in the option text<br/>Currently, only
            custom emoji entities are allowed in poll option texts
      required:
        - text
        - voter_count
    PreCheckoutQuery:
      type: object
      properties:
        id:
          type: string
          description: Unique query identifier
        from:
          $ref: '#/components/schemas/User'
          description: User who sent the query
        currency:
          type: string
          description: >-
            Three-letter ISO 4217 currency code, or “XTR” for payments in
            Telegram Stars
        total_amount:
          type: number
          description: >-
            Total price in the smallest units of the currency (integer, not
            float/double)<br/>For example, for a price of US$ 1.45 pass amount =
            145<br/>See the exp parameter in currencies.json, it shows the
            number of digits past the decimal point for each currency (2 for the
            majority of currencies).
        invoice_payload:
          type: string
          description: Bot-specified invoice payload
        shipping_option_id:
          type: string
          description: Identifier of the shipping option chosen by the user
        order_info:
          $ref: '#/components/schemas/OrderInfo'
          description: Order information provided by the user
      required:
        - id
        - from
        - currency
        - total_amount
        - invoice_payload
    PreparedInlineMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the prepared message
        expiration_date:
          type: number
          description: >-
            Expiration date of the prepared message, in Unix time<br/>Expired
            prepared messages can no longer be used
      required:
        - id
        - expiration_date
    ProximityAlertTriggered:
      type: object
      properties:
        traveler:
          $ref: '#/components/schemas/User'
          description: User that triggered the alert
        watcher:
          $ref: '#/components/schemas/User'
          description: User that set the alert
        distance:
          type: number
          description: The distance between the users
      required:
        - traveler
        - watcher
        - distance
    ReactionCount:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ReactionType'
          description: Type of the reaction
        total_count:
          type: number
          description: Number of times the reaction was added
      required:
        - type
        - total_count
    ReactionType:
      oneOf:
        - $ref: '#/components/schemas/ReactionTypeEmoji'
        - $ref: '#/components/schemas/ReactionTypeCustomEmoji'
        - $ref: '#/components/schemas/ReactionTypePaid'
    ReactionTypeCustomEmoji:
      type: object
      properties:
        type:
          type: string
          enum:
            - custom_emoji
          description: Type of the reaction, always “custom_emoji”
        custom_emoji_id:
          type: string
          description: Custom emoji identifier
      required:
        - type
        - custom_emoji_id
    ReactionTypeEmoji:
      type: object
      properties:
        type:
          type: string
          enum:
            - emoji
          description: Type of the reaction, always “emoji”
        emoji:
          type: string
          enum:
            - 👍
            - 👎
            - ❤
            - 🔥
            - 🥰
            - 👏
            - 😁
            - 🤔
            - 🤯
            - 😱
            - 🤬
            - 😢
            - 🎉
            - 🤩
            - 🤮
            - 💩
            - 🙏
            - 👌
            - 🕊
            - 🤡
            - 🥱
            - 🥴
            - 😍
            - 🐳
            - ❤‍🔥
            - 🌚
            - 🌭
            - 💯
            - 🤣
            - ⚡
            - 🍌
            - 🏆
            - 💔
            - 🤨
            - 😐
            - 🍓
            - 🍾
            - 💋
            - 🖕
            - 😈
            - 😴
            - 😭
            - 🤓
            - 👻
            - 👨‍💻
            - 👀
            - 🎃
            - 🙈
            - 😇
            - 😨
            - 🤝
            - ✍
            - 🤗
            - 🫡
            - 🎅
            - 🎄
            - ☃
            - 💅
            - 🤪
            - 🗿
            - 🆒
            - 💘
            - 🙉
            - 🦄
            - 😘
            - 💊
            - 🙊
            - 😎
            - 👾
            - 🤷‍♂
            - 🤷
            - 🤷‍♀
            - 😡
          description: >-
            Reaction emoji<br/>Currently, it can be one of "👍", "👎", "❤",
            "🔥", "🥰", "👏", "😁", "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩",
            "🤮", "💩", "🙏", "👌", "🕊", "🤡", "🥱", "🥴", "😍", "🐳", "❤‍🔥",
            "🌚", "🌭", "💯", "🤣", "⚡", "🍌", "🏆", "💔", "🤨", "😐", "🍓",
            "🍾", "💋", "🖕", "😈", "😴", "😭", "🤓", "👻", "👨‍💻", "👀", "🎃",
            "🙈", "😇", "😨", "🤝", "✍", "🤗", "🫡", "🎅", "🎄", "☃", "💅",
            "🤪", "🗿", "🆒", "💘", "🙉", "🦄", "😘", "💊", "🙊", "😎", "👾",
            "🤷‍♂", "🤷", "🤷‍♀", "😡"
      required:
        - type
        - emoji
    ReactionTypePaid:
      type: object
      properties:
        type:
          type: string
          enum:
            - paid
          description: Type of the reaction, always “paid”
      required:
        - type
    RefundedPayment:
      type: object
      properties:
        currency:
          type: string
          enum:
            - XTR
          description: >-
            Three-letter ISO 4217 currency code, or “XTR” for payments in
            Telegram Stars<br/>Currently, always “XTR”
        total_amount:
          type: number
          description: >-
            Total refunded price in the smallest units of the currency (integer,
            not float/double)<br/>For example, for a price of US$ 1.45,
            total_amount = 145<br/>See the exp parameter in currencies.json, it
            shows the number of digits past the decimal point for each currency
            (2 for the majority of currencies).
        invoice_payload:
          type: string
          description: Bot-specified invoice payload
        telegram_payment_charge_id:
          type: string
          description: Telegram payment identifier
        provider_payment_charge_id:
          type: string
          description: Provider payment identifier
      required:
        - currency
        - total_amount
        - invoice_payload
        - telegram_payment_charge_id
    ReplyKeyboardMarkup:
      type: object
      properties:
        keyboard:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeyboardButton'
          description: >-
            Array of button rows, each represented by an Array of KeyboardButton
            objects
        is_persistent:
          type: boolean
          description: >-
            Requests clients to always show the keyboard when the regular
            keyboard is hidden<br/>Defaults to false, in which case the custom
            keyboard can be hidden and opened with a keyboard icon.
        resize_keyboard:
          type: boolean
          description: >-
            Requests clients to resize the keyboard vertically for optimal fit
            (e.g., make the keyboard smaller if there are just two rows of
            buttons)<br/>Defaults to false, in which case the custom keyboard is
            always of the same height as the app&#39;s standard keyboard.
        one_time_keyboard:
          type: boolean
          description: >-
            Requests clients to hide the keyboard as soon as it&#39;s been
            used<br/>The keyboard will still be available, but clients will
            automatically display the usual letter-keyboard in the chat - the
            user can press a special button in the input field to see the custom
            keyboard again<br/>Defaults to false.
        input_field_placeholder:
          type: string
          description: >-
            The placeholder to be shown in the input field when the keyboard is
            active; 1-64 characters
        selective:
          type: boolean
          description: >-
            Use this parameter if you want to show the keyboard to specific
            users only<br/>Targets: 1) users that are @mentioned in the text of
            the Message object; 2) if the bot&#39;s message is a reply to a
            message in the same chat and forum topic, sender of the original
            message<br/>.<br/>Example: A user requests to change the bot&#39;s
            language, bot replies to the request with a keyboard to select the
            new language<br/>Other users in the group don&#39;t see the
            keyboard.
      required:
        - keyboard
    ReplyKeyboardRemove:
      type: object
      properties:
        remove_keyboard:
          type: boolean
          description: >-
            Requests clients to remove the custom keyboard (user will not be
            able to summon this keyboard; if you want to hide the keyboard from
            sight but keep it accessible, use one_time_keyboard in
            ReplyKeyboardMarkup)
        selective:
          type: boolean
          description: >-
            Use this parameter if you want to remove the keyboard for specific
            users only<br/>Targets: 1) users that are @mentioned in the text of
            the Message object; 2) if the bot&#39;s message is a reply to a
            message in the same chat and forum topic, sender of the original
            message<br/>.<br/>Example: A user votes in a poll, bot returns
            confirmation message in reply to the vote and removes the keyboard
            for that user, while still showing the keyboard with poll options to
            users who haven&#39;t voted yet.
      required:
        - remove_keyboard
    ReplyParameters:
      type: object
      properties:
        message_id:
          type: number
          description: >-
            Identifier of the message that will be replied to in the current
            chat, or in the chat chat_id if it is specified
        chat_id:
          oneOf:
            - type: number
            - type: string
          description: >-
            If the message to be replied to is from a different chat, unique
            identifier for the chat or username of the channel (in the format
            @channelusername)<br/>Not supported for messages sent on behalf of a
            business account.
        allow_sending_without_reply:
          type: boolean
          description: >-
            Pass True if the message should be sent even if the specified
            message to be replied to is not found<br/>Always False for replies
            in another chat or forum topic<br/>Always True for messages sent on
            behalf of a business account.
        quote:
          type: string
          description: >-
            Quoted part of the message to be replied to; 0-1024 characters after
            entities parsing<br/>The quote must be an exact substring of the
            message to be replied to, including bold, italic, underline,
            strikethrough, spoiler, and custom_emoji entities<br/>The message
            will fail to send if the quote isn&#39;t found in the original
            message.
        quote_parse_mode:
          oneOf:
            - type: string
              enum:
                - HTML
                - MarkdownV2
          description: >-
            Mode for parsing entities in the quote<br/>See formatting options
            for more details.
        quote_entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            A JSON-serialized list of special entities that appear in the
            quote<br/>It can be specified instead of quote_parse_mode.
        quote_position:
          type: number
          description: Position of the quote in the original message in UTF-16 code units
      required:
        - message_id
    ResponseParameters:
      type: object
      properties:
        migrate_to_chat_id:
          type: number
          description: >-
            The group has been migrated to a supergroup with the specified
            identifier<br/>This number may have more than 32 significant bits
            and some programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this identifier.
        retry_after:
          type: number
          description: >-
            In case of exceeding flood control, the number of seconds left to
            wait before the request can be repeated
    RevenueWithdrawalState:
      oneOf:
        - $ref: '#/components/schemas/RevenueWithdrawalStatePending'
        - $ref: '#/components/schemas/RevenueWithdrawalStateSucceeded'
        - $ref: '#/components/schemas/RevenueWithdrawalStateFailed'
    RevenueWithdrawalStateFailed:
      type: object
      properties:
        type:
          type: string
          enum:
            - failed
          description: Type of the state, always “failed”
      required:
        - type
    RevenueWithdrawalStatePending:
      type: object
      properties:
        type:
          type: string
          enum:
            - pending
          description: Type of the state, always “pending”
      required:
        - type
    RevenueWithdrawalStateSucceeded:
      type: object
      properties:
        type:
          type: string
          enum:
            - succeeded
          description: Type of the state, always “succeeded”
        date:
          type: number
          description: Date the withdrawal was completed in Unix time
        url:
          type: string
          description: An HTTPS URL that can be used to see transaction details
      required:
        - type
        - date
        - url
    SentWebAppMessage:
      type: object
      properties:
        inline_message_id:
          type: string
          description: >-
            Identifier of the sent inline message<br/>Available only if there is
            an inline keyboard attached to the message.
    SharedUser:
      type: object
      properties:
        user_id:
          type: number
          description: >-
            Identifier of the shared user<br/>This number may have more than 32
            significant bits and some programming languages may have
            difficulty/silent defects in interpreting it<br/>But it has at most
            52 significant bits, so 64-bit integers or double-precision float
            types are safe for storing these identifiers<br/>The bot may not
            have access to the user and could be unable to use this identifier,
            unless the user is already known to the bot by some other means.
        first_name:
          type: string
          description: First name of the user, if the name was requested by the bot
        last_name:
          type: string
          description: Last name of the user, if the name was requested by the bot
        username:
          type: string
          description: Username of the user, if the username was requested by the bot
        photo:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: >-
            Available sizes of the chat photo, if the photo was requested by the
            bot
      required:
        - user_id
    ShippingAddress:
      type: object
      properties:
        country_code:
          type: string
          description: Two-letter ISO 3166-1 alpha-2 country code
        state:
          type: string
          description: State, if applicable
        city:
          type: string
          description: City
        street_line1:
          type: string
          description: First line for the address
        street_line2:
          type: string
          description: Second line for the address
        post_code:
          type: string
          description: Address post code
      required:
        - country_code
        - state
        - city
        - street_line1
        - street_line2
        - post_code
    ShippingOption:
      type: object
      properties:
        id:
          type: string
          description: Shipping option identifier
        title:
          type: string
          description: Option title
        prices:
          type: array
          items:
            $ref: '#/components/schemas/LabeledPrice'
          description: List of price portions
      required:
        - id
        - title
        - prices
    ShippingQuery:
      type: object
      properties:
        id:
          type: string
          description: Unique query identifier
        from:
          $ref: '#/components/schemas/User'
          description: User who sent the query
        invoice_payload:
          type: string
          description: Bot-specified invoice payload
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
          description: User specified shipping address
      required:
        - id
        - from
        - invoice_payload
        - shipping_address
    StarAmount:
      type: object
      properties:
        amount:
          type: number
          description: Integer amount of Telegram Stars, rounded to 0; can be negative
        nanostar_amount:
          type: number
          description: >-
            The number of 1/1000000000 shares of Telegram Stars; from -999999999
            to 999999999; can be negative if and only if amount is non-positive
      required:
        - amount
    StarTransaction:
      type: object
      properties:
        id:
          type: string
          description: >-
            Unique identifier of the transaction<br/>Coincides with the
            identifier of the original transaction for refund
            transactions<br/>Coincides with
            SuccessfulPayment.telegram_payment_charge_id for successful incoming
            payments from users.
        amount:
          type: number
          description: Integer amount of Telegram Stars transferred by the transaction
        date:
          type: number
          description: Date the transaction was created in Unix time
        nanostar_amount:
          type: number
          description: >-
            The number of 1/1000000000 shares of Telegram Stars transferred by
            the transaction; from 0 to 999999999
        source:
          $ref: '#/components/schemas/TransactionPartner'
          description: >-
            Source of an incoming transaction (e.g., a user purchasing goods or
            services, Fragment refunding a failed withdrawal)<br/>Only for
            incoming transactions
        receiver:
          $ref: '#/components/schemas/TransactionPartner'
          description: >-
            Receiver of an outgoing transaction (e.g., a user for a purchase
            refund, Fragment for a withdrawal)<br/>Only for outgoing
            transactions
      required:
        - id
        - amount
        - date
    StarTransactions:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/StarTransaction'
          description: The list of transactions
      required:
        - transactions
    Sticker:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        type:
          type: string
          enum:
            - regular
            - mask
            - custom_emoji
          description: >-
            Type of the sticker, currently one of “regular”, “mask”,
            “custom_emoji”<br/>The type of the sticker is independent from its
            format, which is determined by the fields is_animated and is_video.
        width:
          type: number
          description: Sticker width
        height:
          type: number
          description: Sticker height
        is_animated:
          type: boolean
          description: True, if the sticker is animated
        is_video:
          type: boolean
          description: True, if the sticker is a video sticker
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Sticker thumbnail in the .WEBP or .JPG format
        emoji:
          type: string
          description: Emoji associated with the sticker
        set_name:
          type: string
          description: Name of the sticker set to which the sticker belongs
        premium_animation:
          $ref: '#/components/schemas/File'
          description: For premium regular stickers, premium animation for the sticker
        mask_position:
          $ref: '#/components/schemas/MaskPosition'
          description: For mask stickers, the position where the mask should be placed
        custom_emoji_id:
          type: string
          description: For custom emoji stickers, unique identifier of the custom emoji
        needs_repainting:
          type: boolean
          description: >-
            True, if the sticker must be repainted to a text color in messages,
            the color of the Telegram Premium badge in emoji status, white color
            on chat photos, or another appropriate color in other places
        file_size:
          type: number
          description: File size in bytes
      required:
        - file_id
        - file_unique_id
        - type
        - width
        - height
        - is_animated
        - is_video
    StickerSet:
      type: object
      properties:
        name:
          type: string
          description: Sticker set name
        title:
          type: string
          description: Sticker set title
        sticker_type:
          type: string
          enum:
            - regular
            - mask
            - custom_emoji
          description: >-
            Type of stickers in the set, currently one of “regular”, “mask”,
            “custom_emoji”
        stickers:
          type: array
          items:
            $ref: '#/components/schemas/Sticker'
          description: List of all set stickers
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format
      required:
        - name
        - title
        - sticker_type
        - stickers
    Story:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/Chat'
          description: Chat that posted the story
        id:
          type: number
          description: Unique identifier for the story in the chat
      required:
        - chat
        - id
    StoryArea:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/StoryAreaPosition'
          description: Position of the area
        type:
          $ref: '#/components/schemas/StoryAreaType'
          description: Type of the area
      required:
        - position
        - type
    StoryAreaPosition:
      type: object
      properties:
        x_percentage:
          type: number
          description: >-
            The abscissa of the area&#39;s center, as a percentage of the media
            width
        y_percentage:
          type: number
          description: >-
            The ordinate of the area&#39;s center, as a percentage of the media
            height
        width_percentage:
          type: number
          description: >-
            The width of the area&#39;s rectangle, as a percentage of the media
            width
        height_percentage:
          type: number
          description: >-
            The height of the area&#39;s rectangle, as a percentage of the media
            height
        rotation_angle:
          type: number
          description: The clockwise rotation angle of the rectangle, in degrees; 0-360
        corner_radius_percentage:
          type: number
          description: >-
            The radius of the rectangle corner rounding, as a percentage of the
            media width
      required:
        - x_percentage
        - y_percentage
        - width_percentage
        - height_percentage
        - rotation_angle
        - corner_radius_percentage
    StoryAreaType:
      oneOf:
        - $ref: '#/components/schemas/StoryAreaTypeLocation'
        - $ref: '#/components/schemas/StoryAreaTypeSuggestedReaction'
        - $ref: '#/components/schemas/StoryAreaTypeLink'
        - $ref: '#/components/schemas/StoryAreaTypeWeather'
        - $ref: '#/components/schemas/StoryAreaTypeUniqueGift'
    StoryAreaTypeLink:
      type: object
      properties:
        type:
          type: string
          enum:
            - link
          description: Type of the area, always “link”
        url:
          type: string
          description: HTTP or tg:// URL to be opened when the area is clicked
      required:
        - type
        - url
    StoryAreaTypeLocation:
      type: object
      properties:
        type:
          type: string
          enum:
            - location
          description: Type of the area, always “location”
        latitude:
          type: number
          description: Location latitude in degrees
        longitude:
          type: number
          description: Location longitude in degrees
        address:
          $ref: '#/components/schemas/LocationAddress'
          description: Address of the location
      required:
        - type
        - latitude
        - longitude
    StoryAreaTypeSuggestedReaction:
      type: object
      properties:
        type:
          type: string
          enum:
            - suggested_reaction
          description: Type of the area, always “suggested_reaction”
        reaction_type:
          $ref: '#/components/schemas/ReactionType'
          description: Type of the reaction
        is_dark:
          type: boolean
          description: Pass True if the reaction area has a dark background
        is_flipped:
          type: boolean
          description: Pass True if reaction area corner is flipped
      required:
        - type
        - reaction_type
    StoryAreaTypeUniqueGift:
      type: object
      properties:
        type:
          type: string
          enum:
            - unique_gift
          description: Type of the area, always “unique_gift”
        name:
          type: string
          description: Unique name of the gift
      required:
        - type
        - name
    StoryAreaTypeWeather:
      type: object
      properties:
        type:
          type: string
          enum:
            - weather
          description: Type of the area, always “weather”
        temperature:
          type: number
          description: Temperature, in degree Celsius
        emoji:
          type: string
          description: Emoji representing the weather
        background_color:
          type: number
          description: A color of the area background in the ARGB format
      required:
        - type
        - temperature
        - emoji
        - background_color
    SuccessfulPayment:
      type: object
      properties:
        currency:
          type: string
          description: >-
            Three-letter ISO 4217 currency code, or “XTR” for payments in
            Telegram Stars
        total_amount:
          type: number
          description: >-
            Total price in the smallest units of the currency (integer, not
            float/double)<br/>For example, for a price of US$ 1.45 pass amount =
            145<br/>See the exp parameter in currencies.json, it shows the
            number of digits past the decimal point for each currency (2 for the
            majority of currencies).
        invoice_payload:
          type: string
          description: Bot-specified invoice payload
        telegram_payment_charge_id:
          type: string
          description: Telegram payment identifier
        provider_payment_charge_id:
          type: string
          description: Provider payment identifier
        subscription_expiration_date:
          type: number
          description: >-
            Expiration date of the subscription, in Unix time; for recurring
            payments only
        is_recurring:
          type: boolean
          description: True, if the payment is a recurring payment for a subscription
        is_first_recurring:
          type: boolean
          description: True, if the payment is the first payment for a subscription
        shipping_option_id:
          type: string
          description: Identifier of the shipping option chosen by the user
        order_info:
          $ref: '#/components/schemas/OrderInfo'
          description: Order information provided by the user
      required:
        - currency
        - total_amount
        - invoice_payload
        - telegram_payment_charge_id
        - provider_payment_charge_id
    SwitchInlineQueryChosenChat:
      type: object
      properties:
        query:
          type: string
          description: >-
            The default inline query to be inserted in the input field<br/>If
            left empty, only the bot&#39;s username will be inserted
        allow_user_chats:
          type: boolean
          description: True, if private chats with users can be chosen
        allow_bot_chats:
          type: boolean
          description: True, if private chats with bots can be chosen
        allow_group_chats:
          type: boolean
          description: True, if group and supergroup chats can be chosen
        allow_channel_chats:
          type: boolean
          description: True, if channel chats can be chosen
    TextQuote:
      type: object
      properties:
        text:
          type: string
          description: >-
            Text of the quoted part of a message that is replied to by the given
            message
        position:
          type: number
          description: >-
            Approximate quote position in the original message in UTF-16 code
            units as specified by the sender
        entities:
          type: array
          items:
            $ref: '#/components/schemas/MessageEntity'
          description: >-
            Special entities that appear in the quote<br/>Currently, only bold,
            italic, underline, strikethrough, spoiler, and custom_emoji entities
            are kept in quotes.
        is_manual:
          type: boolean
          description: >-
            True, if the quote was chosen manually by the message
            sender<br/>Otherwise, the quote was added automatically by the
            server.
      required:
        - text
        - position
    TransactionPartner:
      oneOf:
        - $ref: '#/components/schemas/TransactionPartnerUser'
        - $ref: '#/components/schemas/TransactionPartnerChat'
        - $ref: '#/components/schemas/TransactionPartnerAffiliateProgram'
        - $ref: '#/components/schemas/TransactionPartnerFragment'
        - $ref: '#/components/schemas/TransactionPartnerTelegramAds'
        - $ref: '#/components/schemas/TransactionPartnerTelegramApi'
        - $ref: '#/components/schemas/TransactionPartnerOther'
    TransactionPartnerAffiliateProgram:
      type: object
      properties:
        type:
          type: string
          enum:
            - affiliate_program
          description: Type of the transaction partner, always “affiliate_program”
        commission_per_mille:
          type: number
          description: >-
            The number of Telegram Stars received by the bot for each 1000
            Telegram Stars received by the affiliate program sponsor from
            referred users
        sponsor_user:
          $ref: '#/components/schemas/User'
          description: Information about the bot that sponsored the affiliate program
      required:
        - type
        - commission_per_mille
    TransactionPartnerChat:
      type: object
      properties:
        type:
          type: string
          enum:
            - chat
          description: Type of the transaction partner, always “chat”
        chat:
          $ref: '#/components/schemas/Chat'
          description: Information about the chat
        gift:
          $ref: '#/components/schemas/Gift'
          description: The gift sent to the chat by the bot
      required:
        - type
        - chat
    TransactionPartnerFragment:
      type: object
      properties:
        type:
          type: string
          enum:
            - fragment
          description: Type of the transaction partner, always “fragment”
        withdrawal_state:
          $ref: '#/components/schemas/RevenueWithdrawalState'
          description: State of the transaction if the transaction is outgoing
      required:
        - type
    TransactionPartnerOther:
      type: object
      properties:
        type:
          type: string
          enum:
            - other
          description: Type of the transaction partner, always “other”
      required:
        - type
    TransactionPartnerTelegramAds:
      type: object
      properties:
        type:
          type: string
          enum:
            - telegram_ads
          description: Type of the transaction partner, always “telegram_ads”
      required:
        - type
    TransactionPartnerTelegramApi:
      type: object
      properties:
        type:
          type: string
          enum:
            - telegram_api
          description: Type of the transaction partner, always “telegram_api”
        request_count:
          type: number
          description: >-
            The number of successful requests that exceeded regular limits and
            were therefore billed
      required:
        - type
        - request_count
    TransactionPartnerUser:
      type: object
      properties:
        type:
          type: string
          enum:
            - user
          description: Type of the transaction partner, always “user”
        transaction_type:
          type: string
          enum:
            - invoice_payment
            - paid_media_payment
            - gift_purchase
            - premium_purchase
            - business_account_transfer
          description: >-
            Type of the transaction, currently one of “invoice_payment” for
            payments via invoices, “paid_media_payment” for payments for paid
            media, “gift_purchase” for gifts sent by the bot, “premium_purchase”
            for Telegram Premium subscriptions gifted by the bot,
            “business_account_transfer” for direct transfers from managed
            business accounts
        user:
          $ref: '#/components/schemas/User'
          description: Information about the user
        affiliate:
          $ref: '#/components/schemas/AffiliateInfo'
          description: >-
            Information about the affiliate that received a commission via this
            transaction<br/>Can be available only for “invoice_payment” and
            “paid_media_payment” transactions.
        invoice_payload:
          type: string
          description: >-
            Bot-specified invoice payload<br/>Can be available only for
            “invoice_payment” transactions.
        subscription_period:
          type: number
          description: >-
            The duration of the paid subscription<br/>Can be available only for
            “invoice_payment” transactions.
        paid_media:
          type: array
          items:
            $ref: '#/components/schemas/PaidMedia'
          description: >-
            Information about the paid media bought by the user; for
            “paid_media_payment” transactions only
        paid_media_payload:
          type: string
          description: >-
            Bot-specified paid media payload<br/>Can be available only for
            “paid_media_payment” transactions.
        gift:
          $ref: '#/components/schemas/Gift'
          description: >-
            The gift sent to the user by the bot; for “gift_purchase”
            transactions only
        premium_subscription_duration:
          type: number
          description: >-
            Number of months the gifted Telegram Premium subscription will be
            active for; for “premium_purchase” transactions only
      required:
        - type
        - transaction_type
        - user
    UniqueGift:
      type: object
      properties:
        base_name:
          type: string
          description: >-
            Human-readable name of the regular gift from which this unique gift
            was upgraded
        name:
          type: string
          description: >-
            Unique name of the gift<br/>This name can be used in
            https://t.me/nft/... links and story areas
        number:
          type: number
          description: >-
            Unique number of the upgraded gift among gifts upgraded from the
            same regular gift
        model:
          $ref: '#/components/schemas/UniqueGiftModel'
          description: Model of the gift
        symbol:
          $ref: '#/components/schemas/UniqueGiftSymbol'
          description: Symbol of the gift
        backdrop:
          $ref: '#/components/schemas/UniqueGiftBackdrop'
          description: Backdrop of the gift
      required:
        - base_name
        - name
        - number
        - model
        - symbol
        - backdrop
    UniqueGiftBackdrop:
      type: object
      properties:
        name:
          type: string
          description: Name of the backdrop
        colors:
          $ref: '#/components/schemas/UniqueGiftBackdropColors'
          description: Colors of the backdrop
        rarity_per_mille:
          type: number
          description: >-
            The number of unique gifts that receive this backdrop for every 1000
            gifts upgraded
      required:
        - name
        - colors
        - rarity_per_mille
    UniqueGiftBackdropColors:
      type: object
      properties:
        center_color:
          type: number
          description: The color in the center of the backdrop in RGB format
        edge_color:
          type: number
          description: The color on the edges of the backdrop in RGB format
        symbol_color:
          type: number
          description: The color to be applied to the symbol in RGB format
        text_color:
          type: number
          description: The color for the text on the backdrop in RGB format
      required:
        - center_color
        - edge_color
        - symbol_color
        - text_color
    UniqueGiftInfo:
      type: object
      properties:
        gift:
          $ref: '#/components/schemas/UniqueGift'
          description: Information about the gift
        origin:
          type: string
          description: Origin of the gift<br/>Currently, either “upgrade” or “transfer”
        owned_gift_id:
          type: string
          description: >-
            Unique identifier of the received gift for the bot; only present for
            gifts received on behalf of business accounts
        transfer_star_count:
          type: number
          description: >-
            Number of Telegram Stars that must be paid to transfer the gift;
            omitted if the bot cannot transfer the gift
      required:
        - gift
        - origin
    UniqueGiftModel:
      type: object
      properties:
        name:
          type: string
          description: Name of the model
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: The sticker that represents the unique gift
        rarity_per_mille:
          type: number
          description: >-
            The number of unique gifts that receive this model for every 1000
            gifts upgraded
      required:
        - name
        - sticker
        - rarity_per_mille
    UniqueGiftSymbol:
      type: object
      properties:
        name:
          type: string
          description: Name of the symbol
        sticker:
          $ref: '#/components/schemas/Sticker'
          description: The sticker that represents the unique gift
        rarity_per_mille:
          type: number
          description: >-
            The number of unique gifts that receive this model for every 1000
            gifts upgraded
      required:
        - name
        - sticker
        - rarity_per_mille
    Update:
      type: object
      properties:
        update_id:
          type: number
          description: >-
            The update&#39;s unique identifier<br/>Update identifiers start from
            a certain positive number and increase sequentially<br/>This
            identifier becomes especially handy if you&#39;re using webhooks,
            since it allows you to ignore repeated updates or to restore the
            correct update sequence, should they get out of order<br/>If there
            are no new updates for at least a week, then identifier of the next
            update will be chosen randomly instead of sequentially.
        message:
          $ref: '#/components/schemas/Message'
          description: New incoming message of any kind - text, photo, sticker, etc.
        edited_message:
          $ref: '#/components/schemas/Message'
          description: >-
            New version of a message that is known to the bot and was
            edited<br/>This update may at times be triggered by changes to
            message fields that are either unavailable or not actively used by
            your bot.
        channel_post:
          $ref: '#/components/schemas/Message'
          description: New incoming channel post of any kind - text, photo, sticker, etc.
        edited_channel_post:
          $ref: '#/components/schemas/Message'
          description: >-
            New version of a channel post that is known to the bot and was
            edited<br/>This update may at times be triggered by changes to
            message fields that are either unavailable or not actively used by
            your bot.
        business_connection:
          $ref: '#/components/schemas/BusinessConnection'
          description: >-
            The bot was connected to or disconnected from a business account, or
            a user edited an existing connection with the bot
        business_message:
          $ref: '#/components/schemas/Message'
          description: New message from a connected business account
        edited_business_message:
          $ref: '#/components/schemas/Message'
          description: New version of a message from a connected business account
        deleted_business_messages:
          $ref: '#/components/schemas/BusinessMessagesDeleted'
          description: Messages were deleted from a connected business account
        message_reaction:
          $ref: '#/components/schemas/MessageReactionUpdated'
          description: >-
            A reaction to a message was changed by a user<br/>The bot must be an
            administrator in the chat and must explicitly specify
            "message_reaction" in the list of allowed_updates to receive these
            updates<br/>The update isn&#39;t received for reactions set by bots.
        message_reaction_count:
          $ref: '#/components/schemas/MessageReactionCountUpdated'
          description: >-
            Reactions to a message with anonymous reactions were changed<br/>The
            bot must be an administrator in the chat and must explicitly specify
            "message_reaction_count" in the list of allowed_updates to receive
            these updates<br/>The updates are grouped and can be sent with delay
            up to a few minutes.
        inline_query:
          $ref: '#/components/schemas/InlineQuery'
          description: New incoming inline query
        chosen_inline_result:
          $ref: '#/components/schemas/ChosenInlineResult'
          description: >-
            The result of an inline query that was chosen by a user and sent to
            their chat partner<br/>Please see our documentation on the feedback
            collecting for details on how to enable these updates for your bot.
        callback_query:
          $ref: '#/components/schemas/CallbackQuery'
          description: New incoming callback query
        shipping_query:
          $ref: '#/components/schemas/ShippingQuery'
          description: >-
            New incoming shipping query<br/>Only for invoices with flexible
            price
        pre_checkout_query:
          $ref: '#/components/schemas/PreCheckoutQuery'
          description: >-
            New incoming pre-checkout query<br/>Contains full information about
            checkout
        purchased_paid_media:
          $ref: '#/components/schemas/PaidMediaPurchased'
          description: >-
            A user purchased paid media with a non-empty payload sent by the bot
            in a non-channel chat
        poll:
          $ref: '#/components/schemas/Poll'
          description: >-
            New poll state<br/>Bots receive only updates about manually stopped
            polls and polls, which are sent by the bot
        poll_answer:
          $ref: '#/components/schemas/PollAnswer'
          description: >-
            A user changed their answer in a non-anonymous poll<br/>Bots receive
            new votes only in polls that were sent by the bot itself.
        my_chat_member:
          $ref: '#/components/schemas/ChatMemberUpdated'
          description: >-
            The bot&#39;s chat member status was updated in a chat<br/>For
            private chats, this update is received only when the bot is blocked
            or unblocked by the user.
        chat_member:
          $ref: '#/components/schemas/ChatMemberUpdated'
          description: >-
            A chat member&#39;s status was updated in a chat<br/>The bot must be
            an administrator in the chat and must explicitly specify
            "chat_member" in the list of allowed_updates to receive these
            updates.
        chat_join_request:
          $ref: '#/components/schemas/ChatJoinRequest'
          description: >-
            A request to join the chat has been sent<br/>The bot must have the
            can_invite_users administrator right in the chat to receive these
            updates.
        chat_boost:
          $ref: '#/components/schemas/ChatBoostUpdated'
          description: >-
            A chat boost was added or changed<br/>The bot must be an
            administrator in the chat to receive these updates.
        removed_chat_boost:
          $ref: '#/components/schemas/ChatBoostRemoved'
          description: >-
            A boost was removed from a chat<br/>The bot must be an administrator
            in the chat to receive these updates.
      required:
        - update_id
    User:
      type: object
      properties:
        id:
          type: number
          description: >-
            Unique identifier for this user or bot<br/>This number may have more
            than 32 significant bits and some programming languages may have
            difficulty/silent defects in interpreting it<br/>But it has at most
            52 significant bits, so a 64-bit integer or double-precision float
            type are safe for storing this identifier.
        is_bot:
          type: boolean
          description: True, if this user is a bot
        first_name:
          type: string
          description: User&#39;s or bot&#39;s first name
        last_name:
          type: string
          description: User&#39;s or bot&#39;s last name
        username:
          type: string
          description: User&#39;s or bot&#39;s username
        language_code:
          type: string
          description: IETF language tag of the user&#39;s language
        is_premium:
          type: boolean
          description: True, if this user is a Telegram Premium user
        added_to_attachment_menu:
          type: boolean
          description: True, if this user added the bot to the attachment menu
        can_join_groups:
          type: boolean
          description: >-
            True, if the bot can be invited to groups<br/>Returned only in
            getMe.
        can_read_all_group_messages:
          type: boolean
          description: >-
            True, if privacy mode is disabled for the bot<br/>Returned only in
            getMe.
        supports_inline_queries:
          type: boolean
          description: True, if the bot supports inline queries<br/>Returned only in getMe.
        can_connect_to_business:
          type: boolean
          description: >-
            True, if the bot can be connected to a Telegram Business account to
            receive its messages<br/>Returned only in getMe.
        has_main_web_app:
          type: boolean
          description: True, if the bot has a main Web App<br/>Returned only in getMe.
      required:
        - id
        - is_bot
        - first_name
    UserChatBoosts:
      type: object
      properties:
        boosts:
          type: array
          items:
            $ref: '#/components/schemas/ChatBoost'
          description: The list of boosts added to the chat by the user
      required:
        - boosts
    UserProfilePhotos:
      type: object
      properties:
        total_count:
          type: number
          description: Total number of profile pictures the target user has
        photos:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PhotoSize'
          description: Requested profile pictures (in up to 4 sizes each)
      required:
        - total_count
        - photos
    UsersShared:
      type: object
      properties:
        request_id:
          type: number
          description: Identifier of the request
        users:
          type: array
          items:
            $ref: '#/components/schemas/SharedUser'
          description: Information about users shared with the bot.
      required:
        - request_id
        - users
    Venue:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
          description: Venue location<br/>Can&#39;t be a live location
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue
        foursquare_type:
          type: string
          description: >-
            Foursquare type of the venue<br/>(For example,
            “arts_entertainment/default”, “arts_entertainment/aquarium” or
            “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue<br/>(See supported types.)
      required:
        - location
        - title
        - address
    Video:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        width:
          type: number
          description: Video width as defined by the sender
        height:
          type: number
          description: Video height as defined by the sender
        duration:
          type: number
          description: Duration of the video in seconds as defined by the sender
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Video thumbnail
        cover:
          type: array
          items:
            $ref: '#/components/schemas/PhotoSize'
          description: Available sizes of the cover of the video in the message
        start_timestamp:
          type: number
          description: Timestamp in seconds from which the video will play in the message
        file_name:
          type: string
          description: Original filename as defined by the sender
        mime_type:
          type: string
          description: MIME type of the file as defined by the sender
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
      required:
        - file_id
        - file_unique_id
        - width
        - height
        - duration
    VideoChatEnded:
      type: object
      properties:
        duration:
          type: number
          description: Video chat duration in seconds
      required:
        - duration
    VideoChatParticipantsInvited:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: New members that were invited to the video chat
      required:
        - users
    VideoChatScheduled:
      type: object
      properties:
        start_date:
          type: number
          description: >-
            Point in time (Unix timestamp) when the video chat is supposed to be
            started by a chat administrator
      required:
        - start_date
    VideoChatStarted:
      type: object
      additionalProperties: false
    VideoNote:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        length:
          type: number
          description: >-
            Video width and height (diameter of the video message) as defined by
            the sender
        duration:
          type: number
          description: Duration of the video in seconds as defined by the sender
        thumbnail:
          $ref: '#/components/schemas/PhotoSize'
          description: Video thumbnail
        file_size:
          type: number
          description: File size in bytes
      required:
        - file_id
        - file_unique_id
        - length
        - duration
    Voice:
      type: object
      properties:
        file_id:
          type: string
          description: >-
            Identifier for this file, which can be used to download or reuse the
            file
        file_unique_id:
          type: string
          description: >-
            Unique identifier for this file, which is supposed to be the same
            over time and for different bots<br/>Can&#39;t be used to download
            or reuse the file.
        duration:
          type: number
          description: Duration of the audio in seconds as defined by the sender
        mime_type:
          type: string
          description: MIME type of the file as defined by the sender
        file_size:
          type: number
          description: >-
            File size in bytes<br/>It can be bigger than 2^31 and some
            programming languages may have difficulty/silent defects in
            interpreting it<br/>But it has at most 52 significant bits, so a
            signed 64-bit integer or double-precision float type are safe for
            storing this value.
      required:
        - file_id
        - file_unique_id
        - duration
    WebAppData:
      type: object
      properties:
        data:
          type: string
          description: >-
            The data<br/>Be aware that a bad client can send arbitrary data in
            this field.
        button_text:
          type: string
          description: >-
            Text of the web_app keyboard button from which the Web App was
            opened<br/>Be aware that a bad client can send arbitrary data in
            this field.
      required:
        - data
        - button_text
    WebAppInfo:
      type: object
      properties:
        url:
          type: string
          description: >-
            An HTTPS URL of a Web App to be opened with additional data as
            specified in Initializing Web Apps
      required:
        - url
    WebhookInfo:
      type: object
      properties:
        url:
          type: string
          description: Webhook URL, may be empty if webhook is not set up
        has_custom_certificate:
          type: boolean
          description: >-
            True, if a custom certificate was provided for webhook certificate
            checks
        pending_update_count:
          type: number
          description: Number of updates awaiting delivery
        ip_address:
          type: string
          description: Currently used webhook IP address
        last_error_date:
          type: number
          description: >-
            Unix time for the most recent error that happened when trying to
            deliver an update via webhook
        last_error_message:
          type: string
          description: >-
            Error message in human-readable format for the most recent error
            that happened when trying to deliver an update via webhook
        last_synchronization_error_date:
          type: number
          description: >-
            Unix time of the most recent error that happened when trying to
            synchronize available updates with Telegram datacenters
        max_connections:
          type: number
          description: >-
            The maximum allowed number of simultaneous HTTPS connections to the
            webhook for update delivery
        allowed_updates:
          type: array
          items:
            type: string
          description: >-
            A list of update types the bot is subscribed to<br/>Defaults to all
            update types except chat_member
      required:
        - url
        - has_custom_certificate
        - pending_update_count
    WriteAccessAllowed:
      type: object
      properties:
        from_request:
          type: boolean
          description: >-
            True, if the access was granted after the user accepted an explicit
            request from a Web App sent by the method requestWriteAccess
        web_app_name:
          type: string
          description: >-
            Name of the Web App, if the access was granted when the Web App was
            launched from a link
        from_attachment_menu:
          type: boolean
          description: >-
            True, if the access was granted when the bot was added to the
            attachment or side menu
